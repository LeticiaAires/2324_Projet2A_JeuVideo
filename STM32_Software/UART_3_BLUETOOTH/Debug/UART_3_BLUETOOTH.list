
UART_3_BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000030  24000000  080054d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000030  08005504  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000e4  08005504  000200e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f366  00000000  00000000  0002005e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001be2  00000000  00000000  0002f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a30  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000998  00000000  00000000  000319d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e9ba  00000000  00000000  00032370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000db2d  00000000  00000000  00060d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131e14  00000000  00000000  0006e857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a066b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000299c  00000000  00000000  001a06bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000030 	.word	0x24000030
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005474 	.word	0x08005474

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000034 	.word	0x24000034
 80002e8:	08005474 	.word	0x08005474

080002ec <strlen>:
 80002ec:	4603      	mov	r3, r0
 80002ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d1fb      	bne.n	80002ee <strlen+0x2>
 80002f6:	1a18      	subs	r0, r3, r0
 80002f8:	3801      	subs	r0, #1
 80002fa:	4770      	bx	lr

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b974 	b.w	80005fc <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	4604      	mov	r4, r0
 8000334:	468e      	mov	lr, r1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d14d      	bne.n	80003d6 <__udivmoddi4+0xaa>
 800033a:	428a      	cmp	r2, r1
 800033c:	4694      	mov	ip, r2
 800033e:	d969      	bls.n	8000414 <__udivmoddi4+0xe8>
 8000340:	fab2 f282 	clz	r2, r2
 8000344:	b152      	cbz	r2, 800035c <__udivmoddi4+0x30>
 8000346:	fa01 f302 	lsl.w	r3, r1, r2
 800034a:	f1c2 0120 	rsb	r1, r2, #32
 800034e:	fa20 f101 	lsr.w	r1, r0, r1
 8000352:	fa0c fc02 	lsl.w	ip, ip, r2
 8000356:	ea41 0e03 	orr.w	lr, r1, r3
 800035a:	4094      	lsls	r4, r2
 800035c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000360:	0c21      	lsrs	r1, r4, #16
 8000362:	fbbe f6f8 	udiv	r6, lr, r8
 8000366:	fa1f f78c 	uxth.w	r7, ip
 800036a:	fb08 e316 	mls	r3, r8, r6, lr
 800036e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000372:	fb06 f107 	mul.w	r1, r6, r7
 8000376:	4299      	cmp	r1, r3
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x64>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000382:	f080 811f 	bcs.w	80005c4 <__udivmoddi4+0x298>
 8000386:	4299      	cmp	r1, r3
 8000388:	f240 811c 	bls.w	80005c4 <__udivmoddi4+0x298>
 800038c:	3e02      	subs	r6, #2
 800038e:	4463      	add	r3, ip
 8000390:	1a5b      	subs	r3, r3, r1
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb3 f0f8 	udiv	r0, r3, r8
 8000398:	fb08 3310 	mls	r3, r8, r0, r3
 800039c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a0:	fb00 f707 	mul.w	r7, r0, r7
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x92>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b0:	f080 810a 	bcs.w	80005c8 <__udivmoddi4+0x29c>
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	f240 8107 	bls.w	80005c8 <__udivmoddi4+0x29c>
 80003ba:	4464      	add	r4, ip
 80003bc:	3802      	subs	r0, #2
 80003be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c2:	1be4      	subs	r4, r4, r7
 80003c4:	2600      	movs	r6, #0
 80003c6:	b11d      	cbz	r5, 80003d0 <__udivmoddi4+0xa4>
 80003c8:	40d4      	lsrs	r4, r2
 80003ca:	2300      	movs	r3, #0
 80003cc:	e9c5 4300 	strd	r4, r3, [r5]
 80003d0:	4631      	mov	r1, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0xc2>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80ef 	beq.w	80005be <__udivmoddi4+0x292>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x160>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0xd4>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80f9 	bhi.w	80005f2 <__udivmoddi4+0x2c6>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0303 	sbc.w	r3, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	469e      	mov	lr, r3
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0e0      	beq.n	80003d0 <__udivmoddi4+0xa4>
 800040e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000412:	e7dd      	b.n	80003d0 <__udivmoddi4+0xa4>
 8000414:	b902      	cbnz	r2, 8000418 <__udivmoddi4+0xec>
 8000416:	deff      	udf	#255	; 0xff
 8000418:	fab2 f282 	clz	r2, r2
 800041c:	2a00      	cmp	r2, #0
 800041e:	f040 8092 	bne.w	8000546 <__udivmoddi4+0x21a>
 8000422:	eba1 010c 	sub.w	r1, r1, ip
 8000426:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	2601      	movs	r6, #1
 8000430:	0c20      	lsrs	r0, r4, #16
 8000432:	fbb1 f3f7 	udiv	r3, r1, r7
 8000436:	fb07 1113 	mls	r1, r7, r3, r1
 800043a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043e:	fb0e f003 	mul.w	r0, lr, r3
 8000442:	4288      	cmp	r0, r1
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x12c>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f103 38ff 	add.w	r8, r3, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x12a>
 8000450:	4288      	cmp	r0, r1
 8000452:	f200 80cb 	bhi.w	80005ec <__udivmoddi4+0x2c0>
 8000456:	4643      	mov	r3, r8
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1110 	mls	r1, r7, r0, r1
 8000464:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000468:	fb0e fe00 	mul.w	lr, lr, r0
 800046c:	45a6      	cmp	lr, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x156>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d202      	bcs.n	8000480 <__udivmoddi4+0x154>
 800047a:	45a6      	cmp	lr, r4
 800047c:	f200 80bb 	bhi.w	80005f6 <__udivmoddi4+0x2ca>
 8000480:	4608      	mov	r0, r1
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800048a:	e79c      	b.n	80003c6 <__udivmoddi4+0x9a>
 800048c:	f1c6 0720 	rsb	r7, r6, #32
 8000490:	40b3      	lsls	r3, r6
 8000492:	fa22 fc07 	lsr.w	ip, r2, r7
 8000496:	ea4c 0c03 	orr.w	ip, ip, r3
 800049a:	fa20 f407 	lsr.w	r4, r0, r7
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	431c      	orrs	r4, r3
 80004a4:	40f9      	lsrs	r1, r7
 80004a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004aa:	fa00 f306 	lsl.w	r3, r0, r6
 80004ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80004b2:	0c20      	lsrs	r0, r4, #16
 80004b4:	fa1f fe8c 	uxth.w	lr, ip
 80004b8:	fb09 1118 	mls	r1, r9, r8, r1
 80004bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c0:	fb08 f00e 	mul.w	r0, r8, lr
 80004c4:	4288      	cmp	r0, r1
 80004c6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ca:	d90b      	bls.n	80004e4 <__udivmoddi4+0x1b8>
 80004cc:	eb1c 0101 	adds.w	r1, ip, r1
 80004d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004d4:	f080 8088 	bcs.w	80005e8 <__udivmoddi4+0x2bc>
 80004d8:	4288      	cmp	r0, r1
 80004da:	f240 8085 	bls.w	80005e8 <__udivmoddi4+0x2bc>
 80004de:	f1a8 0802 	sub.w	r8, r8, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	1a09      	subs	r1, r1, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004ec:	fb09 1110 	mls	r1, r9, r0, r1
 80004f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004f8:	458e      	cmp	lr, r1
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1e2>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f100 34ff 	add.w	r4, r0, #4294967295
 8000504:	d26c      	bcs.n	80005e0 <__udivmoddi4+0x2b4>
 8000506:	458e      	cmp	lr, r1
 8000508:	d96a      	bls.n	80005e0 <__udivmoddi4+0x2b4>
 800050a:	3802      	subs	r0, #2
 800050c:	4461      	add	r1, ip
 800050e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000512:	fba0 9402 	umull	r9, r4, r0, r2
 8000516:	eba1 010e 	sub.w	r1, r1, lr
 800051a:	42a1      	cmp	r1, r4
 800051c:	46c8      	mov	r8, r9
 800051e:	46a6      	mov	lr, r4
 8000520:	d356      	bcc.n	80005d0 <__udivmoddi4+0x2a4>
 8000522:	d053      	beq.n	80005cc <__udivmoddi4+0x2a0>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x212>
 8000526:	ebb3 0208 	subs.w	r2, r3, r8
 800052a:	eb61 010e 	sbc.w	r1, r1, lr
 800052e:	fa01 f707 	lsl.w	r7, r1, r7
 8000532:	fa22 f306 	lsr.w	r3, r2, r6
 8000536:	40f1      	lsrs	r1, r6
 8000538:	431f      	orrs	r7, r3
 800053a:	e9c5 7100 	strd	r7, r1, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	40d8      	lsrs	r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa21 f303 	lsr.w	r3, r1, r3
 8000554:	4091      	lsls	r1, r2
 8000556:	4301      	orrs	r1, r0
 8000558:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fbb3 f0f7 	udiv	r0, r3, r7
 8000564:	fb07 3610 	mls	r6, r7, r0, r3
 8000568:	0c0b      	lsrs	r3, r1, #16
 800056a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800056e:	fb00 f60e 	mul.w	r6, r0, lr
 8000572:	429e      	cmp	r6, r3
 8000574:	fa04 f402 	lsl.w	r4, r4, r2
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x260>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000582:	d22f      	bcs.n	80005e4 <__udivmoddi4+0x2b8>
 8000584:	429e      	cmp	r6, r3
 8000586:	d92d      	bls.n	80005e4 <__udivmoddi4+0x2b8>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1b9b      	subs	r3, r3, r6
 800058e:	b289      	uxth	r1, r1
 8000590:	fbb3 f6f7 	udiv	r6, r3, r7
 8000594:	fb07 3316 	mls	r3, r7, r6, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb06 f30e 	mul.w	r3, r6, lr
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x28a>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005ac:	d216      	bcs.n	80005dc <__udivmoddi4+0x2b0>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d914      	bls.n	80005dc <__udivmoddi4+0x2b0>
 80005b2:	3e02      	subs	r6, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	1ac9      	subs	r1, r1, r3
 80005b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005bc:	e738      	b.n	8000430 <__udivmoddi4+0x104>
 80005be:	462e      	mov	r6, r5
 80005c0:	4628      	mov	r0, r5
 80005c2:	e705      	b.n	80003d0 <__udivmoddi4+0xa4>
 80005c4:	4606      	mov	r6, r0
 80005c6:	e6e3      	b.n	8000390 <__udivmoddi4+0x64>
 80005c8:	4618      	mov	r0, r3
 80005ca:	e6f8      	b.n	80003be <__udivmoddi4+0x92>
 80005cc:	454b      	cmp	r3, r9
 80005ce:	d2a9      	bcs.n	8000524 <__udivmoddi4+0x1f8>
 80005d0:	ebb9 0802 	subs.w	r8, r9, r2
 80005d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005d8:	3801      	subs	r0, #1
 80005da:	e7a3      	b.n	8000524 <__udivmoddi4+0x1f8>
 80005dc:	4646      	mov	r6, r8
 80005de:	e7ea      	b.n	80005b6 <__udivmoddi4+0x28a>
 80005e0:	4620      	mov	r0, r4
 80005e2:	e794      	b.n	800050e <__udivmoddi4+0x1e2>
 80005e4:	4640      	mov	r0, r8
 80005e6:	e7d1      	b.n	800058c <__udivmoddi4+0x260>
 80005e8:	46d0      	mov	r8, sl
 80005ea:	e77b      	b.n	80004e4 <__udivmoddi4+0x1b8>
 80005ec:	3b02      	subs	r3, #2
 80005ee:	4461      	add	r1, ip
 80005f0:	e732      	b.n	8000458 <__udivmoddi4+0x12c>
 80005f2:	4630      	mov	r0, r6
 80005f4:	e709      	b.n	800040a <__udivmoddi4+0xde>
 80005f6:	4464      	add	r4, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e742      	b.n	8000482 <__udivmoddi4+0x156>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fb46 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f81a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f8e2 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f88c 	bl	800072c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f8d6 	bl	80007c4 <MX_USB_OTG_HS_USB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, txdata, strlen((char*)txdata), HAL_MAX_DELAY); // Transmit the data via UART
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <main+0x38>)
 800061a:	f7ff fe67 	bl	80002ec <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	4904      	ldr	r1, [pc, #16]	; (8000638 <main+0x38>)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <main+0x3c>)
 800062a:	f003 fcdf 	bl	8003fec <HAL_UART_Transmit>
	    HAL_Delay(1000); // Delay for 1 second
 800062e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000632:	f000 fbc1 	bl	8000db8 <HAL_Delay>
  {
 8000636:	e7ef      	b.n	8000618 <main+0x18>
 8000638:	24000000 	.word	0x24000000
 800063c:	2400004c 	.word	0x2400004c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b09c      	sub	sp, #112	; 0x70
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	224c      	movs	r2, #76	; 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 ff08 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2220      	movs	r2, #32
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 ff02 	bl	8005464 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <SystemClock_Config+0xe4>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800066a:	2004      	movs	r0, #4
 800066c:	f000 fe76 	bl	800135c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <SystemClock_Config+0xe8>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <SystemClock_Config+0xe8>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <SystemClock_Config+0xe8>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068c:	bf00      	nop
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <SystemClock_Config+0xe8>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069a:	d1f8      	bne.n	800068e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069c:	2321      	movs	r3, #33	; 0x21
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006b6:	2318      	movs	r3, #24
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006c6:	230c      	movs	r3, #12
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fe9a 	bl	8001410 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006e2:	f000 f981 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	233f      	movs	r3, #63	; 0x3f
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fab2 	bl	8001c74 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000716:	f000 f967 	bl	80009e8 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3770      	adds	r7, #112	; 0x70
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58024400 	.word	0x58024400
 8000728:	58024800 	.word	0x58024800

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_USART3_UART_Init+0x94>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000776:	f003 fbe9 	bl	8003f4c <HAL_UART_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000780:	f000 f932 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_USART3_UART_Init+0x90>)
 8000788:	f004 fd7d 	bl	8005286 <HAL_UARTEx_SetTxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000792:	f000 f929 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x90>)
 800079a:	f004 fdb2 	bl	8005302 <HAL_UARTEx_SetRxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 f920 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_USART3_UART_Init+0x90>)
 80007aa:	f004 fd33 	bl	8005214 <HAL_UARTEx_DisableFifoMode>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f918 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2400004c 	.word	0x2400004c
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b78      	ldr	r3, [pc, #480]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80007ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f0:	4a76      	ldr	r2, [pc, #472]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007fa:	4b74      	ldr	r3, [pc, #464]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80007fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000808:	4b70      	ldr	r3, [pc, #448]	; (80009cc <MX_GPIO_Init+0x1f8>)
 800080a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080e:	4a6f      	ldr	r2, [pc, #444]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000810:	f043 0320 	orr.w	r3, r3, #32
 8000814:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000818:	4b6c      	ldr	r3, [pc, #432]	; (80009cc <MX_GPIO_Init+0x1f8>)
 800081a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081e:	f003 0320 	and.w	r3, r3, #32
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	4b69      	ldr	r3, [pc, #420]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000828:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800082c:	4a67      	ldr	r2, [pc, #412]	; (80009cc <MX_GPIO_Init+0x1f8>)
 800082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000832:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000836:	4b65      	ldr	r3, [pc, #404]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000838:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800083c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000844:	4b61      	ldr	r3, [pc, #388]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000846:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800084a:	4a60      	ldr	r2, [pc, #384]	; (80009cc <MX_GPIO_Init+0x1f8>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000856:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000868:	4a58      	ldr	r2, [pc, #352]	; (80009cc <MX_GPIO_Init+0x1f8>)
 800086a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000874:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b52      	ldr	r3, [pc, #328]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000886:	4a51      	ldr	r2, [pc, #324]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000890:	4b4e      	ldr	r3, [pc, #312]	; (80009cc <MX_GPIO_Init+0x1f8>)
 8000892:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	4b4b      	ldr	r3, [pc, #300]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a49      	ldr	r2, [pc, #292]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b47      	ldr	r3, [pc, #284]	; (80009cc <MX_GPIO_Init+0x1f8>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c2:	4843      	ldr	r0, [pc, #268]	; (80009d0 <MX_GPIO_Init+0x1fc>)
 80008c4:	f000 fd30 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f244 0101 	movw	r1, #16385	; 0x4001
 80008ce:	4841      	ldr	r0, [pc, #260]	; (80009d4 <MX_GPIO_Init+0x200>)
 80008d0:	f000 fd2a 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2102      	movs	r1, #2
 80008d8:	483f      	ldr	r0, [pc, #252]	; (80009d8 <MX_GPIO_Init+0x204>)
 80008da:	f000 fd25 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	483a      	ldr	r0, [pc, #232]	; (80009dc <MX_GPIO_Init+0x208>)
 80008f4:	f000 fb68 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80008f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482f      	ldr	r0, [pc, #188]	; (80009d0 <MX_GPIO_Init+0x1fc>)
 8000912:	f000 fb59 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000916:	f244 0301 	movw	r3, #16385	; 0x4001
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4829      	ldr	r0, [pc, #164]	; (80009d4 <MX_GPIO_Init+0x200>)
 8000930:	f000 fb4a 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000938:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4825      	ldr	r0, [pc, #148]	; (80009e0 <MX_GPIO_Init+0x20c>)
 800094a:	f000 fb3d 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4820      	ldr	r0, [pc, #128]	; (80009e4 <MX_GPIO_Init+0x210>)
 8000964:	f000 fb30 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800097a:	230a      	movs	r3, #10
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	4817      	ldr	r0, [pc, #92]	; (80009e4 <MX_GPIO_Init+0x210>)
 8000986:	f000 fb1f 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800098a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4810      	ldr	r0, [pc, #64]	; (80009e4 <MX_GPIO_Init+0x210>)
 80009a4:	f000 fb10 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_GPIO_Init+0x204>)
 80009c0:	f000 fb02 	bl	8000fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58021400 	.word	0x58021400
 80009d4:	58020400 	.word	0x58020400
 80009d8:	58021000 	.word	0x58021000
 80009dc:	58020800 	.word	0x58020800
 80009e0:	58021800 	.word	0x58021800
 80009e4:	58020000 	.word	0x58020000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x30>)
 80009fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x30>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x30>)
 8000a0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	58024400 	.word	0x58024400

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ba      	sub	sp, #232	; 0xe8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	22c0      	movs	r2, #192	; 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f004 fd0b 	bl	8005464 <memset>
  if(huart->Instance==USART3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <HAL_UART_MspInit+0xc8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d146      	bne.n	8000ae6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a58:	f04f 0202 	mov.w	r2, #2
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fc8c 	bl	800238c <HAL_RCCEx_PeriphCLKConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a7a:	f7ff ffb5 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a80:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a90:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_UART_MspInit+0xcc>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0xd0>)
 8000ae2:	f000 fa71 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	37e8      	adds	r7, #232	; 0xe8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004800 	.word	0x40004800
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020800 	.word	0x58020800

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f916 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <SystemInit+0xd0>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <SystemInit+0xd0>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <SystemInit+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d807      	bhi.n	8000b80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <SystemInit+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 030f 	bic.w	r3, r3, #15
 8000b78:	4a2a      	ldr	r2, [pc, #168]	; (8000c24 <SystemInit+0xd4>)
 8000b7a:	f043 0303 	orr.w	r3, r3, #3
 8000b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <SystemInit+0xd8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <SystemInit+0xd8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <SystemInit+0xd8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemInit+0xd8>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4924      	ldr	r1, [pc, #144]	; (8000c28 <SystemInit+0xd8>)
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <SystemInit+0xdc>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <SystemInit+0xd4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <SystemInit+0xd4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f023 030f 	bic.w	r3, r3, #15
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <SystemInit+0xd4>)
 8000bb4:	f043 0303 	orr.w	r3, r3, #3
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <SystemInit+0xd8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <SystemInit+0xd8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <SystemInit+0xd8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <SystemInit+0xd8>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <SystemInit+0xe0>)
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <SystemInit+0xd8>)
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <SystemInit+0xe4>)
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <SystemInit+0xd8>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <SystemInit+0xe8>)
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <SystemInit+0xd8>)
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <SystemInit+0xe8>)
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0xd8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <SystemInit+0xd8>)
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <SystemInit+0xe8>)
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <SystemInit+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0xd8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <SystemInit+0xd8>)
 8000c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <SystemInit+0xec>)
 8000c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	52002000 	.word	0x52002000
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c30:	02020200 	.word	0x02020200
 8000c34:	01ff0000 	.word	0x01ff0000
 8000c38:	01010280 	.word	0x01010280
 8000c3c:	52004000 	.word	0x52004000

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff ff84 	bl	8000b50 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f004 fbd5 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fcc5 	bl	8000600 <main>
  bx  lr
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c80:	24000030 	.word	0x24000030
  ldr r2, =_sidata
 8000c84:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 8000c88:	24000030 	.word	0x24000030
  ldr r4, =_ebss
 8000c8c:	240000e4 	.word	0x240000e4

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f962 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ca0:	f001 f99e 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <HAL_Init+0x6c>)
 8000cb2:	5ccb      	ldrb	r3, [r1, r3]
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_Init+0x6c>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <HAL_Init+0x70>)
 8000cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x74>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f814 	bl	8000d0c <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e002      	b.n	8000cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe81 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	0800548c 	.word	0x0800548c
 8000d04:	24000024 	.word	0x24000024
 8000d08:	24000020 	.word	0x24000020

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e021      	b.n	8000d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_InitTick+0x64>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f939 	bl	8000fae <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f911 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x68>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2400002c 	.word	0x2400002c
 8000d70:	24000020 	.word	0x24000020
 8000d74:	24000028 	.word	0x24000028

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2400002c 	.word	0x2400002c
 8000d9c:	240000e0 	.word	0x240000e0

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	240000e0 	.word	0x240000e0

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2400002c 	.word	0x2400002c

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <__NVIC_SetPriorityGrouping+0x40>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x40>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00
 8000e44:	05fa0000 	.word	0x05fa0000

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb2 	bl	8000f20 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_GPIO_Init+0x234>)
 8000fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fda:	e194      	b.n	8001306 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8186 	beq.w	8001300 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d005      	beq.n	800100c <HAL_GPIO_Init+0x44>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d130      	bne.n	800106e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	2203      	movs	r2, #3
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68da      	ldr	r2, [r3, #12]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001042:	2201      	movs	r2, #1
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	091b      	lsrs	r3, r3, #4
 8001058:	f003 0201 	and.w	r2, r3, #1
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b03      	cmp	r3, #3
 8001078:	d017      	beq.n	80010aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	2203      	movs	r2, #3
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d123      	bne.n	80010fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	69b9      	ldr	r1, [r7, #24]
 80010fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0203 	and.w	r2, r3, #3
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80e0 	beq.w	8001300 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x238>)
 8001142:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001146:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <HAL_GPIO_Init+0x238>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_GPIO_Init+0x238>)
 8001152:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <HAL_GPIO_Init+0x23c>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <HAL_GPIO_Init+0x240>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d052      	beq.n	8001230 <HAL_GPIO_Init+0x268>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_GPIO_Init+0x244>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d031      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_GPIO_Init+0x248>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x22a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x24c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d025      	beq.n	80011ee <HAL_GPIO_Init+0x226>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_GPIO_Init+0x250>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d01f      	beq.n	80011ea <HAL_GPIO_Init+0x222>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a1b      	ldr	r2, [pc, #108]	; (800121c <HAL_GPIO_Init+0x254>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x21e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x258>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x21a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x25c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x216>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_GPIO_Init+0x260>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x212>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_GPIO_Init+0x264>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x20e>
 80011d2:	2309      	movs	r3, #9
 80011d4:	e02d      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011d6:	230a      	movs	r3, #10
 80011d8:	e02b      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011da:	2308      	movs	r3, #8
 80011dc:	e029      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011de:	2307      	movs	r3, #7
 80011e0:	e027      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e025      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e023      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e021      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e01f      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e01d      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01b      	b.n	8001232 <HAL_GPIO_Init+0x26a>
 80011fa:	bf00      	nop
 80011fc:	58000080 	.word	0x58000080
 8001200:	58024400 	.word	0x58024400
 8001204:	58000400 	.word	0x58000400
 8001208:	58020000 	.word	0x58020000
 800120c:	58020400 	.word	0x58020400
 8001210:	58020800 	.word	0x58020800
 8001214:	58020c00 	.word	0x58020c00
 8001218:	58021000 	.word	0x58021000
 800121c:	58021400 	.word	0x58021400
 8001220:	58021800 	.word	0x58021800
 8001224:	58021c00 	.word	0x58021c00
 8001228:	58022000 	.word	0x58022000
 800122c:	58022400 	.word	0x58022400
 8001230:	2300      	movs	r3, #0
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001242:	4938      	ldr	r1, [pc, #224]	; (8001324 <HAL_GPIO_Init+0x35c>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3301      	adds	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f ae63 	bne.w	8000fdc <HAL_GPIO_Init+0x14>
  }
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	3724      	adds	r7, #36	; 0x24
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	58000400 	.word	0x58000400

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	2b06      	cmp	r3, #6
 800136e:	d00a      	beq.n	8001386 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e040      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e03e      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800138e:	491f      	ldr	r1, [pc, #124]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001396:	f7ff fd03 	bl	8000da0 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800139c:	e009      	b.n	80013b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800139e:	f7ff fcff 	bl	8000da0 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ac:	d901      	bls.n	80013b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e028      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d1ee      	bne.n	800139e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b1e      	cmp	r3, #30
 80013c4:	d008      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b2e      	cmp	r3, #46	; 0x2e
 80013ca:	d005      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b1d      	cmp	r3, #29
 80013d0:	d002      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b2d      	cmp	r3, #45	; 0x2d
 80013d6:	d114      	bne.n	8001402 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013d8:	f7ff fce2 	bl	8000da0 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013de:	e009      	b.n	80013f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013e0:	f7ff fcde 	bl	8000da0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ee:	d901      	bls.n	80013f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e007      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d1ee      	bne.n	80013e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024800 	.word	0x58024800

08001410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	f000 bc1f 	b.w	8001c62 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b3 	beq.w	8001598 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b95      	ldr	r3, [pc, #596]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	2b10      	cmp	r3, #16
 8001446:	d007      	beq.n	8001458 <HAL_RCC_OscConfig+0x48>
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	2b18      	cmp	r3, #24
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x64>
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d10d      	bne.n	8001474 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8098 	beq.w	8001596 <HAL_RCC_OscConfig+0x186>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 8093 	bne.w	8001596 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e3f6      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x7c>
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a81      	ldr	r2, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e058      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d112      	bne.n	80014ba <HAL_RCC_OscConfig+0xaa>
 8001494:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a7b      	ldr	r2, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a78      	ldr	r2, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b76      	ldr	r3, [pc, #472]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e041      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_OscConfig+0xda>
 80014c4:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a6f      	ldr	r2, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6c      	ldr	r2, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a69      	ldr	r2, [pc, #420]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e029      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80014f2:	d112      	bne.n	800151a <HAL_RCC_OscConfig+0x10a>
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a5d      	ldr	r2, [pc, #372]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e011      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 800151a:	4b5b      	ldr	r3, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a57      	ldr	r2, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001538:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800153c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d013      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc2b 	bl	8000da0 <HAL_GetTick>
 800154a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff fc27 	bl	8000da0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e380      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x13e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fc17 	bl	8000da0 <HAL_GetTick>
 8001572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001576:	f7ff fc13 	bl	8000da0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e36c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x166>
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 808c 	beq.w	80016be <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_RCC_OscConfig+0x1bc>
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	2b18      	cmp	r3, #24
 80015c0:	d137      	bne.n	8001632 <HAL_RCC_OscConfig+0x222>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d132      	bne.n	8001632 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1d4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e33e      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 0219 	bic.w	r2, r3, #25
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4925      	ldr	r1, [pc, #148]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fbd3 	bl	8000da0 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fbcf 	bl	8000da0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e328      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001630:	e045      	b.n	80016be <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d028      	beq.n	800168c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0219 	bic.w	r2, r3, #25
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	4910      	ldr	r1, [pc, #64]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fba8 	bl	8000da0 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fba4 	bl	8000da0 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2fd      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4901      	ldr	r1, [pc, #4]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e01a      	b.n	80016be <HAL_RCC_OscConfig+0x2ae>
 8001688:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168c:	4b97      	ldr	r3, [pc, #604]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a96      	ldr	r2, [pc, #600]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fb82 	bl	8000da0 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fb7e 	bl	8000da0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2d7      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b2:	4b8e      	ldr	r3, [pc, #568]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06a      	beq.n	80017a0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d4:	4b85      	ldr	r3, [pc, #532]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d007      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2e0>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d11b      	bne.n	800171e <HAL_RCC_OscConfig+0x30e>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d116      	bne.n	800171e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f0:	4b7e      	ldr	r3, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b80      	cmp	r3, #128	; 0x80
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2ac      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001708:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4975      	ldr	r1, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001718:	4313      	orrs	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800171c:	e040      	b.n	80017a0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001726:	4b71      	ldr	r3, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a70      	ldr	r2, [pc, #448]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fb35 	bl	8000da0 <HAL_GetTick>
 8001736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800173a:	f7ff fb31 	bl	8000da0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e28a      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800174c:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001758:	4b64      	ldr	r3, [pc, #400]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	4961      	ldr	r1, [pc, #388]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e018      	b.n	80017a0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800176e:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fb11 	bl	8000da0 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001782:	f7ff fb0d 	bl	8000da0 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e266      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d036      	beq.n	800181a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d019      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff faee 	bl	8000da0 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff faea 	bl	8000da0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e243      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3b8>
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fad4 	bl	8000da0 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fad0 	bl	8000da0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e229      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d036      	beq.n	8001894 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183a:	f7ff fab1 	bl	8000da0 <HAL_GetTick>
 800183e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001842:	f7ff faad 	bl	8000da0 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e206      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x432>
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800186e:	f7ff fa97 	bl	8000da0 <HAL_GetTick>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001876:	f7ff fa93 	bl	8000da0 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1ec      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80af 	beq.w	8001a00 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ae:	f7ff fa77 	bl	8000da0 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff fa73 	bl	8000da0 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1cc      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4e4>
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a02      	ldr	r2, [pc, #8]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e05b      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 80018ea:	bf00      	nop
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58024800 	.word	0x58024800
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x512>
 80018fc:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b9a      	ldr	r3, [pc, #616]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a99      	ldr	r2, [pc, #612]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800190e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a96      	ldr	r2, [pc, #600]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	e03f      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d112      	bne.n	8001950 <HAL_RCC_OscConfig+0x540>
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a91      	ldr	r2, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a8e      	ldr	r2, [pc, #568]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800193c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a8b      	ldr	r2, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e028      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b85      	cmp	r3, #133	; 0x85
 8001956:	d112      	bne.n	800197e <HAL_RCC_OscConfig+0x56e>
 8001958:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a85      	ldr	r2, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800196a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	e011      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a76      	ldr	r2, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800199c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff f9f9 	bl	8000da0 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f9f5 	bl	8000da0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e14c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x5a2>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f9e3 	bl	8000da0 <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f9df 	bl	8000da0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e136      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f4:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 812b 	beq.w	8001c60 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a12:	2b18      	cmp	r3, #24
 8001a14:	f000 80bb 	beq.w	8001b8e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	f040 8095 	bne.w	8001b4c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f9b7 	bl	8000da0 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f9b3 	bl	8000da0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e10c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x768>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	430a      	orrs	r2, r1
 8001a68:	4942      	ldr	r1, [pc, #264]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	3b01      	subs	r3, #1
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a9e:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001abc:	00d2      	lsls	r2, r2, #3
 8001abe:	492d      	ldr	r1, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f023 020c 	bic.w	r2, r3, #12
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4928      	ldr	r1, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f023 0202 	bic.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4924      	ldr	r1, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f93c 	bl	8000da0 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f938 	bl	8000da0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e091      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x71c>
 8001b4a:	e089      	b.n	8001c60 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f922 	bl	8000da0 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f91e 	bl	8000da0 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e077      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
 8001b72:	bf00      	nop
 8001b74:	58024400 	.word	0x58024400
 8001b78:	fffffc0c 	.word	0xfffffc0c
 8001b7c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e9      	bne.n	8001b60 <HAL_RCC_OscConfig+0x750>
 8001b8c:	e068      	b.n	8001c60 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d031      	beq.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d12a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d122      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d11a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d111      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d108      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0e1b      	lsrs	r3, r3, #24
 8001bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02b      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c14:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d01f      	beq.n	8001c60 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c2c:	f7ff f8b8 	bl	8000da0 <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c32:	bf00      	nop
 8001c34:	f7ff f8b4 	bl	8000da0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d0f9      	beq.n	8001c34 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x860>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c4c:	00d2      	lsls	r2, r2, #3
 8001c4e:	4907      	ldr	r1, [pc, #28]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	ffff0007 	.word	0xffff0007

08001c74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e19c      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b87      	ldr	r3, [pc, #540]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	4985      	ldr	r1, [pc, #532]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e184      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd4:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4975      	ldr	r1, [pc, #468]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d02:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	496a      	ldr	r1, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	495e      	ldr	r1, [pc, #376]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d5e:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4953      	ldr	r1, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f023 020f 	bic.w	r2, r3, #15
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4947      	ldr	r1, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d055      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4940      	ldr	r1, [pc, #256]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d121      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0f6      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0ea      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0de      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d6      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f023 0207 	bic.w	r2, r3, #7
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4925      	ldr	r1, [pc, #148]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e26:	f7fe ffbb 	bl	8000da0 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7fe ffb7 	bl	8000da0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0be      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d1eb      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d208      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f023 020f 	bic.w	r2, r3, #15
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e086      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
 8001eb4:	52002000 	.word	0x52002000
 8001eb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4939      	ldr	r1, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d208      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	492e      	ldr	r1, [pc, #184]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d208      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d208      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4917      	ldr	r1, [pc, #92]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f74:	f000 f834 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4912      	ldr	r1, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x35c>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_RCC_ClockConfig+0x35c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x360>)
 8001faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x364>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x368>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fea8 	bl	8000d0c <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	0800548c 	.word	0x0800548c
 8001fd4:	24000024 	.word	0x24000024
 8001fd8:	24000020 	.word	0x24000020
 8001fdc:	24000028 	.word	0x24000028

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bb3      	ldr	r3, [pc, #716]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fee:	2b18      	cmp	r3, #24
 8001ff0:	f200 8155 	bhi.w	800229e <HAL_RCC_GetSysClockFreq+0x2be>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002061 	.word	0x08002061
 8002000:	0800229f 	.word	0x0800229f
 8002004:	0800229f 	.word	0x0800229f
 8002008:	0800229f 	.word	0x0800229f
 800200c:	0800229f 	.word	0x0800229f
 8002010:	0800229f 	.word	0x0800229f
 8002014:	0800229f 	.word	0x0800229f
 8002018:	0800229f 	.word	0x0800229f
 800201c:	08002087 	.word	0x08002087
 8002020:	0800229f 	.word	0x0800229f
 8002024:	0800229f 	.word	0x0800229f
 8002028:	0800229f 	.word	0x0800229f
 800202c:	0800229f 	.word	0x0800229f
 8002030:	0800229f 	.word	0x0800229f
 8002034:	0800229f 	.word	0x0800229f
 8002038:	0800229f 	.word	0x0800229f
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800229f 	.word	0x0800229f
 8002044:	0800229f 	.word	0x0800229f
 8002048:	0800229f 	.word	0x0800229f
 800204c:	0800229f 	.word	0x0800229f
 8002050:	0800229f 	.word	0x0800229f
 8002054:	0800229f 	.word	0x0800229f
 8002058:	0800229f 	.word	0x0800229f
 800205c:	08002093 	.word	0x08002093
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002060:	4b94      	ldr	r3, [pc, #592]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800206c:	4b91      	ldr	r3, [pc, #580]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	4a90      	ldr	r2, [pc, #576]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800207e:	e111      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002080:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002082:	61bb      	str	r3, [r7, #24]
      break;
 8002084:	e10e      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002086:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002088:	61bb      	str	r3, [r7, #24]
      break;
 800208a:	e10b      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800208c:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800208e:	61bb      	str	r3, [r7, #24]
      break;
 8002090:	e108      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002092:	4b88      	ldr	r3, [pc, #544]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800209c:	4b85      	ldr	r3, [pc, #532]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020a8:	4b82      	ldr	r3, [pc, #520]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020b2:	4b80      	ldr	r3, [pc, #512]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e1 	beq.w	8002298 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f000 8083 	beq.w	80021e4 <HAL_RCC_GetSysClockFreq+0x204>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	f200 80a1 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x248>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x114>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d056      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020f2:	e099      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d02d      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002100:	4b6c      	ldr	r3, [pc, #432]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	4a6b      	ldr	r2, [pc, #428]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212a:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213a:	ed97 6a02 	vldr	s12, [r7, #8]
 800213e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800215a:	e087      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002166:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216e:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002182:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800219e:	e065      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e2:	e043      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002206:	ed97 6a02 	vldr	s12, [r7, #8]
 800220a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800220e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800221a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002226:	e021      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224a:	ed97 6a02 	vldr	s12, [r7, #8]
 800224e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	0a5b      	lsrs	r3, r3, #9
 8002272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002276:	3301      	adds	r3, #1
 8002278:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002284:	edd7 6a07 	vldr	s13, [r7, #28]
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002296:	e005      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
      break;
 800229c:	e002      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022a0:	61bb      	str	r3, [r7, #24]
      break;
 80022a2:	bf00      	nop
  }

  return sysclockfreq;
 80022a4:	69bb      	ldr	r3, [r7, #24]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	58024400 	.word	0x58024400
 80022b8:	03d09000 	.word	0x03d09000
 80022bc:	003d0900 	.word	0x003d0900
 80022c0:	007a1200 	.word	0x007a1200
 80022c4:	46000000 	.word	0x46000000
 80022c8:	4c742400 	.word	0x4c742400
 80022cc:	4a742400 	.word	0x4a742400
 80022d0:	4af42400 	.word	0x4af42400

080022d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80022da:	f7ff fe81 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_GetHCLKFreq+0x50>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490f      	ldr	r1, [pc, #60]	; (8002328 <HAL_RCC_GetHCLKFreq+0x54>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	fa22 f303 	lsr.w	r3, r2, r3
 80022f6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_RCC_GetHCLKFreq+0x50>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_GetHCLKFreq+0x54>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_RCC_GetHCLKFreq+0x58>)
 8002310:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_RCC_GetHCLKFreq+0x58>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	58024400 	.word	0x58024400
 8002328:	0800548c 	.word	0x0800548c
 800232c:	24000024 	.word	0x24000024
 8002330:	24000020 	.word	0x24000020

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002338:	f7ff ffcc 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4904      	ldr	r1, [pc, #16]	; (800235c <HAL_RCC_GetPCLK1Freq+0x28>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002354:	4618      	mov	r0, r3
 8002356:	bd80      	pop	{r7, pc}
 8002358:	58024400 	.word	0x58024400
 800235c:	0800548c 	.word	0x0800548c

08002360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002364:	f7ff ffb6 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	4904      	ldr	r1, [pc, #16]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	58024400 	.word	0x58024400
 8002388:	0800548c 	.word	0x0800548c

0800238c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800238c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002390:	b0c8      	sub	sp, #288	; 0x120
 8002392:	af00      	add	r7, sp, #0
 8002394:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002398:	2300      	movs	r3, #0
 800239a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80023b0:	2500      	movs	r5, #0
 80023b2:	ea54 0305 	orrs.w	r3, r4, r5
 80023b6:	d049      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023c2:	d02f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023c8:	d828      	bhi.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023ce:	d01a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023d4:	d822      	bhi.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80023da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023de:	d007      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023e0:	e01c      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e2:	4ba7      	ldr	r3, [pc, #668]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	4aa6      	ldr	r2, [pc, #664]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80023e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80023ee:	e01a      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80023f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023f4:	3308      	adds	r3, #8
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 fc43 	bl	8003c84 <RCCEx_PLL2_Config>
 80023fe:	4603      	mov	r3, r0
 8002400:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002404:	e00f      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800240a:	3328      	adds	r3, #40	; 0x28
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f001 fcea 	bl	8003de8 <RCCEx_PLL3_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800241a:	e004      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002422:	e000      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002426:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10a      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800242e:	4b94      	ldr	r3, [pc, #592]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002432:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800243a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243c:	4a90      	ldr	r2, [pc, #576]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243e:	430b      	orrs	r3, r1
 8002440:	6513      	str	r3, [r2, #80]	; 0x50
 8002442:	e003      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002444:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002448:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800244c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002458:	f04f 0900 	mov.w	r9, #0
 800245c:	ea58 0309 	orrs.w	r3, r8, r9
 8002460:	d047      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	2b04      	cmp	r3, #4
 800246a:	d82a      	bhi.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800246c:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800246e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002472:	bf00      	nop
 8002474:	08002489 	.word	0x08002489
 8002478:	08002497 	.word	0x08002497
 800247c:	080024ad 	.word	0x080024ad
 8002480:	080024cb 	.word	0x080024cb
 8002484:	080024cb 	.word	0x080024cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002488:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4a7c      	ldr	r2, [pc, #496]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002494:	e01a      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800249a:	3308      	adds	r3, #8
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fbf0 	bl	8003c84 <RCCEx_PLL2_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024aa:	e00f      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024b0:	3328      	adds	r3, #40	; 0x28
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fc97 	bl	8003de8 <RCCEx_PLL3_Config>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c0:	e004      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80024c8:	e000      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d8:	f023 0107 	bic.w	r1, r3, #7
 80024dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6513      	str	r3, [r2, #80]	; 0x50
 80024e8:	e003      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80024ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80024f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80024fe:	f04f 0b00 	mov.w	fp, #0
 8002502:	ea5a 030b 	orrs.w	r3, sl, fp
 8002506:	d054      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002512:	d036      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002514:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002518:	d82f      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d032      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002524:	d829      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002526:	2bc0      	cmp	r3, #192	; 0xc0
 8002528:	d02f      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800252a:	2bc0      	cmp	r3, #192	; 0xc0
 800252c:	d825      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d018      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002532:	2b80      	cmp	r3, #128	; 0x80
 8002534:	d821      	bhi.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	d007      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800253e:	e01c      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002540:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4a4e      	ldr	r2, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800254c:	e01e      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800254e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002552:	3308      	adds	r3, #8
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fb94 	bl	8003c84 <RCCEx_PLL2_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002562:	e013      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002568:	3328      	adds	r3, #40	; 0x28
 800256a:	2100      	movs	r1, #0
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fc3b 	bl	8003de8 <RCCEx_PLL3_Config>
 8002572:	4603      	mov	r3, r0
 8002574:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002578:	e008      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002580:	e004      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002582:	bf00      	nop
 8002584:	e002      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002586:	bf00      	nop
 8002588:	e000      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800258a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800258c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002594:	4b3a      	ldr	r3, [pc, #232]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800259c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	4a37      	ldr	r2, [pc, #220]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6513      	str	r3, [r2, #80]	; 0x50
 80025a8:	e003      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80025ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80025b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80025be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025cc:	460b      	mov	r3, r1
 80025ce:	4313      	orrs	r3, r2
 80025d0:	d05c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80025d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025dc:	d03b      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80025de:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80025e2:	d834      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e8:	d037      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80025ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ee:	d82e      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025f4:	d033      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80025f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025fa:	d828      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d01a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002606:	d822      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800260c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002610:	d007      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002612:	e01c      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800261e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002620:	e01e      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002626:	3308      	adds	r3, #8
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fb2a 	bl	8003c84 <RCCEx_PLL2_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002636:	e013      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800263c:	3328      	adds	r3, #40	; 0x28
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fbd1 	bl	8003de8 <RCCEx_PLL3_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800264c:	e008      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002654:	e004      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002656:	bf00      	nop
 8002658:	e002      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800265a:	bf00      	nop
 800265c:	e000      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800265e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a02      	ldr	r2, [pc, #8]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002678:	430b      	orrs	r3, r1
 800267a:	6513      	str	r3, [r2, #80]	; 0x50
 800267c:	e006      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800267e:	bf00      	nop
 8002680:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002688:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800268c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026a6:	460b      	mov	r3, r1
 80026a8:	4313      	orrs	r3, r2
 80026aa:	d03a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80026ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	2b30      	cmp	r3, #48	; 0x30
 80026b4:	d01f      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d819      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d00c      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d815      	bhi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x362>
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d019      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d111      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ca:	4bae      	ldr	r3, [pc, #696]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	4aad      	ldr	r2, [pc, #692]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026d6:	e011      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026dc:	3308      	adds	r3, #8
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 facf 	bl	8003c84 <RCCEx_PLL2_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80026ec:	e006      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026f4:	e002      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80026fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002704:	4b9f      	ldr	r3, [pc, #636]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800270c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002712:	4a9c      	ldr	r2, [pc, #624]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002714:	430b      	orrs	r3, r1
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	e003      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800271e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800272e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002738:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800273c:	460b      	mov	r3, r1
 800273e:	4313      	orrs	r3, r2
 8002740:	d051      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800274c:	d035      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800274e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002752:	d82e      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002758:	d031      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x432>
 800275a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800275e:	d828      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d01a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d822      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d007      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002776:	e01c      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002778:	4b82      	ldr	r3, [pc, #520]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4a81      	ldr	r2, [pc, #516]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002784:	e01c      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800278a:	3308      	adds	r3, #8
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fa78 	bl	8003c84 <RCCEx_PLL2_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800279c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a0:	3328      	adds	r3, #40	; 0x28
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fb1f 	bl	8003de8 <RCCEx_PLL3_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027b0:	e006      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80027be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027c8:	4b6e      	ldr	r3, [pc, #440]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d6:	4a6b      	ldr	r2, [pc, #428]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027d8:	430b      	orrs	r3, r1
 80027da:	6513      	str	r3, [r2, #80]	; 0x50
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002800:	460b      	mov	r3, r1
 8002802:	4313      	orrs	r3, r2
 8002804:	d053      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800280a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d033      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002812:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002816:	d82c      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800281c:	d02f      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800281e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002822:	d826      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002824:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002828:	d02b      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800282a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800282e:	d820      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002830:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002834:	d012      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002836:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800283a:	d81a      	bhi.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d022      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d115      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284a:	3308      	adds	r3, #8
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f001 fa18 	bl	8003c84 <RCCEx_PLL2_Config>
 8002854:	4603      	mov	r3, r0
 8002856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800285a:	e015      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800285c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002860:	3328      	adds	r3, #40	; 0x28
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f001 fabf 	bl	8003de8 <RCCEx_PLL3_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002870:	e00a      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002878:	e006      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800287a:	bf00      	nop
 800287c:	e004      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800287e:	bf00      	nop
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002890:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002894:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6513      	str	r3, [r2, #80]	; 0x50
 80028a4:	e003      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028be:	2300      	movs	r3, #0
 80028c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028c4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4313      	orrs	r3, r2
 80028cc:	d060      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028d6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028da:	d039      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80028dc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80028e0:	d832      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e6:	d035      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ec:	d82c      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d031      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d826      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80028fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028fe:	d02d      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002904:	d820      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290a:	d012      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800290c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002910:	d81a      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002912:	2b00      	cmp	r3, #0
 8002914:	d024      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800291a:	d115      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800291c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002920:	3308      	adds	r3, #8
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f9ad 	bl	8003c84 <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002930:	e017      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002936:	3328      	adds	r3, #40	; 0x28
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f001 fa54 	bl	8003de8 <RCCEx_PLL3_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002946:	e00c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800294e:	e008      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002950:	bf00      	nop
 8002952:	e006      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002954:	bf00      	nop
 8002956:	e004      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002958:	bf00      	nop
 800295a:	e002      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800295c:	bf00      	nop
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800297a:	4a02      	ldr	r2, [pc, #8]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800297c:	430b      	orrs	r3, r1
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	e006      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002982:	bf00      	nop
 8002984:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800298c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029aa:	460b      	mov	r3, r1
 80029ac:	4313      	orrs	r3, r2
 80029ae:	d037      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d00e      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80029bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c0:	d816      	bhi.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80029c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ca:	d111      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029cc:	4bc4      	ldr	r3, [pc, #784]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	4ac3      	ldr	r2, [pc, #780]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029d8:	e00f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029de:	3308      	adds	r3, #8
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 f94e 	bl	8003c84 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029ee:	e004      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a02:	4bb7      	ldr	r3, [pc, #732]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a10:	4ab3      	ldr	r2, [pc, #716]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6513      	str	r3, [r2, #80]	; 0x50
 8002a16:	e003      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	d039      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d81c      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002a4a:	a201      	add	r2, pc, #4	; (adr r2, 8002a50 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a61 	.word	0x08002a61
 8002a58:	08002a6f 	.word	0x08002a6f
 8002a5c:	08002a8d 	.word	0x08002a8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a60:	4b9f      	ldr	r3, [pc, #636]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	4a9e      	ldr	r2, [pc, #632]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a6c:	e00f      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a72:	3308      	adds	r3, #8
 8002a74:	2102      	movs	r1, #2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f904 	bl	8003c84 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a82:	e004      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a96:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f023 0103 	bic.w	r1, r3, #3
 8002a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa4:	4a8e      	ldr	r2, [pc, #568]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aaa:	e003      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ab0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002aca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f000 8099 	beq.w	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad6:	4b83      	ldr	r3, [pc, #524]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a82      	ldr	r2, [pc, #520]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae2:	f7fe f95d 	bl	8000da0 <HAL_GetTick>
 8002ae6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aea:	e00b      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe f958 	bl	8000da0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d903      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b02:	e005      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b04:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ed      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002b10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d173      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b18:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b24:	4053      	eors	r3, r2
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d015      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3e:	4a68      	ldr	r2, [pc, #416]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b46:	4b66      	ldr	r3, [pc, #408]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a65      	ldr	r2, [pc, #404]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b52:	4a63      	ldr	r2, [pc, #396]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b66:	d118      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe f91a 	bl	8000da0 <HAL_GetTick>
 8002b6c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b70:	e00d      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe f915 	bl	8000da0 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002b7c:	1ad2      	subs	r2, r2, r3
 8002b7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d903      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002b8c:	e005      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0eb      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002b9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d129      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bc4:	091a      	lsrs	r2, r3, #4
 8002bc6:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	4a45      	ldr	r2, [pc, #276]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6113      	str	r3, [r2, #16]
 8002bd0:	e005      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002bd2:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bdc:	6113      	str	r3, [r2, #16]
 8002bde:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bee:	4a3c      	ldr	r2, [pc, #240]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	e008      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bfa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002bfe:	e003      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f002 0301 	and.w	r3, r2, #1
 8002c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f000 8090 	beq.w	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c32:	2b28      	cmp	r3, #40	; 0x28
 8002c34:	d870      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002c36:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002d21 	.word	0x08002d21
 8002c40:	08002d19 	.word	0x08002d19
 8002c44:	08002d19 	.word	0x08002d19
 8002c48:	08002d19 	.word	0x08002d19
 8002c4c:	08002d19 	.word	0x08002d19
 8002c50:	08002d19 	.word	0x08002d19
 8002c54:	08002d19 	.word	0x08002d19
 8002c58:	08002d19 	.word	0x08002d19
 8002c5c:	08002ced 	.word	0x08002ced
 8002c60:	08002d19 	.word	0x08002d19
 8002c64:	08002d19 	.word	0x08002d19
 8002c68:	08002d19 	.word	0x08002d19
 8002c6c:	08002d19 	.word	0x08002d19
 8002c70:	08002d19 	.word	0x08002d19
 8002c74:	08002d19 	.word	0x08002d19
 8002c78:	08002d19 	.word	0x08002d19
 8002c7c:	08002d03 	.word	0x08002d03
 8002c80:	08002d19 	.word	0x08002d19
 8002c84:	08002d19 	.word	0x08002d19
 8002c88:	08002d19 	.word	0x08002d19
 8002c8c:	08002d19 	.word	0x08002d19
 8002c90:	08002d19 	.word	0x08002d19
 8002c94:	08002d19 	.word	0x08002d19
 8002c98:	08002d19 	.word	0x08002d19
 8002c9c:	08002d21 	.word	0x08002d21
 8002ca0:	08002d19 	.word	0x08002d19
 8002ca4:	08002d19 	.word	0x08002d19
 8002ca8:	08002d19 	.word	0x08002d19
 8002cac:	08002d19 	.word	0x08002d19
 8002cb0:	08002d19 	.word	0x08002d19
 8002cb4:	08002d19 	.word	0x08002d19
 8002cb8:	08002d19 	.word	0x08002d19
 8002cbc:	08002d21 	.word	0x08002d21
 8002cc0:	08002d19 	.word	0x08002d19
 8002cc4:	08002d19 	.word	0x08002d19
 8002cc8:	08002d19 	.word	0x08002d19
 8002ccc:	08002d19 	.word	0x08002d19
 8002cd0:	08002d19 	.word	0x08002d19
 8002cd4:	08002d19 	.word	0x08002d19
 8002cd8:	08002d19 	.word	0x08002d19
 8002cdc:	08002d21 	.word	0x08002d21
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58024800 	.word	0x58024800
 8002ce8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 ffc5 	bl	8003c84 <RCCEx_PLL2_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d00:	e00f      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d06:	3328      	adds	r3, #40	; 0x28
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f86c 	bl	8003de8 <RCCEx_PLL3_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d2a:	4bc0      	ldr	r3, [pc, #768]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	4abc      	ldr	r2, [pc, #752]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6553      	str	r3, [r2, #84]	; 0x54
 8002d40:	e003      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f002 0302 	and.w	r3, r2, #2
 8002d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d60:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d64:	460b      	mov	r3, r1
 8002d66:	4313      	orrs	r3, r2
 8002d68:	d043      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d824      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002dc9 	.word	0x08002dc9
 8002d80:	08002d95 	.word	0x08002d95
 8002d84:	08002dab 	.word	0x08002dab
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002dc9 	.word	0x08002dc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d98:	3308      	adds	r3, #8
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 ff71 	bl	8003c84 <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002da8:	e00f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dae:	3328      	adds	r3, #40	; 0x28
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 f818 	bl	8003de8 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dbe:	e004      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10b      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dd2:	4b96      	ldr	r3, [pc, #600]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f023 0107 	bic.w	r1, r3, #7
 8002dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de2:	4a92      	ldr	r2, [pc, #584]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6553      	str	r3, [r2, #84]	; 0x54
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f002 0304 	and.w	r3, r2, #4
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	d043      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d824      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e71 	.word	0x08002e71
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e53 	.word	0x08002e53
 8002e30:	08002e71 	.word	0x08002e71
 8002e34:	08002e71 	.word	0x08002e71
 8002e38:	08002e71 	.word	0x08002e71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e40:	3308      	adds	r3, #8
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 ff1d 	bl	8003c84 <RCCEx_PLL2_Config>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e50:	e00f      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e56:	3328      	adds	r3, #40	; 0x28
 8002e58:	2101      	movs	r1, #1
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 ffc4 	bl	8003de8 <RCCEx_PLL3_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e66:	e004      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8002e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e7a:	4b6c      	ldr	r3, [pc, #432]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f023 0107 	bic.w	r1, r3, #7
 8002e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e8a:	4a68      	ldr	r2, [pc, #416]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f002 0320 	and.w	r3, r2, #32
 8002ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	d055      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec6:	d033      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d82c      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed2:	d02f      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed8:	d826      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ede:	d02b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002ee0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ee4:	d820      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eea:	d012      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d81a      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d022      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8002ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efa:	d115      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f00:	3308      	adds	r3, #8
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 febd 	bl	8003c84 <RCCEx_PLL2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f10:	e015      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 ff64 	bl	8003de8 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f26:	e00a      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f2e:	e006      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f30:	bf00      	nop
 8002f32:	e004      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f34:	bf00      	nop
 8002f36:	e002      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f38:	bf00      	nop
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8002f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f46:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f56:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6553      	str	r3, [r2, #84]	; 0x54
 8002f5c:	e003      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f62:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f7c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	d058      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f92:	d033      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002f94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f98:	d82c      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d02f      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d826      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002faa:	d02b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb0:	d820      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb6:	d012      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8002fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbc:	d81a      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d022      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fcc:	3308      	adds	r3, #8
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fe57 	bl	8003c84 <RCCEx_PLL2_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fdc:	e015      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe2:	3328      	adds	r3, #40	; 0x28
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fefe 	bl	8003de8 <RCCEx_PLL3_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002ff2:	e00a      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ffa:	e006      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003000:	bf00      	nop
 8003002:	e002      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800301a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800301e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003022:	4a02      	ldr	r2, [pc, #8]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6593      	str	r3, [r2, #88]	; 0x58
 8003028:	e006      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800302a:	bf00      	nop
 800302c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003034:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800304e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003052:	460b      	mov	r3, r1
 8003054:	4313      	orrs	r3, r2
 8003056:	d055      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800305c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003060:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003064:	d033      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003066:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800306a:	d82c      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003070:	d02f      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003076:	d826      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003078:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800307c:	d02b      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800307e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003082:	d820      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003088:	d012      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800308a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308e:	d81a      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003090:	2b00      	cmp	r3, #0
 8003092:	d022      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003098:	d115      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800309e:	3308      	adds	r3, #8
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fdee 	bl	8003c84 <RCCEx_PLL2_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030ae:	e015      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b4:	3328      	adds	r3, #40	; 0x28
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fe95 	bl	8003de8 <RCCEx_PLL3_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030c4:	e00a      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030cc:	e006      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030ce:	bf00      	nop
 80030d0:	e004      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80030da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030e4:	4ba1      	ldr	r3, [pc, #644]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80030ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f4:	4a9d      	ldr	r2, [pc, #628]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f6:	430b      	orrs	r3, r1
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
 80030fa:	e003      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003100:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0308 	and.w	r3, r2, #8
 8003110:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d01e      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d10c      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003136:	3328      	adds	r3, #40	; 0x28
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fe54 	bl	8003de8 <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800314c:	4b87      	ldr	r3, [pc, #540]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315c:	4a83      	ldr	r2, [pc, #524]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800315e:	430b      	orrs	r3, r1
 8003160:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f002 0310 	and.w	r3, r2, #16
 800316e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003172:	2300      	movs	r3, #0
 8003174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003178:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800317c:	460b      	mov	r3, r1
 800317e:	4313      	orrs	r3, r2
 8003180:	d01e      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800318a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318e:	d10c      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003194:	3328      	adds	r3, #40	; 0x28
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fe25 	bl	8003de8 <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031ba:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031da:	460b      	mov	r3, r1
 80031dc:	4313      	orrs	r3, r2
 80031de:	d03e      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ec:	d022      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80031ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f2:	d81b      	bhi.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d00b      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80031fe:	e015      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003204:	3308      	adds	r3, #8
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd3b 	bl	8003c84 <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003214:	e00f      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321a:	3328      	adds	r3, #40	; 0x28
 800321c:	2102      	movs	r1, #2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fde2 	bl	8003de8 <RCCEx_PLL3_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800322a:	e004      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800324e:	4a47      	ldr	r2, [pc, #284]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003250:	430b      	orrs	r3, r1
 8003252:	6593      	str	r3, [r2, #88]	; 0x58
 8003254:	e003      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800325a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003266:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800326a:	67bb      	str	r3, [r7, #120]	; 0x78
 800326c:	2300      	movs	r3, #0
 800326e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003270:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003274:	460b      	mov	r3, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	d03b      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003286:	d01f      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328c:	d818      	bhi.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800328e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003292:	d003      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003298:	d007      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800329a:	e011      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329c:	4b33      	ldr	r3, [pc, #204]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	4a32      	ldr	r2, [pc, #200]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032a8:	e00f      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ae:	3328      	adds	r3, #40	; 0x28
 80032b0:	2101      	movs	r1, #1
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fd98 	bl	8003de8 <RCCEx_PLL3_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80032be:	e004      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80032c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10b      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6553      	str	r3, [r2, #84]	; 0x54
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80032fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003300:	2300      	movs	r3, #0
 8003302:	677b      	str	r3, [r7, #116]	; 0x74
 8003304:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003308:	460b      	mov	r3, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	d034      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d007      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800331e:	e011      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	4a11      	ldr	r2, [pc, #68]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800332c:	e00e      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800332e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003332:	3308      	adds	r3, #8
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fca4 	bl	8003c84 <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003342:	e003      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003362:	4a02      	ldr	r2, [pc, #8]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003364:	430b      	orrs	r3, r1
 8003366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800336a:	bf00      	nop
 800336c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003374:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003384:	66bb      	str	r3, [r7, #104]	; 0x68
 8003386:	2300      	movs	r3, #0
 8003388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800338a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d00c      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003398:	3328      	adds	r3, #40	; 0x28
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fd23 	bl	8003de8 <RCCEx_PLL3_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033ba:	663b      	str	r3, [r7, #96]	; 0x60
 80033bc:	2300      	movs	r3, #0
 80033be:	667b      	str	r3, [r7, #100]	; 0x64
 80033c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033c4:	460b      	mov	r3, r1
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d038      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d6:	d018      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80033d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033dc:	d811      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e2:	d014      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d80b      	bhi.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d011      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80033ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4bc3      	ldr	r3, [pc, #780]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4ac2      	ldr	r2, [pc, #776]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003400:	e008      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003408:	e004      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800341c:	4bb9      	ldr	r3, [pc, #740]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	4ab5      	ldr	r2, [pc, #724]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800342e:	430b      	orrs	r3, r1
 8003430:	6553      	str	r3, [r2, #84]	; 0x54
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003438:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003448:	65bb      	str	r3, [r7, #88]	; 0x58
 800344a:	2300      	movs	r3, #0
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800344e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003452:	460b      	mov	r3, r1
 8003454:	4313      	orrs	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003458:	4baa      	ldr	r3, [pc, #680]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	4aa7      	ldr	r2, [pc, #668]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003468:	430b      	orrs	r3, r1
 800346a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
 800347a:	2300      	movs	r3, #0
 800347c:	657b      	str	r3, [r7, #84]	; 0x54
 800347e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003488:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800348a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a9b      	ldr	r2, [pc, #620]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800349c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034aa:	2300      	movs	r3, #0
 80034ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d009      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80034b8:	4b92      	ldr	r3, [pc, #584]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80034c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c6:	4a8f      	ldr	r2, [pc, #572]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
 80034da:	2300      	movs	r3, #0
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
 80034de:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034e2:	460b      	mov	r3, r1
 80034e4:	4313      	orrs	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034e8:	4b86      	ldr	r3, [pc, #536]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4a85      	ldr	r2, [pc, #532]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034f2:	6113      	str	r3, [r2, #16]
 80034f4:	4b83      	ldr	r3, [pc, #524]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80034f6:	6919      	ldr	r1, [r3, #16]
 80034f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003500:	4a80      	ldr	r2, [pc, #512]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003502:	430b      	orrs	r3, r1
 8003504:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800351c:	460b      	mov	r3, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003522:	4b78      	ldr	r3, [pc, #480]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800352a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	4a74      	ldr	r2, [pc, #464]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003532:	430b      	orrs	r3, r1
 8003534:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
 8003548:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003552:	4b6c      	ldr	r3, [pc, #432]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800355a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	4a68      	ldr	r2, [pc, #416]	; (8003704 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003564:	430b      	orrs	r3, r1
 8003566:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	2100      	movs	r1, #0
 8003572:	62b9      	str	r1, [r7, #40]	; 0x28
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800357e:	460b      	mov	r3, r1
 8003580:	4313      	orrs	r3, r2
 8003582:	d011      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003588:	3308      	adds	r3, #8
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fb79 	bl	8003c84 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003598:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	2100      	movs	r1, #0
 80035b2:	6239      	str	r1, [r7, #32]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035be:	460b      	mov	r3, r1
 80035c0:	4313      	orrs	r3, r2
 80035c2:	d011      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c8:	3308      	adds	r3, #8
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fb59 	bl	8003c84 <RCCEx_PLL2_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80035d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	2100      	movs	r1, #0
 80035f2:	61b9      	str	r1, [r7, #24]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80035fe:	460b      	mov	r3, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	d011      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	3308      	adds	r3, #8
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fb39 	bl	8003c84 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003618:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	2100      	movs	r1, #0
 8003632:	6139      	str	r1, [r7, #16]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d011      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fbcb 	bl	8003de8 <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003658:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003664:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	2100      	movs	r1, #0
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800367e:	460b      	mov	r3, r1
 8003680:	4313      	orrs	r3, r2
 8003682:	d011      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003688:	3328      	adds	r3, #40	; 0x28
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fbab 	bl	8003de8 <RCCEx_PLL3_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	2100      	movs	r1, #0
 80036b2:	6039      	str	r1, [r7, #0]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	607b      	str	r3, [r7, #4]
 80036ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d011      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	3328      	adds	r3, #40	; 0x28
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fb8b 	bl	8003de8 <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80036d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80036e8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400

08003708 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800370c:	f7fe fde2 	bl	80022d4 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	58024400 	.word	0x58024400
 8003730:	0800548c 	.word	0x0800548c

08003734 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800373c:	4ba1      	ldr	r3, [pc, #644]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003746:	4b9f      	ldr	r3, [pc, #636]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	0b1b      	lsrs	r3, r3, #12
 800374c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003750:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003752:	4b9c      	ldr	r3, [pc, #624]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800375e:	4b99      	ldr	r3, [pc, #612]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8111 	beq.w	80039a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b02      	cmp	r3, #2
 8003786:	f000 8083 	beq.w	8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	f200 80a1 	bhi.w	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d056      	beq.n	800384c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800379e:	e099      	b.n	80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a0:	4b88      	ldr	r3, [pc, #544]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02d      	beq.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037ac:	4b85      	ldr	r3, [pc, #532]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	08db      	lsrs	r3, r3, #3
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	4a84      	ldr	r2, [pc, #528]	; (80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003806:	e087      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800382a:	ed97 6a03 	vldr	s12, [r7, #12]
 800382e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800383a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800384a:	e065      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003856:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800385a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385e:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	ee07 3a90 	vmov	s15, r3
 800386a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003872:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800387a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800388e:	e043      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	ee07 3a90 	vmov	s15, r3
 8003896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800389a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800389e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038a2:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038d2:	e021      	b.n	8003918 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	ee07 3a90 	vmov	s15, r3
 80038da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800390a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003916:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	0a5b      	lsrs	r3, r3, #9
 800391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800392e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003932:	edd7 6a07 	vldr	s13, [r7, #28]
 8003936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800393e:	ee17 2a90 	vmov	r2, s15
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800395c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003960:	edd7 6a07 	vldr	s13, [r7, #28]
 8003964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800396c:	ee17 2a90 	vmov	r2, s15
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	0e1b      	lsrs	r3, r3, #24
 800397a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399a:	ee17 2a90 	vmov	r2, s15
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039a2:	e008      	b.n	80039b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
}
 80039b6:	bf00      	nop
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	58024400 	.word	0x58024400
 80039c8:	03d09000 	.word	0x03d09000
 80039cc:	46000000 	.word	0x46000000
 80039d0:	4c742400 	.word	0x4c742400
 80039d4:	4a742400 	.word	0x4a742400
 80039d8:	4af42400 	.word	0x4af42400

080039dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039e4:	4ba1      	ldr	r3, [pc, #644]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039ee:	4b9f      	ldr	r3, [pc, #636]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	0d1b      	lsrs	r3, r3, #20
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039fa:	4b9c      	ldr	r3, [pc, #624]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a06:	4b99      	ldr	r3, [pc, #612]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8111 	beq.w	8003c4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	f000 8083 	beq.w	8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	f200 80a1 	bhi.w	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d056      	beq.n	8003af4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a46:	e099      	b.n	8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a48:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02d      	beq.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a54:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	4a84      	ldr	r2, [pc, #528]	; (8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b7b      	ldr	r3, [pc, #492]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003aae:	e087      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac2:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ad6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af2:	e065      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b06:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0e:	ee07 3a90 	vmov	s15, r3
 8003b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b36:	e043      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4a:	4b48      	ldr	r3, [pc, #288]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7a:	e021      	b.n	8003bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ba2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	0a5b      	lsrs	r3, r3, #9
 8003bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be6:	ee17 2a90 	vmov	r2, s15
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003bee:	4b1f      	ldr	r3, [pc, #124]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	0c1b      	lsrs	r3, r3, #16
 8003bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c14:	ee17 2a90 	vmov	r2, s15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c1c:	4b13      	ldr	r3, [pc, #76]	; (8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	0e1b      	lsrs	r3, r3, #24
 8003c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c42:	ee17 2a90 	vmov	r2, s15
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	03d09000 	.word	0x03d09000
 8003c74:	46000000 	.word	0x46000000
 8003c78:	4c742400 	.word	0x4c742400
 8003c7c:	4a742400 	.word	0x4a742400
 8003c80:	4af42400 	.word	0x4af42400

08003c84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c92:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d101      	bne.n	8003ca2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e099      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ca2:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a4e      	ldr	r2, [pc, #312]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cae:	f7fd f877 	bl	8000da0 <HAL_GetTick>
 8003cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cb4:	e008      	b.n	8003cc8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cb6:	f7fd f873 	bl	8000da0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e086      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc8:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	031b      	lsls	r3, r3, #12
 8003ce2:	493f      	ldr	r1, [pc, #252]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	025b      	lsls	r3, r3, #9
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d18:	4931      	ldr	r1, [pc, #196]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d1e:	4b30      	ldr	r3, [pc, #192]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	492d      	ldr	r1, [pc, #180]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f023 0220 	bic.w	r2, r3, #32
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4928      	ldr	r1, [pc, #160]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d42:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d48:	f023 0310 	bic.w	r3, r3, #16
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <RCCEx_PLL2_Config+0x160>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	69d2      	ldr	r2, [r2, #28]
 8003d5a:	00d2      	lsls	r2, r2, #3
 8003d5c:	4920      	ldr	r1, [pc, #128]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d68:	f043 0310 	orr.w	r3, r3, #16
 8003d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d80:	e00f      	b.n	8003da2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d94:	e005      	b.n	8003da2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dae:	f7fc fff7 	bl	8000da0 <HAL_GetTick>
 8003db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003db6:	f7fc fff3 	bl	8000da0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e006      	b.n	8003dd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	58024400 	.word	0x58024400
 8003de4:	ffff0007 	.word	0xffff0007

08003de8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d101      	bne.n	8003e06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e099      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e06:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e12:	f7fc ffc5 	bl	8000da0 <HAL_GetTick>
 8003e16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e1a:	f7fc ffc1 	bl	8000da0 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e086      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e2c:	4b45      	ldr	r3, [pc, #276]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	051b      	lsls	r3, r3, #20
 8003e46:	493f      	ldr	r1, [pc, #252]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	025b      	lsls	r3, r3, #9
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e7c:	4931      	ldr	r1, [pc, #196]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e82:	4b30      	ldr	r3, [pc, #192]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	492d      	ldr	r1, [pc, #180]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	4928      	ldr	r1, [pc, #160]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ea6:	4b27      	ldr	r3, [pc, #156]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	4a26      	ldr	r2, [pc, #152]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <RCCEx_PLL3_Config+0x160>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	69d2      	ldr	r2, [r2, #28]
 8003ebe:	00d2      	lsls	r2, r2, #3
 8003ec0:	4920      	ldr	r1, [pc, #128]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	4a1e      	ldr	r2, [pc, #120]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ee4:	e00f      	b.n	8003f06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003eec:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003ef2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ef6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ef8:	e005      	b.n	8003f06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f12:	f7fc ff45 	bl	8000da0 <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f18:	e008      	b.n	8003f2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f1a:	f7fc ff41 	bl	8000da0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	ffff0007 	.word	0xffff0007

08003f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e042      	b.n	8003fe4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d106      	bne.n	8003f76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fc fd59 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2224      	movs	r2, #36	; 0x24
 8003f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0201 	bic.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8ba 	bl	8004108 <UART_SetConfig>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e022      	b.n	8003fe4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 ff1a 	bl	8004de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 ffa1 	bl	8004f24 <UART_CheckIdleState>
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	2b20      	cmp	r3, #32
 8004004:	d17b      	bne.n	80040fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_UART_Transmit+0x26>
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e074      	b.n	8004100 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2221      	movs	r2, #33	; 0x21
 8004022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004026:	f7fc febb 	bl	8000da0 <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	88fa      	ldrh	r2, [r7, #6]
 8004030:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	88fa      	ldrh	r2, [r7, #6]
 8004038:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d108      	bne.n	8004058 <HAL_UART_Transmit+0x6c>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e003      	b.n	8004060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004060:	e030      	b.n	80040c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	2180      	movs	r1, #128	; 0x80
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f001 f803 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e03d      	b.n	8004100 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	3302      	adds	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	e007      	b.n	80040b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1c8      	bne.n	8004062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 ffcc 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e006      	b.n	8004100 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b092      	sub	sp, #72	; 0x48
 800410e:	af00      	add	r7, sp, #0
 8004110:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	431a      	orrs	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	4313      	orrs	r3, r2
 800412e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4bbe      	ldr	r3, [pc, #760]	; (8004430 <UART_SetConfig+0x328>)
 8004138:	4013      	ands	r3, r2
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004140:	430b      	orrs	r3, r1
 8004142:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4ab3      	ldr	r2, [pc, #716]	; (8004434 <UART_SetConfig+0x32c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d004      	beq.n	8004174 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004170:	4313      	orrs	r3, r2
 8004172:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	4baf      	ldr	r3, [pc, #700]	; (8004438 <UART_SetConfig+0x330>)
 800417c:	4013      	ands	r3, r2
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004184:	430b      	orrs	r3, r1
 8004186:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f023 010f 	bic.w	r1, r3, #15
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4aa6      	ldr	r2, [pc, #664]	; (800443c <UART_SetConfig+0x334>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d177      	bne.n	8004298 <UART_SetConfig+0x190>
 80041a8:	4ba5      	ldr	r3, [pc, #660]	; (8004440 <UART_SetConfig+0x338>)
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b0:	2b28      	cmp	r3, #40	; 0x28
 80041b2:	d86d      	bhi.n	8004290 <UART_SetConfig+0x188>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <UART_SetConfig+0xb4>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	08004261 	.word	0x08004261
 80041c0:	08004291 	.word	0x08004291
 80041c4:	08004291 	.word	0x08004291
 80041c8:	08004291 	.word	0x08004291
 80041cc:	08004291 	.word	0x08004291
 80041d0:	08004291 	.word	0x08004291
 80041d4:	08004291 	.word	0x08004291
 80041d8:	08004291 	.word	0x08004291
 80041dc:	08004269 	.word	0x08004269
 80041e0:	08004291 	.word	0x08004291
 80041e4:	08004291 	.word	0x08004291
 80041e8:	08004291 	.word	0x08004291
 80041ec:	08004291 	.word	0x08004291
 80041f0:	08004291 	.word	0x08004291
 80041f4:	08004291 	.word	0x08004291
 80041f8:	08004291 	.word	0x08004291
 80041fc:	08004271 	.word	0x08004271
 8004200:	08004291 	.word	0x08004291
 8004204:	08004291 	.word	0x08004291
 8004208:	08004291 	.word	0x08004291
 800420c:	08004291 	.word	0x08004291
 8004210:	08004291 	.word	0x08004291
 8004214:	08004291 	.word	0x08004291
 8004218:	08004291 	.word	0x08004291
 800421c:	08004279 	.word	0x08004279
 8004220:	08004291 	.word	0x08004291
 8004224:	08004291 	.word	0x08004291
 8004228:	08004291 	.word	0x08004291
 800422c:	08004291 	.word	0x08004291
 8004230:	08004291 	.word	0x08004291
 8004234:	08004291 	.word	0x08004291
 8004238:	08004291 	.word	0x08004291
 800423c:	08004281 	.word	0x08004281
 8004240:	08004291 	.word	0x08004291
 8004244:	08004291 	.word	0x08004291
 8004248:	08004291 	.word	0x08004291
 800424c:	08004291 	.word	0x08004291
 8004250:	08004291 	.word	0x08004291
 8004254:	08004291 	.word	0x08004291
 8004258:	08004291 	.word	0x08004291
 800425c:	08004289 	.word	0x08004289
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004266:	e326      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800426e:	e322      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004276:	e31e      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800427e:	e31a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004280:	2320      	movs	r3, #32
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004286:	e316      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004288:	2340      	movs	r3, #64	; 0x40
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e312      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e30e      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a69      	ldr	r2, [pc, #420]	; (8004444 <UART_SetConfig+0x33c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d130      	bne.n	8004304 <UART_SetConfig+0x1fc>
 80042a2:	4b67      	ldr	r3, [pc, #412]	; (8004440 <UART_SetConfig+0x338>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d826      	bhi.n	80042fc <UART_SetConfig+0x1f4>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x1ac>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042d5 	.word	0x080042d5
 80042bc:	080042dd 	.word	0x080042dd
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	2300      	movs	r3, #0
 80042ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042d2:	e2f0      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042d4:	2304      	movs	r3, #4
 80042d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042da:	e2ec      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042dc:	2308      	movs	r3, #8
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e2:	e2e8      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e2e4      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042ec:	2320      	movs	r3, #32
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e2e0      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042f4:	2340      	movs	r3, #64	; 0x40
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e2dc      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e2d8      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4f      	ldr	r2, [pc, #316]	; (8004448 <UART_SetConfig+0x340>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d130      	bne.n	8004370 <UART_SetConfig+0x268>
 800430e:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <UART_SetConfig+0x338>)
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b05      	cmp	r3, #5
 8004318:	d826      	bhi.n	8004368 <UART_SetConfig+0x260>
 800431a:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <UART_SetConfig+0x218>)
 800431c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004320:	08004339 	.word	0x08004339
 8004324:	08004341 	.word	0x08004341
 8004328:	08004349 	.word	0x08004349
 800432c:	08004351 	.word	0x08004351
 8004330:	08004359 	.word	0x08004359
 8004334:	08004361 	.word	0x08004361
 8004338:	2300      	movs	r3, #0
 800433a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800433e:	e2ba      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004346:	e2b6      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434e:	e2b2      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e2ae      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004358:	2320      	movs	r3, #32
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e2aa      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e2a6      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e2a2      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a35      	ldr	r2, [pc, #212]	; (800444c <UART_SetConfig+0x344>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d130      	bne.n	80043dc <UART_SetConfig+0x2d4>
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <UART_SetConfig+0x338>)
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	2b05      	cmp	r3, #5
 8004384:	d826      	bhi.n	80043d4 <UART_SetConfig+0x2cc>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x284>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043a5 	.word	0x080043a5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043b5 	.word	0x080043b5
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043cd 	.word	0x080043cd
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043aa:	e284      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b2:	e280      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ba:	e27c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e278      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043c4:	2320      	movs	r3, #32
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e274      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e270      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e26c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <UART_SetConfig+0x348>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d142      	bne.n	800446c <UART_SetConfig+0x364>
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <UART_SetConfig+0x338>)
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d838      	bhi.n	8004464 <UART_SetConfig+0x35c>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x2f0>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004411 	.word	0x08004411
 80043fc:	08004419 	.word	0x08004419
 8004400:	08004421 	.word	0x08004421
 8004404:	08004429 	.word	0x08004429
 8004408:	08004455 	.word	0x08004455
 800440c:	0800445d 	.word	0x0800445d
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004416:	e24e      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004418:	2304      	movs	r3, #4
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441e:	e24a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004420:	2308      	movs	r3, #8
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e246      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004428:	2310      	movs	r3, #16
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e242      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004430:	cfff69f3 	.word	0xcfff69f3
 8004434:	58000c00 	.word	0x58000c00
 8004438:	11fff4ff 	.word	0x11fff4ff
 800443c:	40011000 	.word	0x40011000
 8004440:	58024400 	.word	0x58024400
 8004444:	40004400 	.word	0x40004400
 8004448:	40004800 	.word	0x40004800
 800444c:	40004c00 	.word	0x40004c00
 8004450:	40005000 	.word	0x40005000
 8004454:	2320      	movs	r3, #32
 8004456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445a:	e22c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800445c:	2340      	movs	r3, #64	; 0x40
 800445e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004462:	e228      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e224      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4ab1      	ldr	r2, [pc, #708]	; (8004738 <UART_SetConfig+0x630>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d176      	bne.n	8004564 <UART_SetConfig+0x45c>
 8004476:	4bb1      	ldr	r3, [pc, #708]	; (800473c <UART_SetConfig+0x634>)
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447e:	2b28      	cmp	r3, #40	; 0x28
 8004480:	d86c      	bhi.n	800455c <UART_SetConfig+0x454>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x380>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	0800452d 	.word	0x0800452d
 800448c:	0800455d 	.word	0x0800455d
 8004490:	0800455d 	.word	0x0800455d
 8004494:	0800455d 	.word	0x0800455d
 8004498:	0800455d 	.word	0x0800455d
 800449c:	0800455d 	.word	0x0800455d
 80044a0:	0800455d 	.word	0x0800455d
 80044a4:	0800455d 	.word	0x0800455d
 80044a8:	08004535 	.word	0x08004535
 80044ac:	0800455d 	.word	0x0800455d
 80044b0:	0800455d 	.word	0x0800455d
 80044b4:	0800455d 	.word	0x0800455d
 80044b8:	0800455d 	.word	0x0800455d
 80044bc:	0800455d 	.word	0x0800455d
 80044c0:	0800455d 	.word	0x0800455d
 80044c4:	0800455d 	.word	0x0800455d
 80044c8:	0800453d 	.word	0x0800453d
 80044cc:	0800455d 	.word	0x0800455d
 80044d0:	0800455d 	.word	0x0800455d
 80044d4:	0800455d 	.word	0x0800455d
 80044d8:	0800455d 	.word	0x0800455d
 80044dc:	0800455d 	.word	0x0800455d
 80044e0:	0800455d 	.word	0x0800455d
 80044e4:	0800455d 	.word	0x0800455d
 80044e8:	08004545 	.word	0x08004545
 80044ec:	0800455d 	.word	0x0800455d
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	0800455d 	.word	0x0800455d
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	0800455d 	.word	0x0800455d
 8004500:	0800455d 	.word	0x0800455d
 8004504:	0800455d 	.word	0x0800455d
 8004508:	0800454d 	.word	0x0800454d
 800450c:	0800455d 	.word	0x0800455d
 8004510:	0800455d 	.word	0x0800455d
 8004514:	0800455d 	.word	0x0800455d
 8004518:	0800455d 	.word	0x0800455d
 800451c:	0800455d 	.word	0x0800455d
 8004520:	0800455d 	.word	0x0800455d
 8004524:	0800455d 	.word	0x0800455d
 8004528:	08004555 	.word	0x08004555
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004532:	e1c0      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800453a:	e1bc      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e1b8      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e1b4      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800454c:	2320      	movs	r3, #32
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e1b0      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004554:	2340      	movs	r3, #64	; 0x40
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e1ac      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004562:	e1a8      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a75      	ldr	r2, [pc, #468]	; (8004740 <UART_SetConfig+0x638>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d130      	bne.n	80045d0 <UART_SetConfig+0x4c8>
 800456e:	4b73      	ldr	r3, [pc, #460]	; (800473c <UART_SetConfig+0x634>)
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	2b05      	cmp	r3, #5
 8004578:	d826      	bhi.n	80045c8 <UART_SetConfig+0x4c0>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <UART_SetConfig+0x478>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004599 	.word	0x08004599
 8004584:	080045a1 	.word	0x080045a1
 8004588:	080045a9 	.word	0x080045a9
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045c1 	.word	0x080045c1
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800459e:	e18a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045a0:	2304      	movs	r3, #4
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045a6:	e186      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045a8:	2308      	movs	r3, #8
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ae:	e182      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045b0:	2310      	movs	r3, #16
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e17e      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045b8:	2320      	movs	r3, #32
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e17a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e176      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e172      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5b      	ldr	r2, [pc, #364]	; (8004744 <UART_SetConfig+0x63c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d130      	bne.n	800463c <UART_SetConfig+0x534>
 80045da:	4b58      	ldr	r3, [pc, #352]	; (800473c <UART_SetConfig+0x634>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d826      	bhi.n	8004634 <UART_SetConfig+0x52c>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0x4e4>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	08004605 	.word	0x08004605
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	08004615 	.word	0x08004615
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460a:	e154      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004612:	e150      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e14c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e148      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004624:	2320      	movs	r3, #32
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e144      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800462c:	2340      	movs	r3, #64	; 0x40
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e140      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463a:	e13c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <UART_SetConfig+0x640>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f040 8082 	bne.w	800474c <UART_SetConfig+0x644>
 8004648:	4b3c      	ldr	r3, [pc, #240]	; (800473c <UART_SetConfig+0x634>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004650:	2b28      	cmp	r3, #40	; 0x28
 8004652:	d86d      	bhi.n	8004730 <UART_SetConfig+0x628>
 8004654:	a201      	add	r2, pc, #4	; (adr r2, 800465c <UART_SetConfig+0x554>)
 8004656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465a:	bf00      	nop
 800465c:	08004701 	.word	0x08004701
 8004660:	08004731 	.word	0x08004731
 8004664:	08004731 	.word	0x08004731
 8004668:	08004731 	.word	0x08004731
 800466c:	08004731 	.word	0x08004731
 8004670:	08004731 	.word	0x08004731
 8004674:	08004731 	.word	0x08004731
 8004678:	08004731 	.word	0x08004731
 800467c:	08004709 	.word	0x08004709
 8004680:	08004731 	.word	0x08004731
 8004684:	08004731 	.word	0x08004731
 8004688:	08004731 	.word	0x08004731
 800468c:	08004731 	.word	0x08004731
 8004690:	08004731 	.word	0x08004731
 8004694:	08004731 	.word	0x08004731
 8004698:	08004731 	.word	0x08004731
 800469c:	08004711 	.word	0x08004711
 80046a0:	08004731 	.word	0x08004731
 80046a4:	08004731 	.word	0x08004731
 80046a8:	08004731 	.word	0x08004731
 80046ac:	08004731 	.word	0x08004731
 80046b0:	08004731 	.word	0x08004731
 80046b4:	08004731 	.word	0x08004731
 80046b8:	08004731 	.word	0x08004731
 80046bc:	08004719 	.word	0x08004719
 80046c0:	08004731 	.word	0x08004731
 80046c4:	08004731 	.word	0x08004731
 80046c8:	08004731 	.word	0x08004731
 80046cc:	08004731 	.word	0x08004731
 80046d0:	08004731 	.word	0x08004731
 80046d4:	08004731 	.word	0x08004731
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004731 	.word	0x08004731
 80046e4:	08004731 	.word	0x08004731
 80046e8:	08004731 	.word	0x08004731
 80046ec:	08004731 	.word	0x08004731
 80046f0:	08004731 	.word	0x08004731
 80046f4:	08004731 	.word	0x08004731
 80046f8:	08004731 	.word	0x08004731
 80046fc:	08004729 	.word	0x08004729
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e0d6      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004708:	2304      	movs	r3, #4
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e0d2      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004710:	2308      	movs	r3, #8
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e0ce      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004718:	2310      	movs	r3, #16
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e0ca      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004720:	2320      	movs	r3, #32
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e0c6      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004728:	2340      	movs	r3, #64	; 0x40
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e0c2      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e0be      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004738:	40011400 	.word	0x40011400
 800473c:	58024400 	.word	0x58024400
 8004740:	40007800 	.word	0x40007800
 8004744:	40007c00 	.word	0x40007c00
 8004748:	40011800 	.word	0x40011800
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4aad      	ldr	r2, [pc, #692]	; (8004a08 <UART_SetConfig+0x900>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d176      	bne.n	8004844 <UART_SetConfig+0x73c>
 8004756:	4bad      	ldr	r3, [pc, #692]	; (8004a0c <UART_SetConfig+0x904>)
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800475e:	2b28      	cmp	r3, #40	; 0x28
 8004760:	d86c      	bhi.n	800483c <UART_SetConfig+0x734>
 8004762:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <UART_SetConfig+0x660>)
 8004764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004768:	0800480d 	.word	0x0800480d
 800476c:	0800483d 	.word	0x0800483d
 8004770:	0800483d 	.word	0x0800483d
 8004774:	0800483d 	.word	0x0800483d
 8004778:	0800483d 	.word	0x0800483d
 800477c:	0800483d 	.word	0x0800483d
 8004780:	0800483d 	.word	0x0800483d
 8004784:	0800483d 	.word	0x0800483d
 8004788:	08004815 	.word	0x08004815
 800478c:	0800483d 	.word	0x0800483d
 8004790:	0800483d 	.word	0x0800483d
 8004794:	0800483d 	.word	0x0800483d
 8004798:	0800483d 	.word	0x0800483d
 800479c:	0800483d 	.word	0x0800483d
 80047a0:	0800483d 	.word	0x0800483d
 80047a4:	0800483d 	.word	0x0800483d
 80047a8:	0800481d 	.word	0x0800481d
 80047ac:	0800483d 	.word	0x0800483d
 80047b0:	0800483d 	.word	0x0800483d
 80047b4:	0800483d 	.word	0x0800483d
 80047b8:	0800483d 	.word	0x0800483d
 80047bc:	0800483d 	.word	0x0800483d
 80047c0:	0800483d 	.word	0x0800483d
 80047c4:	0800483d 	.word	0x0800483d
 80047c8:	08004825 	.word	0x08004825
 80047cc:	0800483d 	.word	0x0800483d
 80047d0:	0800483d 	.word	0x0800483d
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	0800483d 	.word	0x0800483d
 80047dc:	0800483d 	.word	0x0800483d
 80047e0:	0800483d 	.word	0x0800483d
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	0800482d 	.word	0x0800482d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	0800483d 	.word	0x0800483d
 80047f4:	0800483d 	.word	0x0800483d
 80047f8:	0800483d 	.word	0x0800483d
 80047fc:	0800483d 	.word	0x0800483d
 8004800:	0800483d 	.word	0x0800483d
 8004804:	0800483d 	.word	0x0800483d
 8004808:	08004835 	.word	0x08004835
 800480c:	2301      	movs	r3, #1
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004812:	e050      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004814:	2304      	movs	r3, #4
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e04c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800481c:	2308      	movs	r3, #8
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e048      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004824:	2310      	movs	r3, #16
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e044      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800482c:	2320      	movs	r3, #32
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e040      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004834:	2340      	movs	r3, #64	; 0x40
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e03c      	b.n	80048b6 <UART_SetConfig+0x7ae>
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e038      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a71      	ldr	r2, [pc, #452]	; (8004a10 <UART_SetConfig+0x908>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d130      	bne.n	80048b0 <UART_SetConfig+0x7a8>
 800484e:	4b6f      	ldr	r3, [pc, #444]	; (8004a0c <UART_SetConfig+0x904>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b05      	cmp	r3, #5
 8004858:	d826      	bhi.n	80048a8 <UART_SetConfig+0x7a0>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x758>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004879 	.word	0x08004879
 8004864:	08004881 	.word	0x08004881
 8004868:	08004889 	.word	0x08004889
 800486c:	08004891 	.word	0x08004891
 8004870:	08004899 	.word	0x08004899
 8004874:	080048a1 	.word	0x080048a1
 8004878:	2302      	movs	r3, #2
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800487e:	e01a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004886:	e016      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e012      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e00e      	b.n	80048b6 <UART_SetConfig+0x7ae>
 8004898:	2320      	movs	r3, #32
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e00a      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80048a0:	2340      	movs	r3, #64	; 0x40
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048a6:	e006      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ae:	e002      	b.n	80048b6 <UART_SetConfig+0x7ae>
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a55      	ldr	r2, [pc, #340]	; (8004a10 <UART_SetConfig+0x908>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 80f8 	bne.w	8004ab2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	dc46      	bgt.n	8004958 <UART_SetConfig+0x850>
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	db75      	blt.n	80049ba <UART_SetConfig+0x8b2>
 80048ce:	3b02      	subs	r3, #2
 80048d0:	2b1e      	cmp	r3, #30
 80048d2:	d872      	bhi.n	80049ba <UART_SetConfig+0x8b2>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x7d4>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	0800495f 	.word	0x0800495f
 80048e0:	080049bb 	.word	0x080049bb
 80048e4:	08004967 	.word	0x08004967
 80048e8:	080049bb 	.word	0x080049bb
 80048ec:	080049bb 	.word	0x080049bb
 80048f0:	080049bb 	.word	0x080049bb
 80048f4:	08004977 	.word	0x08004977
 80048f8:	080049bb 	.word	0x080049bb
 80048fc:	080049bb 	.word	0x080049bb
 8004900:	080049bb 	.word	0x080049bb
 8004904:	080049bb 	.word	0x080049bb
 8004908:	080049bb 	.word	0x080049bb
 800490c:	080049bb 	.word	0x080049bb
 8004910:	080049bb 	.word	0x080049bb
 8004914:	08004987 	.word	0x08004987
 8004918:	080049bb 	.word	0x080049bb
 800491c:	080049bb 	.word	0x080049bb
 8004920:	080049bb 	.word	0x080049bb
 8004924:	080049bb 	.word	0x080049bb
 8004928:	080049bb 	.word	0x080049bb
 800492c:	080049bb 	.word	0x080049bb
 8004930:	080049bb 	.word	0x080049bb
 8004934:	080049bb 	.word	0x080049bb
 8004938:	080049bb 	.word	0x080049bb
 800493c:	080049bb 	.word	0x080049bb
 8004940:	080049bb 	.word	0x080049bb
 8004944:	080049bb 	.word	0x080049bb
 8004948:	080049bb 	.word	0x080049bb
 800494c:	080049bb 	.word	0x080049bb
 8004950:	080049bb 	.word	0x080049bb
 8004954:	080049ad 	.word	0x080049ad
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d02a      	beq.n	80049b2 <UART_SetConfig+0x8aa>
 800495c:	e02d      	b.n	80049ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800495e:	f7fe fed3 	bl	8003708 <HAL_RCCEx_GetD3PCLK1Freq>
 8004962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004964:	e02f      	b.n	80049c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fee2 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004974:	e027      	b.n	80049c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004976:	f107 0318 	add.w	r3, r7, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff f82e 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004984:	e01f      	b.n	80049c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <UART_SetConfig+0x904>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d009      	beq.n	80049a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004992:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <UART_SetConfig+0x904>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	08db      	lsrs	r3, r3, #3
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <UART_SetConfig+0x90c>)
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049a4:	e00f      	b.n	80049c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <UART_SetConfig+0x90c>)
 80049a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049aa:	e00c      	b.n	80049c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <UART_SetConfig+0x910>)
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049b0:	e009      	b.n	80049c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049b8:	e005      	b.n	80049c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80049c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 81ee 	beq.w	8004daa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <UART_SetConfig+0x914>)
 80049d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d8:	461a      	mov	r2, r3
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d305      	bcc.n	80049fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d910      	bls.n	8004a20 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a04:	e1d1      	b.n	8004daa <UART_SetConfig+0xca2>
 8004a06:	bf00      	nop
 8004a08:	40011c00 	.word	0x40011c00
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	58000c00 	.word	0x58000c00
 8004a14:	03d09000 	.word	0x03d09000
 8004a18:	003d0900 	.word	0x003d0900
 8004a1c:	0800549c 	.word	0x0800549c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a22:	2200      	movs	r2, #0
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	60fa      	str	r2, [r7, #12]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	4ac0      	ldr	r2, [pc, #768]	; (8004d30 <UART_SetConfig+0xc28>)
 8004a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	2200      	movs	r2, #0
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a42:	f7fb fc5b 	bl	80002fc <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	020b      	lsls	r3, r1, #8
 8004a58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a5c:	0202      	lsls	r2, r0, #8
 8004a5e:	6979      	ldr	r1, [r7, #20]
 8004a60:	6849      	ldr	r1, [r1, #4]
 8004a62:	0849      	lsrs	r1, r1, #1
 8004a64:	2000      	movs	r0, #0
 8004a66:	460c      	mov	r4, r1
 8004a68:	4605      	mov	r5, r0
 8004a6a:	eb12 0804 	adds.w	r8, r2, r4
 8004a6e:	eb43 0905 	adc.w	r9, r3, r5
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	469a      	mov	sl, r3
 8004a7a:	4693      	mov	fp, r2
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	465b      	mov	r3, fp
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	f7fb fc3a 	bl	80002fc <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a96:	d308      	bcc.n	8004aaa <UART_SetConfig+0x9a2>
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d204      	bcs.n	8004aaa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	e17f      	b.n	8004daa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ab0:	e17b      	b.n	8004daa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aba:	f040 80bd 	bne.w	8004c38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004abe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	dc48      	bgt.n	8004b58 <UART_SetConfig+0xa50>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	db7b      	blt.n	8004bc2 <UART_SetConfig+0xaba>
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d879      	bhi.n	8004bc2 <UART_SetConfig+0xaba>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x9cc>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b5f 	.word	0x08004b5f
 8004ad8:	08004b67 	.word	0x08004b67
 8004adc:	08004bc3 	.word	0x08004bc3
 8004ae0:	08004bc3 	.word	0x08004bc3
 8004ae4:	08004b6f 	.word	0x08004b6f
 8004ae8:	08004bc3 	.word	0x08004bc3
 8004aec:	08004bc3 	.word	0x08004bc3
 8004af0:	08004bc3 	.word	0x08004bc3
 8004af4:	08004b7f 	.word	0x08004b7f
 8004af8:	08004bc3 	.word	0x08004bc3
 8004afc:	08004bc3 	.word	0x08004bc3
 8004b00:	08004bc3 	.word	0x08004bc3
 8004b04:	08004bc3 	.word	0x08004bc3
 8004b08:	08004bc3 	.word	0x08004bc3
 8004b0c:	08004bc3 	.word	0x08004bc3
 8004b10:	08004bc3 	.word	0x08004bc3
 8004b14:	08004b8f 	.word	0x08004b8f
 8004b18:	08004bc3 	.word	0x08004bc3
 8004b1c:	08004bc3 	.word	0x08004bc3
 8004b20:	08004bc3 	.word	0x08004bc3
 8004b24:	08004bc3 	.word	0x08004bc3
 8004b28:	08004bc3 	.word	0x08004bc3
 8004b2c:	08004bc3 	.word	0x08004bc3
 8004b30:	08004bc3 	.word	0x08004bc3
 8004b34:	08004bc3 	.word	0x08004bc3
 8004b38:	08004bc3 	.word	0x08004bc3
 8004b3c:	08004bc3 	.word	0x08004bc3
 8004b40:	08004bc3 	.word	0x08004bc3
 8004b44:	08004bc3 	.word	0x08004bc3
 8004b48:	08004bc3 	.word	0x08004bc3
 8004b4c:	08004bc3 	.word	0x08004bc3
 8004b50:	08004bc3 	.word	0x08004bc3
 8004b54:	08004bb5 	.word	0x08004bb5
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d02e      	beq.n	8004bba <UART_SetConfig+0xab2>
 8004b5c:	e031      	b.n	8004bc2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5e:	f7fd fbe9 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8004b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b64:	e033      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b66:	f7fd fbfb 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8004b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b6c:	e02f      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fdde 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b7c:	e027      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b7e:	f107 0318 	add.w	r3, r7, #24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe ff2a 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b8c:	e01f      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8e:	4b69      	ldr	r3, [pc, #420]	; (8004d34 <UART_SetConfig+0xc2c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b9a:	4b66      	ldr	r3, [pc, #408]	; (8004d34 <UART_SetConfig+0xc2c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	08db      	lsrs	r3, r3, #3
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	4a64      	ldr	r2, [pc, #400]	; (8004d38 <UART_SetConfig+0xc30>)
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bac:	e00f      	b.n	8004bce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <UART_SetConfig+0xc30>)
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb2:	e00c      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bb4:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <UART_SetConfig+0xc34>)
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb8:	e009      	b.n	8004bce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc0:	e005      	b.n	8004bce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80ea 	beq.w	8004daa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	4a55      	ldr	r2, [pc, #340]	; (8004d30 <UART_SetConfig+0xc28>)
 8004bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be0:	461a      	mov	r2, r3
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be8:	005a      	lsls	r2, r3, #1
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	441a      	add	r2, r3
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d916      	bls.n	8004c30 <UART_SetConfig+0xb28>
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c08:	d212      	bcs.n	8004c30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f023 030f 	bic.w	r3, r3, #15
 8004c12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c22:	4313      	orrs	r3, r2
 8004c24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	e0bc      	b.n	8004daa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c36:	e0b8      	b.n	8004daa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	dc4b      	bgt.n	8004cd8 <UART_SetConfig+0xbd0>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f2c0 8087 	blt.w	8004d54 <UART_SetConfig+0xc4c>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	f200 8084 	bhi.w	8004d54 <UART_SetConfig+0xc4c>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0xb4c>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004cdf 	.word	0x08004cdf
 8004c58:	08004ce7 	.word	0x08004ce7
 8004c5c:	08004d55 	.word	0x08004d55
 8004c60:	08004d55 	.word	0x08004d55
 8004c64:	08004cef 	.word	0x08004cef
 8004c68:	08004d55 	.word	0x08004d55
 8004c6c:	08004d55 	.word	0x08004d55
 8004c70:	08004d55 	.word	0x08004d55
 8004c74:	08004cff 	.word	0x08004cff
 8004c78:	08004d55 	.word	0x08004d55
 8004c7c:	08004d55 	.word	0x08004d55
 8004c80:	08004d55 	.word	0x08004d55
 8004c84:	08004d55 	.word	0x08004d55
 8004c88:	08004d55 	.word	0x08004d55
 8004c8c:	08004d55 	.word	0x08004d55
 8004c90:	08004d55 	.word	0x08004d55
 8004c94:	08004d0f 	.word	0x08004d0f
 8004c98:	08004d55 	.word	0x08004d55
 8004c9c:	08004d55 	.word	0x08004d55
 8004ca0:	08004d55 	.word	0x08004d55
 8004ca4:	08004d55 	.word	0x08004d55
 8004ca8:	08004d55 	.word	0x08004d55
 8004cac:	08004d55 	.word	0x08004d55
 8004cb0:	08004d55 	.word	0x08004d55
 8004cb4:	08004d55 	.word	0x08004d55
 8004cb8:	08004d55 	.word	0x08004d55
 8004cbc:	08004d55 	.word	0x08004d55
 8004cc0:	08004d55 	.word	0x08004d55
 8004cc4:	08004d55 	.word	0x08004d55
 8004cc8:	08004d55 	.word	0x08004d55
 8004ccc:	08004d55 	.word	0x08004d55
 8004cd0:	08004d55 	.word	0x08004d55
 8004cd4:	08004d47 	.word	0x08004d47
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d037      	beq.n	8004d4c <UART_SetConfig+0xc44>
 8004cdc:	e03a      	b.n	8004d54 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cde:	f7fd fb29 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8004ce2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ce4:	e03c      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce6:	f7fd fb3b 	bl	8002360 <HAL_RCC_GetPCLK2Freq>
 8004cea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004cec:	e038      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe fd1e 	bl	8003734 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cfc:	e030      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cfe:	f107 0318 	add.w	r3, r7, #24
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fe6a 	bl	80039dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d0c:	e028      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <UART_SetConfig+0xc2c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d012      	beq.n	8004d40 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <UART_SetConfig+0xc2c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	08db      	lsrs	r3, r3, #3
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <UART_SetConfig+0xc30>)
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d2c:	e018      	b.n	8004d60 <UART_SetConfig+0xc58>
 8004d2e:	bf00      	nop
 8004d30:	0800549c 	.word	0x0800549c
 8004d34:	58024400 	.word	0x58024400
 8004d38:	03d09000 	.word	0x03d09000
 8004d3c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <UART_SetConfig+0xccc>)
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d44:	e00c      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d46:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <UART_SetConfig+0xcd0>)
 8004d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d4a:	e009      	b.n	8004d60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d52:	e005      	b.n	8004d60 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d021      	beq.n	8004daa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <UART_SetConfig+0xcd4>)
 8004d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d70:	461a      	mov	r2, r3
 8004d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d74:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	441a      	add	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d909      	bls.n	8004da4 <UART_SetConfig+0xc9c>
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d205      	bcs.n	8004da4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60da      	str	r2, [r3, #12]
 8004da2:	e002      	b.n	8004daa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004dc6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3748      	adds	r7, #72	; 0x48
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd4:	03d09000 	.word	0x03d09000
 8004dd8:	003d0900 	.word	0x003d0900
 8004ddc:	0800549c 	.word	0x0800549c

08004de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ede:	d10a      	bne.n	8004ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b098      	sub	sp, #96	; 0x60
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f34:	f7fb ff34 	bl	8000da0 <HAL_GetTick>
 8004f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d12f      	bne.n	8004fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	2200      	movs	r2, #0
 8004f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f88e 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d022      	beq.n	8004fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
 8004f82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e6      	bne.n	8004f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e063      	b.n	8005070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d149      	bne.n	800504a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f857 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03c      	beq.n	800504a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff6:	e841 2300 	strex	r3, r2, [r1]
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1e6      	bne.n	8004fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3308      	adds	r3, #8
 8005008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60fb      	str	r3, [r7, #12]
   return(result);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	69b9      	ldr	r1, [r7, #24]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	617b      	str	r3, [r7, #20]
   return(result);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e5      	bne.n	8005002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e012      	b.n	8005070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3758      	adds	r7, #88	; 0x58
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005088:	e049      	b.n	800511e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005090:	d045      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005092:	f7fb fe85 	bl	8000da0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d302      	bcc.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e048      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d031      	beq.n	800511e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d110      	bne.n	80050ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2208      	movs	r2, #8
 80050ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f839 	bl	8005148 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2208      	movs	r2, #8
 80050da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e029      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f8:	d111      	bne.n	800511e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f81f 	bl	8005148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e00f      	b.n	800513e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69da      	ldr	r2, [r3, #28]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4013      	ands	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	429a      	cmp	r2, r3
 800512c:	bf0c      	ite	eq
 800512e:	2301      	moveq	r3, #1
 8005130:	2300      	movne	r3, #0
 8005132:	b2db      	uxtb	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	429a      	cmp	r2, r3
 800513a:	d0a6      	beq.n	800508a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b095      	sub	sp, #84	; 0x54
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	643b      	str	r3, [r7, #64]	; 0x40
 8005170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005176:	e841 2300 	strex	r3, r2, [r1]
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1e6      	bne.n	8005150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	61fb      	str	r3, [r7, #28]
   return(result);
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <UART_EndRxTransfer+0xc8>)
 8005196:	4013      	ands	r3, r2
 8005198:	64bb      	str	r3, [r7, #72]	; 0x48
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d118      	bne.n	80051f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6979      	ldr	r1, [r7, #20]
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	613b      	str	r3, [r7, #16]
   return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005204:	bf00      	nop
 8005206:	3754      	adds	r7, #84	; 0x54
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	effffffe 	.word	0xeffffffe

08005214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_UARTEx_DisableFifoMode+0x16>
 8005226:	2302      	movs	r3, #2
 8005228:	e027      	b.n	800527a <HAL_UARTEx_DisableFifoMode+0x66>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2224      	movs	r2, #36	; 0x24
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b084      	sub	sp, #16
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800529a:	2302      	movs	r3, #2
 800529c:	e02d      	b.n	80052fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2224      	movs	r2, #36	; 0x24
 80052aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f850 	bl	8005380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005316:	2302      	movs	r3, #2
 8005318:	e02d      	b.n	8005376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2224      	movs	r2, #36	; 0x24
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0201 	bic.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f812 	bl	8005380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538c:	2b00      	cmp	r3, #0
 800538e:	d108      	bne.n	80053a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053a0:	e031      	b.n	8005406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053a2:	2310      	movs	r3, #16
 80053a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053a6:	2310      	movs	r3, #16
 80053a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	0e5b      	lsrs	r3, r3, #25
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	0f5b      	lsrs	r3, r3, #29
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	7b3a      	ldrb	r2, [r7, #12]
 80053ce:	4911      	ldr	r1, [pc, #68]	; (8005414 <UARTEx_SetNbDataToProcess+0x94>)
 80053d0:	5c8a      	ldrb	r2, [r1, r2]
 80053d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053d6:	7b3a      	ldrb	r2, [r7, #12]
 80053d8:	490f      	ldr	r1, [pc, #60]	; (8005418 <UARTEx_SetNbDataToProcess+0x98>)
 80053da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	7b7a      	ldrb	r2, [r7, #13]
 80053ec:	4909      	ldr	r1, [pc, #36]	; (8005414 <UARTEx_SetNbDataToProcess+0x94>)
 80053ee:	5c8a      	ldrb	r2, [r1, r2]
 80053f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053f4:	7b7a      	ldrb	r2, [r7, #13]
 80053f6:	4908      	ldr	r1, [pc, #32]	; (8005418 <UARTEx_SetNbDataToProcess+0x98>)
 80053f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	080054b4 	.word	0x080054b4
 8005418:	080054bc 	.word	0x080054bc

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	; (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	; (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	; (8005460 <__libc_init_array+0x44>)
 8005430:	f000 f820 	bl	8005474 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	080054cc 	.word	0x080054cc
 8005458:	080054cc 	.word	0x080054cc
 800545c:	080054cc 	.word	0x080054cc
 8005460:	080054d0 	.word	0x080054d0

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr
