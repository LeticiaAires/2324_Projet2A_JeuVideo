
UART_3_BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007510  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007810  08007810  00017810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08007814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000158  24000010  08007824  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000168  08007824  00020168  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010b9b  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002269  00000000  00000000  00030c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b38  00000000  00000000  00032e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000899  00000000  00000000  000339c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f5af  00000000  00000000  00034259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011633  00000000  00000000  00063808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00132b47  00000000  00000000  00074e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002cfc  00000000  00000000  001a7984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  001aa680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080077a4 	.word	0x080077a4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080077a4 	.word	0x080077a4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b80      	ldr	r3, [pc, #512]	; (8000800 <MX_GPIO_Init+0x218>)
 8000600:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000604:	4a7e      	ldr	r2, [pc, #504]	; (8000800 <MX_GPIO_Init+0x218>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800060e:	4b7c      	ldr	r3, [pc, #496]	; (8000800 <MX_GPIO_Init+0x218>)
 8000610:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	623b      	str	r3, [r7, #32]
 800061a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061c:	4b78      	ldr	r3, [pc, #480]	; (8000800 <MX_GPIO_Init+0x218>)
 800061e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000622:	4a77      	ldr	r2, [pc, #476]	; (8000800 <MX_GPIO_Init+0x218>)
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800062c:	4b74      	ldr	r3, [pc, #464]	; (8000800 <MX_GPIO_Init+0x218>)
 800062e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	4b71      	ldr	r3, [pc, #452]	; (8000800 <MX_GPIO_Init+0x218>)
 800063c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000640:	4a6f      	ldr	r2, [pc, #444]	; (8000800 <MX_GPIO_Init+0x218>)
 8000642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000646:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800064a:	4b6d      	ldr	r3, [pc, #436]	; (8000800 <MX_GPIO_Init+0x218>)
 800064c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b69      	ldr	r3, [pc, #420]	; (8000800 <MX_GPIO_Init+0x218>)
 800065a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800065e:	4a68      	ldr	r2, [pc, #416]	; (8000800 <MX_GPIO_Init+0x218>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <MX_GPIO_Init+0x218>)
 800066a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	4b62      	ldr	r3, [pc, #392]	; (8000800 <MX_GPIO_Init+0x218>)
 8000678:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800067c:	4a60      	ldr	r2, [pc, #384]	; (8000800 <MX_GPIO_Init+0x218>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000686:	4b5e      	ldr	r3, [pc, #376]	; (8000800 <MX_GPIO_Init+0x218>)
 8000688:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <MX_GPIO_Init+0x218>)
 8000696:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <MX_GPIO_Init+0x218>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006a4:	4b56      	ldr	r3, [pc, #344]	; (8000800 <MX_GPIO_Init+0x218>)
 80006a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	4b53      	ldr	r3, [pc, #332]	; (8000800 <MX_GPIO_Init+0x218>)
 80006b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b8:	4a51      	ldr	r2, [pc, #324]	; (8000800 <MX_GPIO_Init+0x218>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c2:	4b4f      	ldr	r3, [pc, #316]	; (8000800 <MX_GPIO_Init+0x218>)
 80006c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d0:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <MX_GPIO_Init+0x218>)
 80006d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d6:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <MX_GPIO_Init+0x218>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e0:	4b47      	ldr	r3, [pc, #284]	; (8000800 <MX_GPIO_Init+0x218>)
 80006e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e6:	f003 0310 	and.w	r3, r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	4843      	ldr	r0, [pc, #268]	; (8000804 <MX_GPIO_Init+0x21c>)
 80006f6:	f001 fcd1 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000700:	4841      	ldr	r0, [pc, #260]	; (8000808 <MX_GPIO_Init+0x220>)
 8000702:	f001 fccb 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	4840      	ldr	r0, [pc, #256]	; (800080c <MX_GPIO_Init+0x224>)
 800070c:	f001 fcc6 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	4619      	mov	r1, r3
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <MX_GPIO_Init+0x228>)
 8000726:	f001 fb09 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000740:	4619      	mov	r1, r3
 8000742:	4830      	ldr	r0, [pc, #192]	; (8000804 <MX_GPIO_Init+0x21c>)
 8000744:	f001 fafa 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000748:	f244 0301 	movw	r3, #16385	; 0x4001
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	4829      	ldr	r0, [pc, #164]	; (8000808 <MX_GPIO_Init+0x220>)
 8000762:	f001 faeb 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <MX_GPIO_Init+0x22c>)
 800077c:	f001 fade 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <MX_GPIO_Init+0x230>)
 8000796:	f001 fad1 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80007ac:	230a      	movs	r3, #10
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_GPIO_Init+0x230>)
 80007b8:	f001 fac0 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80007bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <MX_GPIO_Init+0x230>)
 80007d6:	f001 fab1 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007da:	2302      	movs	r3, #2
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_GPIO_Init+0x224>)
 80007f2:	f001 faa3 	bl	8001d3c <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	58021400 	.word	0x58021400
 8000808:	58020400 	.word	0x58020400
 800080c:	58021000 	.word	0x58021000
 8000810:	58020800 	.word	0x58020800
 8000814:	58021800 	.word	0x58021800
 8000818:	58020000 	.word	0x58020000

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000820:	f000 fb62 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f82e 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f7ff fede 	bl	80005e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800082c:	f000 fa14 	bl	8000c58 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000830:	f000 fb28 	bl	8000e84 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 8000834:	f000 f9c4 	bl	8000bc0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, "Hello World\r\n", 13, 100);
 8000838:	2364      	movs	r3, #100	; 0x64
 800083a:	220d      	movs	r2, #13
 800083c:	490b      	ldr	r1, [pc, #44]	; (800086c <main+0x50>)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <main+0x54>)
 8000840:	f004 faa8 	bl	8004d94 <HAL_UART_Transmit>


  HAL_UART_Receive_IT(&huart3, uart3_Rx_Buffer, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	490b      	ldr	r1, [pc, #44]	; (8000874 <main+0x58>)
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <main+0x54>)
 800084a:	f004 fb31 	bl	8004eb0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, uart4_Rx_Buffer, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	4909      	ldr	r1, [pc, #36]	; (8000878 <main+0x5c>)
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <main+0x60>)
 8000854:	f004 fb2c 	bl	8004eb0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <main+0x64>)
 800085e:	f001 fc36 	bl	80020ce <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f000 fbd1 	bl	800100c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800086a:	e7f5      	b.n	8000858 <main+0x3c>
 800086c:	080077bc 	.word	0x080077bc
 8000870:	240000d0 	.word	0x240000d0
 8000874:	2400002c 	.word	0x2400002c
 8000878:	24000034 	.word	0x24000034
 800087c:	2400003c 	.word	0x2400003c
 8000880:	58020400 	.word	0x58020400

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b09c      	sub	sp, #112	; 0x70
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	224c      	movs	r2, #76	; 0x4c
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f006 ff5a 	bl	800774c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2220      	movs	r2, #32
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 ff54 	bl	800774c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008a4:	4b30      	ldr	r3, [pc, #192]	; (8000968 <SystemClock_Config+0xe4>)
 80008a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f001 fc28 	bl	8002104 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <SystemClock_Config+0xe8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a2b      	ldr	r2, [pc, #172]	; (800096c <SystemClock_Config+0xe8>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <SystemClock_Config+0xe8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d0:	bf00      	nop
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <SystemClock_Config+0xe8>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008de:	d1f8      	bne.n	80008d2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008e0:	2321      	movs	r3, #33	; 0x21
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	2302      	movs	r3, #2
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008fa:	2318      	movs	r3, #24
 80008fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008fe:	2302      	movs	r3, #2
 8000900:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000902:	2304      	movs	r3, #4
 8000904:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800090a:	230c      	movs	r3, #12
 800090c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800090e:	2300      	movs	r3, #0
 8000910:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fc4c 	bl	80021b8 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000926:	f000 f875 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	233f      	movs	r3, #63	; 0x3f
 800092c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2303      	movs	r3, #3
 8000930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f002 f864 	bl	8002a1c <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800095a:	f000 f85b 	bl	8000a14 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3770      	adds	r7, #112	; 0x70
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	58024800 	.word	0x58024800

08000970 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){ // PC USB
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <HAL_UART_RxCpltCallback+0x80>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d11d      	bne.n	80009be <HAL_UART_RxCpltCallback+0x4e>
		uart3_Tx_Buffer[0] = uart3_Rx_Buffer[0]; // Copy for echo
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 8000988:	701a      	strb	r2, [r3, #0]
		uart4_Tx_Buffer[0] = uart3_Rx_Buffer[0];
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_RxCpltCallback+0x8c>)
 8000990:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, uart3_Tx_Buffer, 1, 10);
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	4918      	ldr	r1, [pc, #96]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <HAL_UART_RxCpltCallback+0x90>)
 800099a:	f004 f9fb 	bl	8004d94 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart4, uart4_Tx_Buffer, 1, 10);
 800099e:	230a      	movs	r3, #10
 80009a0:	2201      	movs	r2, #1
 80009a2:	4916      	ldr	r1, [pc, #88]	; (80009fc <HAL_UART_RxCpltCallback+0x8c>)
 80009a4:	4817      	ldr	r0, [pc, #92]	; (8000a04 <HAL_UART_RxCpltCallback+0x94>)
 80009a6:	f004 f9f5 	bl	8004d94 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3, uart3_Rx_Buffer, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	4911      	ldr	r1, [pc, #68]	; (80009f4 <HAL_UART_RxCpltCallback+0x84>)
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <HAL_UART_RxCpltCallback+0x90>)
 80009b0:	f004 fa7e 	bl	8004eb0 <HAL_UART_Receive_IT>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009b4:	2101      	movs	r1, #1
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <HAL_UART_RxCpltCallback+0x98>)
 80009b8:	f001 fb89 	bl	80020ce <HAL_GPIO_TogglePin>
		uart3_Tx_Buffer[0] = uart4_Rx_Buffer[0];
		HAL_UART_Transmit(&huart3, uart3_Tx_Buffer, 1, 10);
		HAL_UART_Receive_IT(&huart4, uart4_Rx_Buffer, 1);
	}

}
 80009bc:	e013      	b.n	80009e6 <HAL_UART_RxCpltCallback+0x76>
	else if(huart->Instance == UART4){ // HC-05
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <HAL_UART_RxCpltCallback+0x9c>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d10e      	bne.n	80009e6 <HAL_UART_RxCpltCallback+0x76>
		uart3_Tx_Buffer[0] = uart4_Rx_Buffer[0];
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_RxCpltCallback+0xa0>)
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 80009ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, uart3_Tx_Buffer, 1, 10);
 80009d0:	230a      	movs	r3, #10
 80009d2:	2201      	movs	r2, #1
 80009d4:	4908      	ldr	r1, [pc, #32]	; (80009f8 <HAL_UART_RxCpltCallback+0x88>)
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <HAL_UART_RxCpltCallback+0x90>)
 80009d8:	f004 f9dc 	bl	8004d94 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart4, uart4_Rx_Buffer, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	490c      	ldr	r1, [pc, #48]	; (8000a10 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_UART_RxCpltCallback+0x94>)
 80009e2:	f004 fa65 	bl	8004eb0 <HAL_UART_Receive_IT>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004800 	.word	0x40004800
 80009f4:	2400002c 	.word	0x2400002c
 80009f8:	24000030 	.word	0x24000030
 80009fc:	24000038 	.word	0x24000038
 8000a00:	240000d0 	.word	0x240000d0
 8000a04:	2400003c 	.word	0x2400003c
 8000a08:	58020400 	.word	0x58020400
 8000a0c:	40004c00 	.word	0x40004c00
 8000a10:	24000034 	.word	0x24000034

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_MspInit+0x30>)
 8000a28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a2c:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x30>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x30>)
 8000a38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58024400 	.word	0x58024400

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 fa94 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART3_IRQHandler+0x10>)
 8000aae:	f004 fa4b 	bl	8004f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	240000d0 	.word	0x240000d0

08000abc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <UART4_IRQHandler+0x10>)
 8000ac2:	f004 fa41 	bl	8004f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400003c 	.word	0x2400003c

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <SystemInit+0xd0>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ada:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <SystemInit+0xd0>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SystemInit+0xd4>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d807      	bhi.n	8000b00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <SystemInit+0xd4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	4a2a      	ldr	r2, [pc, #168]	; (8000ba4 <SystemInit+0xd4>)
 8000afa:	f043 0303 	orr.w	r3, r3, #3
 8000afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <SystemInit+0xd8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <SystemInit+0xd8>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <SystemInit+0xd8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SystemInit+0xd8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4924      	ldr	r1, [pc, #144]	; (8000ba8 <SystemInit+0xd8>)
 8000b18:	4b24      	ldr	r3, [pc, #144]	; (8000bac <SystemInit+0xdc>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <SystemInit+0xd4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <SystemInit+0xd4>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <SystemInit+0xd4>)
 8000b34:	f043 0303 	orr.w	r3, r3, #3
 8000b38:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <SystemInit+0xd8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <SystemInit+0xd8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SystemInit+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <SystemInit+0xd8>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <SystemInit+0xe0>)
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <SystemInit+0xd8>)
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SystemInit+0xe4>)
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <SystemInit+0xd8>)
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <SystemInit+0xe8>)
 8000b5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SystemInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <SystemInit+0xd8>)
 8000b66:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <SystemInit+0xe8>)
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <SystemInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SystemInit+0xd8>)
 8000b72:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <SystemInit+0xe8>)
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <SystemInit+0xd8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <SystemInit+0xd8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <SystemInit+0xd8>)
 8000b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <SystemInit+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <SystemInit+0xec>)
 8000b90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	52002000 	.word	0x52002000
 8000ba8:	58024400 	.word	0x58024400
 8000bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bb0:	02020200 	.word	0x02020200
 8000bb4:	01ff0000 	.word	0x01ff0000
 8000bb8:	01010280 	.word	0x01010280
 8000bbc:	52004000 	.word	0x52004000

08000bc0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	; (8000c54 <MX_UART4_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000bca:	4b21      	ldr	r3, [pc, #132]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bcc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000bd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_UART4_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_UART4_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <MX_UART4_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c02:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_UART4_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_UART4_Init+0x90>)
 8000c0a:	f004 f873 	bl	8004cf4 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c14:	f7ff fefe 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_UART4_Init+0x90>)
 8000c1c:	f006 fccb 	bl	80075b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f7ff fef5 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_UART4_Init+0x90>)
 8000c2e:	f006 fd00 	bl	8007632 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f7ff feec 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_UART4_Init+0x90>)
 8000c3e:	f006 fc81 	bl	8007544 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f7ff fee4 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2400003c 	.word	0x2400003c
 8000c54:	40004c00 	.word	0x40004c00

08000c58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	; (8000cec <MX_USART3_UART_Init+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c62:	4b21      	ldr	r3, [pc, #132]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca0:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f004 f827 	bl	8004cf4 <HAL_UART_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cac:	f7ff feb2 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f006 fc7f 	bl	80075b6 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f7ff fea9 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cc6:	f006 fcb4 	bl	8007632 <HAL_UARTEx_SetRxFifoThreshold>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd0:	f7ff fea0 	bl	8000a14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cd6:	f006 fc35 	bl	8007544 <HAL_UARTEx_DisableFifoMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f7ff fe98 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	240000d0 	.word	0x240000d0
 8000cec:	40004800 	.word	0x40004800

08000cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0bc      	sub	sp, #240	; 0xf0
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	22c0      	movs	r2, #192	; 0xc0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f006 fd1b 	bl	800774c <memset>
  if(uartHandle->Instance==UART4)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a55      	ldr	r2, [pc, #340]	; (8000e70 <HAL_UART_MspInit+0x180>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d14f      	bne.n	8000dc0 <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d20:	f04f 0202 	mov.w	r2, #2
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f9fc 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d42:	f7ff fe67 	bl	8000a14 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d4c:	4a49      	ldr	r2, [pc, #292]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d52:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d56:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d58:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d64:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6a:	4a42      	ldr	r2, [pc, #264]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d74:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000da6:	4619      	mov	r1, r3
 8000da8:	4833      	ldr	r0, [pc, #204]	; (8000e78 <HAL_UART_MspInit+0x188>)
 8000daa:	f000 ffc7 	bl	8001d3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2034      	movs	r0, #52	; 0x34
 8000db4:	f000 fa29 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000db8:	2034      	movs	r0, #52	; 0x34
 8000dba:	f000 fa40 	bl	800123e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dbe:	e053      	b.n	8000e68 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a2d      	ldr	r2, [pc, #180]	; (8000e7c <HAL_UART_MspInit+0x18c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d14e      	bne.n	8000e68 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dca:	f04f 0202 	mov.w	r2, #2
 8000dce:	f04f 0300 	mov.w	r3, #0
 8000dd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ddc:	f107 0318 	add.w	r3, r7, #24
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 f9a7 	bl	8003134 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8000dec:	f7ff fe12 	bl	8000a14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000df2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dfc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000e02:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_UART_MspInit+0x184>)
 8000e20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e46:	2307      	movs	r3, #7
 8000e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e50:	4619      	mov	r1, r3
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <HAL_UART_MspInit+0x190>)
 8000e54:	f000 ff72 	bl	8001d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2027      	movs	r0, #39	; 0x27
 8000e5e:	f000 f9d4 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e62:	2027      	movs	r0, #39	; 0x27
 8000e64:	f000 f9eb 	bl	800123e <HAL_NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	37f0      	adds	r7, #240	; 0xf0
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004c00 	.word	0x40004c00
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020800 	.word	0x58020800
 8000e7c:	40004800 	.word	0x40004800
 8000e80:	58020c00 	.word	0x58020c00

08000e84 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e98:	f7ff fe1a 	bl	8000ad0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9e:	490d      	ldr	r1, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f006 fc4b 	bl	800775c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fca9 	bl	800081c <main>
  bx  lr
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ed0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ed8:	08007814 	.word	0x08007814
  ldr r2, =_sbss
 8000edc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ee0:	24000168 	.word	0x24000168

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 f980 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ef4:	f001 ff48 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_Init+0x68>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	4913      	ldr	r1, [pc, #76]	; (8000f54 <HAL_Init+0x6c>)
 8000f06:	5ccb      	ldrb	r3, [r1, r3]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f10:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_Init+0x68>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_Init+0x6c>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_Init+0x70>)
 8000f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x74>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f814 	bl	8000f60 <HAL_InitTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e002      	b.n	8000f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f42:	f7ff fd6d 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	58024400 	.word	0x58024400
 8000f54:	080077cc 	.word	0x080077cc
 8000f58:	24000004 	.word	0x24000004
 8000f5c:	24000000 	.word	0x24000000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e021      	b.n	8000fb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_InitTick+0x64>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f965 	bl	800125a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa8:	f000 f92f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x68>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400000c 	.word	0x2400000c
 8000fc4:	24000000 	.word	0x24000000
 8000fc8:	24000008 	.word	0x24000008

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2400000c 	.word	0x2400000c
 8000ff0:	24000164 	.word	0x24000164

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	24000164 	.word	0x24000164

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2400000c 	.word	0x2400000c

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <__NVIC_SetPriorityGrouping+0x40>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	4313      	orrs	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x40>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	05fa0000 	.word	0x05fa0000

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff40 	bl	800109c <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff90 	bl	8001148 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5f 	bl	80010f4 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff33 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa4 	bl	80011b0 <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff feba 	bl	8000ff4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e2dc      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e2cd      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a76      	ldr	r2, [pc, #472]	; (8001488 <HAL_DMA_Abort+0x214>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d04a      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a74      	ldr	r2, [pc, #464]	; (800148c <HAL_DMA_Abort+0x218>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d045      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a73      	ldr	r2, [pc, #460]	; (8001490 <HAL_DMA_Abort+0x21c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d040      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a71      	ldr	r2, [pc, #452]	; (8001494 <HAL_DMA_Abort+0x220>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d03b      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a70      	ldr	r2, [pc, #448]	; (8001498 <HAL_DMA_Abort+0x224>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d036      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a6e      	ldr	r2, [pc, #440]	; (800149c <HAL_DMA_Abort+0x228>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d031      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6d      	ldr	r2, [pc, #436]	; (80014a0 <HAL_DMA_Abort+0x22c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d02c      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a6b      	ldr	r2, [pc, #428]	; (80014a4 <HAL_DMA_Abort+0x230>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d027      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <HAL_DMA_Abort+0x234>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d022      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a68      	ldr	r2, [pc, #416]	; (80014ac <HAL_DMA_Abort+0x238>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01d      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a67      	ldr	r2, [pc, #412]	; (80014b0 <HAL_DMA_Abort+0x23c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d018      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_DMA_Abort+0x240>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a64      	ldr	r2, [pc, #400]	; (80014b8 <HAL_DMA_Abort+0x244>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00e      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a62      	ldr	r2, [pc, #392]	; (80014bc <HAL_DMA_Abort+0x248>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d009      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a61      	ldr	r2, [pc, #388]	; (80014c0 <HAL_DMA_Abort+0x24c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d004      	beq.n	800134a <HAL_DMA_Abort+0xd6>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5f      	ldr	r2, [pc, #380]	; (80014c4 <HAL_DMA_Abort+0x250>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_DMA_Abort+0xda>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_DMA_Abort+0xdc>
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 021e 	bic.w	r2, r2, #30
 8001362:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001372:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00a      	b.n	8001392 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 020e 	bic.w	r2, r2, #14
 800138a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a3c      	ldr	r2, [pc, #240]	; (8001488 <HAL_DMA_Abort+0x214>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d072      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3a      	ldr	r2, [pc, #232]	; (800148c <HAL_DMA_Abort+0x218>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d06d      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a39      	ldr	r2, [pc, #228]	; (8001490 <HAL_DMA_Abort+0x21c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d068      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a37      	ldr	r2, [pc, #220]	; (8001494 <HAL_DMA_Abort+0x220>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d063      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <HAL_DMA_Abort+0x224>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d05e      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a34      	ldr	r2, [pc, #208]	; (800149c <HAL_DMA_Abort+0x228>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d059      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a33      	ldr	r2, [pc, #204]	; (80014a0 <HAL_DMA_Abort+0x22c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d054      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_DMA_Abort+0x230>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d04f      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <HAL_DMA_Abort+0x234>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04a      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <HAL_DMA_Abort+0x238>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d045      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <HAL_DMA_Abort+0x23c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d040      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <HAL_DMA_Abort+0x240>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d03b      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_DMA_Abort+0x244>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d036      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <HAL_DMA_Abort+0x248>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_DMA_Abort+0x24c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d02c      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <HAL_DMA_Abort+0x250>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d027      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a24      	ldr	r2, [pc, #144]	; (80014c8 <HAL_DMA_Abort+0x254>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d022      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a22      	ldr	r2, [pc, #136]	; (80014cc <HAL_DMA_Abort+0x258>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01d      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_DMA_Abort+0x25c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d018      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_DMA_Abort+0x260>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_DMA_Abort+0x264>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <HAL_DMA_Abort+0x268>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d009      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1b      	ldr	r2, [pc, #108]	; (80014e0 <HAL_DMA_Abort+0x26c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d004      	beq.n	8001482 <HAL_DMA_Abort+0x20e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_DMA_Abort+0x270>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d132      	bne.n	80014e8 <HAL_DMA_Abort+0x274>
 8001482:	2301      	movs	r3, #1
 8001484:	e031      	b.n	80014ea <HAL_DMA_Abort+0x276>
 8001486:	bf00      	nop
 8001488:	40020010 	.word	0x40020010
 800148c:	40020028 	.word	0x40020028
 8001490:	40020040 	.word	0x40020040
 8001494:	40020058 	.word	0x40020058
 8001498:	40020070 	.word	0x40020070
 800149c:	40020088 	.word	0x40020088
 80014a0:	400200a0 	.word	0x400200a0
 80014a4:	400200b8 	.word	0x400200b8
 80014a8:	40020410 	.word	0x40020410
 80014ac:	40020428 	.word	0x40020428
 80014b0:	40020440 	.word	0x40020440
 80014b4:	40020458 	.word	0x40020458
 80014b8:	40020470 	.word	0x40020470
 80014bc:	40020488 	.word	0x40020488
 80014c0:	400204a0 	.word	0x400204a0
 80014c4:	400204b8 	.word	0x400204b8
 80014c8:	58025408 	.word	0x58025408
 80014cc:	5802541c 	.word	0x5802541c
 80014d0:	58025430 	.word	0x58025430
 80014d4:	58025444 	.word	0x58025444
 80014d8:	58025458 	.word	0x58025458
 80014dc:	5802546c 	.word	0x5802546c
 80014e0:	58025480 	.word	0x58025480
 80014e4:	58025494 	.word	0x58025494
 80014e8:	2300      	movs	r3, #0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6d      	ldr	r2, [pc, #436]	; (80016b8 <HAL_DMA_Abort+0x444>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d04a      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6b      	ldr	r2, [pc, #428]	; (80016bc <HAL_DMA_Abort+0x448>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d045      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <HAL_DMA_Abort+0x44c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d040      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_DMA_Abort+0x450>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d03b      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a67      	ldr	r2, [pc, #412]	; (80016c8 <HAL_DMA_Abort+0x454>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d036      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_DMA_Abort+0x458>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d031      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a64      	ldr	r2, [pc, #400]	; (80016d0 <HAL_DMA_Abort+0x45c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d02c      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_DMA_Abort+0x460>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d027      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a61      	ldr	r2, [pc, #388]	; (80016d8 <HAL_DMA_Abort+0x464>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d022      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_DMA_Abort+0x468>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01d      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a5e      	ldr	r2, [pc, #376]	; (80016e0 <HAL_DMA_Abort+0x46c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d018      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a5c      	ldr	r2, [pc, #368]	; (80016e4 <HAL_DMA_Abort+0x470>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a5b      	ldr	r2, [pc, #364]	; (80016e8 <HAL_DMA_Abort+0x474>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00e      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_DMA_Abort+0x478>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d009      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a58      	ldr	r2, [pc, #352]	; (80016f0 <HAL_DMA_Abort+0x47c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d004      	beq.n	800159e <HAL_DMA_Abort+0x32a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_DMA_Abort+0x480>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d108      	bne.n	80015b0 <HAL_DMA_Abort+0x33c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	e007      	b.n	80015c0 <HAL_DMA_Abort+0x34c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015c0:	e013      	b.n	80015ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015c2:	f7ff fd17 	bl	8000ff4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d90c      	bls.n	80015ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2220      	movs	r2, #32
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e12d      	b.n	8001846 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1e5      	bne.n	80015c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2f      	ldr	r2, [pc, #188]	; (80016b8 <HAL_DMA_Abort+0x444>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d04a      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a2d      	ldr	r2, [pc, #180]	; (80016bc <HAL_DMA_Abort+0x448>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d045      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a2c      	ldr	r2, [pc, #176]	; (80016c0 <HAL_DMA_Abort+0x44c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d040      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <HAL_DMA_Abort+0x450>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d03b      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a29      	ldr	r2, [pc, #164]	; (80016c8 <HAL_DMA_Abort+0x454>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d036      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_DMA_Abort+0x458>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d031      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <HAL_DMA_Abort+0x45c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d02c      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <HAL_DMA_Abort+0x460>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d027      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_DMA_Abort+0x464>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d022      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <HAL_DMA_Abort+0x468>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d01d      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_DMA_Abort+0x46c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d018      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_DMA_Abort+0x470>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_DMA_Abort+0x474>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00e      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <HAL_DMA_Abort+0x478>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d009      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_DMA_Abort+0x47c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d004      	beq.n	8001696 <HAL_DMA_Abort+0x422>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <HAL_DMA_Abort+0x480>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_DMA_Abort+0x426>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_DMA_Abort+0x428>
 800169a:	2300      	movs	r3, #0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d02b      	beq.n	80016f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	223f      	movs	r2, #63	; 0x3f
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	e02a      	b.n	800170e <HAL_DMA_Abort+0x49a>
 80016b8:	40020010 	.word	0x40020010
 80016bc:	40020028 	.word	0x40020028
 80016c0:	40020040 	.word	0x40020040
 80016c4:	40020058 	.word	0x40020058
 80016c8:	40020070 	.word	0x40020070
 80016cc:	40020088 	.word	0x40020088
 80016d0:	400200a0 	.word	0x400200a0
 80016d4:	400200b8 	.word	0x400200b8
 80016d8:	40020410 	.word	0x40020410
 80016dc:	40020428 	.word	0x40020428
 80016e0:	40020440 	.word	0x40020440
 80016e4:	40020458 	.word	0x40020458
 80016e8:	40020470 	.word	0x40020470
 80016ec:	40020488 	.word	0x40020488
 80016f0:	400204a0 	.word	0x400204a0
 80016f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2201      	movs	r2, #1
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a4f      	ldr	r2, [pc, #316]	; (8001850 <HAL_DMA_Abort+0x5dc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d072      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a4d      	ldr	r2, [pc, #308]	; (8001854 <HAL_DMA_Abort+0x5e0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d06d      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_DMA_Abort+0x5e4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d068      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a4a      	ldr	r2, [pc, #296]	; (800185c <HAL_DMA_Abort+0x5e8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d063      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a49      	ldr	r2, [pc, #292]	; (8001860 <HAL_DMA_Abort+0x5ec>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d05e      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_DMA_Abort+0x5f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d059      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_DMA_Abort+0x5f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d054      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a44      	ldr	r2, [pc, #272]	; (800186c <HAL_DMA_Abort+0x5f8>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d04f      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_DMA_Abort+0x5fc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04a      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a41      	ldr	r2, [pc, #260]	; (8001874 <HAL_DMA_Abort+0x600>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d045      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a40      	ldr	r2, [pc, #256]	; (8001878 <HAL_DMA_Abort+0x604>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d040      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a3e      	ldr	r2, [pc, #248]	; (800187c <HAL_DMA_Abort+0x608>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d03b      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <HAL_DMA_Abort+0x60c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_DMA_Abort+0x610>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_DMA_Abort+0x614>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d02c      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a38      	ldr	r2, [pc, #224]	; (800188c <HAL_DMA_Abort+0x618>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d027      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a37      	ldr	r2, [pc, #220]	; (8001890 <HAL_DMA_Abort+0x61c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d022      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a35      	ldr	r2, [pc, #212]	; (8001894 <HAL_DMA_Abort+0x620>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d01d      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a34      	ldr	r2, [pc, #208]	; (8001898 <HAL_DMA_Abort+0x624>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_DMA_Abort+0x628>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <HAL_DMA_Abort+0x62c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d00e      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <HAL_DMA_Abort+0x630>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d009      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <HAL_DMA_Abort+0x634>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d004      	beq.n	80017fe <HAL_DMA_Abort+0x58a>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <HAL_DMA_Abort+0x638>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_DMA_Abort+0x58e>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_DMA_Abort+0x590>
 8001802:	2300      	movs	r3, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001810:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00c      	beq.n	8001834 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001828:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001832:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020010 	.word	0x40020010
 8001854:	40020028 	.word	0x40020028
 8001858:	40020040 	.word	0x40020040
 800185c:	40020058 	.word	0x40020058
 8001860:	40020070 	.word	0x40020070
 8001864:	40020088 	.word	0x40020088
 8001868:	400200a0 	.word	0x400200a0
 800186c:	400200b8 	.word	0x400200b8
 8001870:	40020410 	.word	0x40020410
 8001874:	40020428 	.word	0x40020428
 8001878:	40020440 	.word	0x40020440
 800187c:	40020458 	.word	0x40020458
 8001880:	40020470 	.word	0x40020470
 8001884:	40020488 	.word	0x40020488
 8001888:	400204a0 	.word	0x400204a0
 800188c:	400204b8 	.word	0x400204b8
 8001890:	58025408 	.word	0x58025408
 8001894:	5802541c 	.word	0x5802541c
 8001898:	58025430 	.word	0x58025430
 800189c:	58025444 	.word	0x58025444
 80018a0:	58025458 	.word	0x58025458
 80018a4:	5802546c 	.word	0x5802546c
 80018a8:	58025480 	.word	0x58025480
 80018ac:	58025494 	.word	0x58025494

080018b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e237      	b.n	8001d32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e22c      	b.n	8001d32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a5c      	ldr	r2, [pc, #368]	; (8001a50 <HAL_DMA_Abort_IT+0x1a0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04a      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a5b      	ldr	r2, [pc, #364]	; (8001a54 <HAL_DMA_Abort_IT+0x1a4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d045      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a59      	ldr	r2, [pc, #356]	; (8001a58 <HAL_DMA_Abort_IT+0x1a8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_DMA_Abort_IT+0x1ac>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d03b      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a56      	ldr	r2, [pc, #344]	; (8001a60 <HAL_DMA_Abort_IT+0x1b0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a55      	ldr	r2, [pc, #340]	; (8001a64 <HAL_DMA_Abort_IT+0x1b4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d031      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a53      	ldr	r2, [pc, #332]	; (8001a68 <HAL_DMA_Abort_IT+0x1b8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02c      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <HAL_DMA_Abort_IT+0x1bc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d027      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a50      	ldr	r2, [pc, #320]	; (8001a70 <HAL_DMA_Abort_IT+0x1c0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a4f      	ldr	r2, [pc, #316]	; (8001a74 <HAL_DMA_Abort_IT+0x1c4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_DMA_Abort_IT+0x1c8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_DMA_Abort_IT+0x1cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_DMA_Abort_IT+0x1d0>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_DMA_Abort_IT+0x1d4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_DMA_Abort_IT+0x1d8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Abort_IT+0xc8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_DMA_Abort_IT+0x1dc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_DMA_Abort_IT+0xcc>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_DMA_Abort_IT+0xce>
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8086 	beq.w	8001a90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2204      	movs	r2, #4
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2f      	ldr	r2, [pc, #188]	; (8001a50 <HAL_DMA_Abort_IT+0x1a0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d04a      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <HAL_DMA_Abort_IT+0x1a4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d045      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a2c      	ldr	r2, [pc, #176]	; (8001a58 <HAL_DMA_Abort_IT+0x1a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d040      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a2b      	ldr	r2, [pc, #172]	; (8001a5c <HAL_DMA_Abort_IT+0x1ac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d03b      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <HAL_DMA_Abort_IT+0x1b0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d036      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_DMA_Abort_IT+0x1b4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d031      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_DMA_Abort_IT+0x1b8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d02c      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <HAL_DMA_Abort_IT+0x1bc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d027      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a23      	ldr	r2, [pc, #140]	; (8001a70 <HAL_DMA_Abort_IT+0x1c0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d022      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <HAL_DMA_Abort_IT+0x1c4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d01d      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <HAL_DMA_Abort_IT+0x1c8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d018      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <HAL_DMA_Abort_IT+0x1cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_DMA_Abort_IT+0x1d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00e      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	; (8001a84 <HAL_DMA_Abort_IT+0x1d4>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d009      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_DMA_Abort_IT+0x1d8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d004      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x17c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <HAL_DMA_Abort_IT+0x1dc>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d108      	bne.n	8001a3e <HAL_DMA_Abort_IT+0x18e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e178      	b.n	8001d30 <HAL_DMA_Abort_IT+0x480>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e16f      	b.n	8001d30 <HAL_DMA_Abort_IT+0x480>
 8001a50:	40020010 	.word	0x40020010
 8001a54:	40020028 	.word	0x40020028
 8001a58:	40020040 	.word	0x40020040
 8001a5c:	40020058 	.word	0x40020058
 8001a60:	40020070 	.word	0x40020070
 8001a64:	40020088 	.word	0x40020088
 8001a68:	400200a0 	.word	0x400200a0
 8001a6c:	400200b8 	.word	0x400200b8
 8001a70:	40020410 	.word	0x40020410
 8001a74:	40020428 	.word	0x40020428
 8001a78:	40020440 	.word	0x40020440
 8001a7c:	40020458 	.word	0x40020458
 8001a80:	40020470 	.word	0x40020470
 8001a84:	40020488 	.word	0x40020488
 8001a88:	400204a0 	.word	0x400204a0
 8001a8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 020e 	bic.w	r2, r2, #14
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6c      	ldr	r2, [pc, #432]	; (8001c58 <HAL_DMA_Abort_IT+0x3a8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d04a      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6b      	ldr	r2, [pc, #428]	; (8001c5c <HAL_DMA_Abort_IT+0x3ac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d045      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a69      	ldr	r2, [pc, #420]	; (8001c60 <HAL_DMA_Abort_IT+0x3b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d040      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a68      	ldr	r2, [pc, #416]	; (8001c64 <HAL_DMA_Abort_IT+0x3b4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d03b      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a66      	ldr	r2, [pc, #408]	; (8001c68 <HAL_DMA_Abort_IT+0x3b8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d036      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a65      	ldr	r2, [pc, #404]	; (8001c6c <HAL_DMA_Abort_IT+0x3bc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d031      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_DMA_Abort_IT+0x3c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d02c      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a62      	ldr	r2, [pc, #392]	; (8001c74 <HAL_DMA_Abort_IT+0x3c4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d027      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_DMA_Abort_IT+0x3c8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d022      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5f      	ldr	r2, [pc, #380]	; (8001c7c <HAL_DMA_Abort_IT+0x3cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d01d      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <HAL_DMA_Abort_IT+0x3d0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d018      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_DMA_Abort_IT+0x3d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5a      	ldr	r2, [pc, #360]	; (8001c88 <HAL_DMA_Abort_IT+0x3d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a59      	ldr	r2, [pc, #356]	; (8001c8c <HAL_DMA_Abort_IT+0x3dc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d009      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a57      	ldr	r2, [pc, #348]	; (8001c90 <HAL_DMA_Abort_IT+0x3e0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x290>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a56      	ldr	r2, [pc, #344]	; (8001c94 <HAL_DMA_Abort_IT+0x3e4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d108      	bne.n	8001b52 <HAL_DMA_Abort_IT+0x2a2>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_DMA_Abort_IT+0x2b2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0201 	bic.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <HAL_DMA_Abort_IT+0x3a8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d072      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_DMA_Abort_IT+0x3ac>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d06d      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a39      	ldr	r2, [pc, #228]	; (8001c60 <HAL_DMA_Abort_IT+0x3b0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d068      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a37      	ldr	r2, [pc, #220]	; (8001c64 <HAL_DMA_Abort_IT+0x3b4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d063      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_DMA_Abort_IT+0x3b8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d05e      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_DMA_Abort_IT+0x3bc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d059      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <HAL_DMA_Abort_IT+0x3c0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d054      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <HAL_DMA_Abort_IT+0x3c4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d04f      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_DMA_Abort_IT+0x3c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d04a      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <HAL_DMA_Abort_IT+0x3cc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d045      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <HAL_DMA_Abort_IT+0x3d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d040      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <HAL_DMA_Abort_IT+0x3d4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d03b      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2a      	ldr	r2, [pc, #168]	; (8001c88 <HAL_DMA_Abort_IT+0x3d8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d036      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_DMA_Abort_IT+0x3dc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d031      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a27      	ldr	r2, [pc, #156]	; (8001c90 <HAL_DMA_Abort_IT+0x3e0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d02c      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_DMA_Abort_IT+0x3e4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d027      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <HAL_DMA_Abort_IT+0x3e8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <HAL_DMA_Abort_IT+0x3ec>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01d      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <HAL_DMA_Abort_IT+0x3f0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d018      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_DMA_Abort_IT+0x3f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_DMA_Abort_IT+0x3f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_DMA_Abort_IT+0x3fc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_DMA_Abort_IT+0x400>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d004      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x3a2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_DMA_Abort_IT+0x404>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d132      	bne.n	8001cb8 <HAL_DMA_Abort_IT+0x408>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e031      	b.n	8001cba <HAL_DMA_Abort_IT+0x40a>
 8001c56:	bf00      	nop
 8001c58:	40020010 	.word	0x40020010
 8001c5c:	40020028 	.word	0x40020028
 8001c60:	40020040 	.word	0x40020040
 8001c64:	40020058 	.word	0x40020058
 8001c68:	40020070 	.word	0x40020070
 8001c6c:	40020088 	.word	0x40020088
 8001c70:	400200a0 	.word	0x400200a0
 8001c74:	400200b8 	.word	0x400200b8
 8001c78:	40020410 	.word	0x40020410
 8001c7c:	40020428 	.word	0x40020428
 8001c80:	40020440 	.word	0x40020440
 8001c84:	40020458 	.word	0x40020458
 8001c88:	40020470 	.word	0x40020470
 8001c8c:	40020488 	.word	0x40020488
 8001c90:	400204a0 	.word	0x400204a0
 8001c94:	400204b8 	.word	0x400204b8
 8001c98:	58025408 	.word	0x58025408
 8001c9c:	5802541c 	.word	0x5802541c
 8001ca0:	58025430 	.word	0x58025430
 8001ca4:	58025444 	.word	0x58025444
 8001ca8:	58025458 	.word	0x58025458
 8001cac:	5802546c 	.word	0x5802546c
 8001cb0:	58025480 	.word	0x58025480
 8001cb4:	58025494 	.word	0x58025494
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d028      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2201      	movs	r2, #1
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001cec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_GPIO_Init+0x234>)
 8001d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d4e:	e194      	b.n	800207a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2101      	movs	r1, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8186 	beq.w	8002074 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d005      	beq.n	8001d80 <HAL_GPIO_Init+0x44>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d130      	bne.n	8001de2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db6:	2201      	movs	r2, #1
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 0201 	and.w	r2, r3, #1
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d017      	beq.n	8001e1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d123      	bne.n	8001e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	691a      	ldr	r2, [r3, #16]
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	69b9      	ldr	r1, [r7, #24]
 8001e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0203 	and.w	r2, r3, #3
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80e0 	beq.w	8002074 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <HAL_GPIO_Init+0x238>)
 8001eb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eba:	4a2e      	ldr	r2, [pc, #184]	; (8001f74 <HAL_GPIO_Init+0x238>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_GPIO_Init+0x238>)
 8001ec6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <HAL_GPIO_Init+0x23c>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <HAL_GPIO_Init+0x240>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d052      	beq.n	8001fa4 <HAL_GPIO_Init+0x268>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_GPIO_Init+0x244>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d031      	beq.n	8001f6a <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_GPIO_Init+0x248>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02b      	beq.n	8001f66 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_GPIO_Init+0x24c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d025      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <HAL_GPIO_Init+0x250>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01f      	beq.n	8001f5e <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_GPIO_Init+0x254>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d019      	beq.n	8001f5a <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_GPIO_Init+0x258>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x21a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_GPIO_Init+0x25c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00d      	beq.n	8001f52 <HAL_GPIO_Init+0x216>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_GPIO_Init+0x260>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <HAL_GPIO_Init+0x212>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_GPIO_Init+0x264>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_GPIO_Init+0x20e>
 8001f46:	2309      	movs	r3, #9
 8001f48:	e02d      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	e02b      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f4e:	2308      	movs	r3, #8
 8001f50:	e029      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f52:	2307      	movs	r3, #7
 8001f54:	e027      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e025      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	e023      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f5e:	2304      	movs	r3, #4
 8001f60:	e021      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f62:	2303      	movs	r3, #3
 8001f64:	e01f      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e01d      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e01b      	b.n	8001fa6 <HAL_GPIO_Init+0x26a>
 8001f6e:	bf00      	nop
 8001f70:	58000080 	.word	0x58000080
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58000400 	.word	0x58000400
 8001f7c:	58020000 	.word	0x58020000
 8001f80:	58020400 	.word	0x58020400
 8001f84:	58020800 	.word	0x58020800
 8001f88:	58020c00 	.word	0x58020c00
 8001f8c:	58021000 	.word	0x58021000
 8001f90:	58021400 	.word	0x58021400
 8001f94:	58021800 	.word	0x58021800
 8001f98:	58021c00 	.word	0x58021c00
 8001f9c:	58022000 	.word	0x58022000
 8001fa0:	58022400 	.word	0x58022400
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb6:	4938      	ldr	r1, [pc, #224]	; (8002098 <HAL_GPIO_Init+0x35c>)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	3301      	adds	r3, #1
 8002078:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	f47f ae63 	bne.w	8001d50 <HAL_GPIO_Init+0x14>
  }
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3724      	adds	r7, #36	; 0x24
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	58000400 	.word	0x58000400

0800209c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020b8:	e003      	b.n	80020c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	041a      	lsls	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	619a      	str	r2, [r3, #24]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	619a      	str	r2, [r3, #24]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	2b06      	cmp	r3, #6
 8002116:	d00a      	beq.n	800212e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002118:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e040      	b.n	80021ac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e03e      	b.n	80021ac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002136:	491f      	ldr	r1, [pc, #124]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800213e:	f7fe ff59 	bl	8000ff4 <HAL_GetTick>
 8002142:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002144:	e009      	b.n	800215a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002146:	f7fe ff55 	bl	8000ff4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002154:	d901      	bls.n	800215a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e028      	b.n	80021ac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	d1ee      	bne.n	8002146 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b1e      	cmp	r3, #30
 800216c:	d008      	beq.n	8002180 <HAL_PWREx_ConfigSupply+0x7c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b2e      	cmp	r3, #46	; 0x2e
 8002172:	d005      	beq.n	8002180 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b1d      	cmp	r3, #29
 8002178:	d002      	beq.n	8002180 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b2d      	cmp	r3, #45	; 0x2d
 800217e:	d114      	bne.n	80021aa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002180:	f7fe ff38 	bl	8000ff4 <HAL_GetTick>
 8002184:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002186:	e009      	b.n	800219c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002188:	f7fe ff34 	bl	8000ff4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002196:	d901      	bls.n	800219c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_PWREx_ConfigSupply+0xb0>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d1ee      	bne.n	8002188 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	58024800 	.word	0x58024800

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f000 bc1f 	b.w	8002a0a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b3 	beq.w	8002340 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b95      	ldr	r3, [pc, #596]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021e4:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d007      	beq.n	8002200 <HAL_RCC_OscConfig+0x48>
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	2b18      	cmp	r3, #24
 80021f4:	d112      	bne.n	800221c <HAL_RCC_OscConfig+0x64>
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d10d      	bne.n	800221c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8098 	beq.w	800233e <HAL_RCC_OscConfig+0x186>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 8093 	bne.w	800233e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e3f6      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x7c>
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a81      	ldr	r2, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e058      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d112      	bne.n	8002262 <HAL_RCC_OscConfig+0xaa>
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7b      	ldr	r2, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b79      	ldr	r3, [pc, #484]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a78      	ldr	r2, [pc, #480]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800224e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800225a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e041      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226a:	d112      	bne.n	8002292 <HAL_RCC_OscConfig+0xda>
 800226c:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002272:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800227e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a69      	ldr	r2, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e029      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800229a:	d112      	bne.n	80022c2 <HAL_RCC_OscConfig+0x10a>
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a63      	ldr	r2, [pc, #396]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a60      	ldr	r2, [pc, #384]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b5e      	ldr	r3, [pc, #376]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a5d      	ldr	r2, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e011      	b.n	80022e6 <HAL_RCC_OscConfig+0x12e>
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a5a      	ldr	r2, [pc, #360]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b58      	ldr	r3, [pc, #352]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a57      	ldr	r2, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b55      	ldr	r3, [pc, #340]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a54      	ldr	r2, [pc, #336]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80022e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fe81 	bl	8000ff4 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f6:	f7fe fe7d 	bl	8000ff4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	; 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e380      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fe6d 	bl	8000ff4 <HAL_GetTick>
 800231a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231e:	f7fe fe69 	bl	8000ff4 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	; 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e36c      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002330:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x166>
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 808c 	beq.w	8002466 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002356:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x1bc>
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	2b18      	cmp	r3, #24
 8002368:	d137      	bne.n	80023da <HAL_RCC_OscConfig+0x222>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d132      	bne.n	80023da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x1d4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e33e      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 0219 	bic.w	r2, r3, #25
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe fe29 	bl	8000ff4 <HAL_GetTick>
 80023a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a6:	f7fe fe25 	bl	8000ff4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e328      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b8:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	4917      	ldr	r1, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d8:	e045      	b.n	8002466 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d028      	beq.n	8002434 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0219 	bic.w	r2, r3, #25
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4910      	ldr	r1, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fdfe 	bl	8000ff4 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fdfa 	bl	8000ff4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e2fd      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	061b      	lsls	r3, r3, #24
 8002428:	4901      	ldr	r1, [pc, #4]	; (8002430 <HAL_RCC_OscConfig+0x278>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
 800242e:	e01a      	b.n	8002466 <HAL_RCC_OscConfig+0x2ae>
 8002430:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002434:	4b97      	ldr	r3, [pc, #604]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a96      	ldr	r2, [pc, #600]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fdd8 	bl	8000ff4 <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fdd4 	bl	8000ff4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e2d7      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800245a:	4b8e      	ldr	r3, [pc, #568]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d06a      	beq.n	8002548 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800247a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d007      	beq.n	8002498 <HAL_RCC_OscConfig+0x2e0>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	2b18      	cmp	r3, #24
 800248c:	d11b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x30e>
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d116      	bne.n	80024c6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002498:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_OscConfig+0x2f8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b80      	cmp	r3, #128	; 0x80
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e2ac      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b0:	4b78      	ldr	r3, [pc, #480]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	4975      	ldr	r1, [pc, #468]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024c4:	e040      	b.n	8002548 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d023      	beq.n	8002516 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024ce:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a70      	ldr	r2, [pc, #448]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fd8b 	bl	8000ff4 <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024e2:	f7fe fd87 	bl	8000ff4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e28a      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024f4:	4b67      	ldr	r3, [pc, #412]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002500:	4b64      	ldr	r3, [pc, #400]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	4961      	ldr	r1, [pc, #388]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
 8002514:	e018      	b.n	8002548 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5e      	ldr	r2, [pc, #376]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fd67 	bl	8000ff4 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800252a:	f7fe fd63 	bl	8000ff4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e266      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800253c:	4b55      	ldr	r3, [pc, #340]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d036      	beq.n	80025c2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d019      	beq.n	8002590 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255c:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800255e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002560:	4a4c      	ldr	r2, [pc, #304]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fd44 	bl	8000ff4 <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7fe fd40 	bl	8000ff4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e243      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002582:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x3b8>
 800258e:	e018      	b.n	80025c2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	4a3f      	ldr	r2, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fd2a 	bl	8000ff4 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe fd26 	bl	8000ff4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e229      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2e      	ldr	r2, [pc, #184]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80025dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025e2:	f7fe fd07 	bl	8000ff4 <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ea:	f7fe fd03 	bl	8000ff4 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e206      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0f0      	beq.n	80025ea <HAL_RCC_OscConfig+0x432>
 8002608:	e018      	b.n	800263c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002614:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002616:	f7fe fced 	bl	8000ff4 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800261e:	f7fe fce9 	bl	8000ff4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1ec      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80af 	beq.w	80027a8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x4e0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_RCC_OscConfig+0x4e0>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002656:	f7fe fccd 	bl	8000ff4 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe fcc9 	bl	8000ff4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	; 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1cc      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_OscConfig+0x4e0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x4e4>
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a02      	ldr	r2, [pc, #8]	; (8002694 <HAL_RCC_OscConfig+0x4dc>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	e05b      	b.n	800274a <HAL_RCC_OscConfig+0x592>
 8002692:	bf00      	nop
 8002694:	58024400 	.word	0x58024400
 8002698:	58024800 	.word	0x58024800
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d112      	bne.n	80026ca <HAL_RCC_OscConfig+0x512>
 80026a4:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a9c      	ldr	r2, [pc, #624]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	4b9a      	ldr	r3, [pc, #616]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a99      	ldr	r2, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	4b97      	ldr	r3, [pc, #604]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a96      	ldr	r2, [pc, #600]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
 80026c8:	e03f      	b.n	800274a <HAL_RCC_OscConfig+0x592>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d112      	bne.n	80026f8 <HAL_RCC_OscConfig+0x540>
 80026d2:	4b92      	ldr	r3, [pc, #584]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a91      	ldr	r2, [pc, #580]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	4b8f      	ldr	r3, [pc, #572]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a8e      	ldr	r2, [pc, #568]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ea:	4b8c      	ldr	r3, [pc, #560]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a8b      	ldr	r2, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
 80026f6:	e028      	b.n	800274a <HAL_RCC_OscConfig+0x592>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b85      	cmp	r3, #133	; 0x85
 80026fe:	d112      	bne.n	8002726 <HAL_RCC_OscConfig+0x56e>
 8002700:	4b86      	ldr	r3, [pc, #536]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a85      	ldr	r2, [pc, #532]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b83      	ldr	r3, [pc, #524]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a82      	ldr	r2, [pc, #520]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	4b80      	ldr	r3, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a7f      	ldr	r2, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e011      	b.n	800274a <HAL_RCC_OscConfig+0x592>
 8002726:	4b7d      	ldr	r3, [pc, #500]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a7c      	ldr	r2, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	4b7a      	ldr	r3, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a79      	ldr	r2, [pc, #484]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b77      	ldr	r3, [pc, #476]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a76      	ldr	r2, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d015      	beq.n	800277e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7fe fc4f 	bl	8000ff4 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe fc4b 	bl	8000ff4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	; 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e14c      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002770:	4b6a      	ldr	r3, [pc, #424]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ee      	beq.n	800275a <HAL_RCC_OscConfig+0x5a2>
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fc39 	bl	8000ff4 <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fc35 	bl	8000ff4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e136      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800279c:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 812b 	beq.w	8002a08 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027b2:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027ba:	2b18      	cmp	r3, #24
 80027bc:	f000 80bb 	beq.w	8002936 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 8095 	bne.w	80028f4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b54      	ldr	r3, [pc, #336]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a53      	ldr	r2, [pc, #332]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80027d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fc0d 	bl	8000ff4 <HAL_GetTick>
 80027da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe fc09 	bl	8000ff4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e10c      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fc:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80027fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_OscConfig+0x768>)
 8002802:	4013      	ands	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	430a      	orrs	r2, r1
 8002810:	4942      	ldr	r1, [pc, #264]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002812:	4313      	orrs	r3, r2
 8002814:	628b      	str	r3, [r1, #40]	; 0x28
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	3b01      	subs	r3, #1
 800281c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002824:	3b01      	subs	r3, #1
 8002826:	025b      	lsls	r3, r3, #9
 8002828:	b29b      	uxth	r3, r3
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	3b01      	subs	r3, #1
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002846:	4935      	ldr	r1, [pc, #212]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002848:	4313      	orrs	r3, r2
 800284a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800284c:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4a32      	ldr	r2, [pc, #200]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_OscConfig+0x76c>)
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002864:	00d2      	lsls	r2, r2, #3
 8002866:	492d      	ldr	r1, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002868:	4313      	orrs	r3, r2
 800286a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	f023 020c 	bic.w	r2, r3, #12
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	4928      	ldr	r1, [pc, #160]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800287a:	4313      	orrs	r3, r2
 800287c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800287e:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f023 0202 	bic.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4924      	ldr	r1, [pc, #144]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800288c:	4313      	orrs	r3, r2
 800288e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002890:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <HAL_RCC_OscConfig+0x764>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <HAL_RCC_OscConfig+0x764>)
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028a8:	4b1c      	ldr	r3, [pc, #112]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028b4:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fb92 	bl	8000ff4 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe fb8e 	bl	8000ff4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e091      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x71c>
 80028f2:	e089      	b.n	8002a08 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_RCC_OscConfig+0x764>)
 80028fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fb78 	bl	8000ff4 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002906:	e00f      	b.n	8002928 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fb74 	bl	8000ff4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d908      	bls.n	8002928 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e077      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
 800291a:	bf00      	nop
 800291c:	58024400 	.word	0x58024400
 8002920:	fffffc0c 	.word	0xfffffc0c
 8002924:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002928:	4b3a      	ldr	r3, [pc, #232]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e9      	bne.n	8002908 <HAL_RCC_OscConfig+0x750>
 8002934:	e068      	b.n	8002a08 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800293c:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b01      	cmp	r3, #1
 8002948:	d031      	beq.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f003 0203 	and.w	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d12a      	bne.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d122      	bne.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d11a      	bne.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d111      	bne.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d108      	bne.n	80029ae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0e1b      	lsrs	r3, r3, #24
 80029a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e02b      	b.n	8002a0a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029bc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d01f      	beq.n	8002a08 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a11      	ldr	r2, [pc, #68]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029d4:	f7fe fb0e 	bl	8000ff4 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029da:	bf00      	nop
 80029dc:	f7fe fb0a 	bl	8000ff4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d0f9      	beq.n	80029dc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_RCC_OscConfig+0x860>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029f4:	00d2      	lsls	r2, r2, #3
 80029f6:	4907      	ldr	r1, [pc, #28]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_RCC_OscConfig+0x85c>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3730      	adds	r7, #48	; 0x30
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	58024400 	.word	0x58024400
 8002a18:	ffff0007 	.word	0xffff0007

08002a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e19c      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b87      	ldr	r3, [pc, #540]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 020f 	bic.w	r2, r3, #15
 8002a46:	4985      	ldr	r1, [pc, #532]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b83      	ldr	r3, [pc, #524]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e184      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d010      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d908      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a7c:	4b78      	ldr	r3, [pc, #480]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	4975      	ldr	r1, [pc, #468]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d010      	beq.n	8002abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d908      	bls.n	8002abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	496a      	ldr	r1, [pc, #424]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699a      	ldr	r2, [r3, #24]
 8002acc:	4b64      	ldr	r3, [pc, #400]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d908      	bls.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	495e      	ldr	r1, [pc, #376]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d010      	beq.n	8002b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69da      	ldr	r2, [r3, #28]
 8002afa:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d908      	bls.n	8002b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b06:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4953      	ldr	r1, [pc, #332]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d908      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f023 020f 	bic.w	r2, r3, #15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4947      	ldr	r1, [pc, #284]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d055      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4940      	ldr	r1, [pc, #256]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d121      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0f6      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d115      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0ea      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b9c:	4b30      	ldr	r3, [pc, #192]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0de      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0d6      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f023 0207 	bic.w	r2, r3, #7
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4925      	ldr	r1, [pc, #148]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bce:	f7fe fa11 	bl	8000ff4 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd6:	f7fe fa0d 	bl	8000ff4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0be      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d1eb      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d010      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d208      	bcs.n	8002c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f023 020f 	bic.w	r2, r3, #15
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <HAL_RCC_ClockConfig+0x244>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d214      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	4906      	ldr	r1, [pc, #24]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_RCC_ClockConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e086      	b.n	8002d6a <HAL_RCC_ClockConfig+0x34e>
 8002c5c:	52002000 	.word	0x52002000
 8002c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d208      	bcs.n	8002c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c80:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	4939      	ldr	r1, [pc, #228]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d208      	bcs.n	8002cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	492e      	ldr	r1, [pc, #184]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d208      	bcs.n	8002cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4922      	ldr	r1, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d208      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4917      	ldr	r1, [pc, #92]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002d1c:	f000 f834 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	4912      	ldr	r1, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x35c>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_RCC_ClockConfig+0x358>)
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_RCC_ClockConfig+0x35c>)
 8002d44:	5cd3      	ldrb	r3, [r2, r3]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x360>)
 8002d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d54:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x364>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x368>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f8fe 	bl	8000f60 <HAL_InitTick>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	58024400 	.word	0x58024400
 8002d78:	080077cc 	.word	0x080077cc
 8002d7c:	24000004 	.word	0x24000004
 8002d80:	24000000 	.word	0x24000000
 8002d84:	24000008 	.word	0x24000008

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8e:	4bb3      	ldr	r3, [pc, #716]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d96:	2b18      	cmp	r3, #24
 8002d98:	f200 8155 	bhi.w	8003046 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002e09 	.word	0x08002e09
 8002da8:	08003047 	.word	0x08003047
 8002dac:	08003047 	.word	0x08003047
 8002db0:	08003047 	.word	0x08003047
 8002db4:	08003047 	.word	0x08003047
 8002db8:	08003047 	.word	0x08003047
 8002dbc:	08003047 	.word	0x08003047
 8002dc0:	08003047 	.word	0x08003047
 8002dc4:	08002e2f 	.word	0x08002e2f
 8002dc8:	08003047 	.word	0x08003047
 8002dcc:	08003047 	.word	0x08003047
 8002dd0:	08003047 	.word	0x08003047
 8002dd4:	08003047 	.word	0x08003047
 8002dd8:	08003047 	.word	0x08003047
 8002ddc:	08003047 	.word	0x08003047
 8002de0:	08003047 	.word	0x08003047
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08003047 	.word	0x08003047
 8002dec:	08003047 	.word	0x08003047
 8002df0:	08003047 	.word	0x08003047
 8002df4:	08003047 	.word	0x08003047
 8002df8:	08003047 	.word	0x08003047
 8002dfc:	08003047 	.word	0x08003047
 8002e00:	08003047 	.word	0x08003047
 8002e04:	08002e3b 	.word	0x08002e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e08:	4b94      	ldr	r3, [pc, #592]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e14:	4b91      	ldr	r3, [pc, #580]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	4a90      	ldr	r2, [pc, #576]	; (8003060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
 8002e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e26:	e111      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e28:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e2a:	61bb      	str	r3, [r7, #24]
      break;
 8002e2c:	e10e      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e2e:	4b8d      	ldr	r3, [pc, #564]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e30:	61bb      	str	r3, [r7, #24]
      break;
 8002e32:	e10b      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e34:	4b8c      	ldr	r3, [pc, #560]	; (8003068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e36:	61bb      	str	r3, [r7, #24]
      break;
 8002e38:	e108      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e3a:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e44:	4b85      	ldr	r3, [pc, #532]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e50:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e5a:	4b80      	ldr	r3, [pc, #512]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	08db      	lsrs	r3, r3, #3
 8002e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 80e1 	beq.w	8003040 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	f000 8083 	beq.w	8002f8c <HAL_RCC_GetSysClockFreq+0x204>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	f200 80a1 	bhi.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x114>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d056      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e9a:	e099      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ea8:	4b6c      	ldr	r3, [pc, #432]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	4a6b      	ldr	r2, [pc, #428]	; (8003060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed2:	4b62      	ldr	r3, [pc, #392]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ee6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800306c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f02:	e087      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f16:	4b51      	ldr	r3, [pc, #324]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800306c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f46:	e065      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5a:	4b40      	ldr	r3, [pc, #256]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800306c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f8a:	e043      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800306c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fce:	e021      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800306c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	0a5b      	lsrs	r3, r3, #9
 800301a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800301e:	3301      	adds	r3, #1
 8003020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	ee07 3a90 	vmov	s15, r3
 8003028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800302c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003038:	ee17 3a90 	vmov	r3, s15
 800303c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800303e:	e005      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
      break;
 8003044:	e002      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003048:	61bb      	str	r3, [r7, #24]
      break;
 800304a:	bf00      	nop
  }

  return sysclockfreq;
 800304c:	69bb      	ldr	r3, [r7, #24]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3724      	adds	r7, #36	; 0x24
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
 8003060:	03d09000 	.word	0x03d09000
 8003064:	003d0900 	.word	0x003d0900
 8003068:	007a1200 	.word	0x007a1200
 800306c:	46000000 	.word	0x46000000
 8003070:	4c742400 	.word	0x4c742400
 8003074:	4a742400 	.word	0x4a742400
 8003078:	4af42400 	.word	0x4af42400

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003082:	f7ff fe81 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8003086:	4602      	mov	r2, r0
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCC_GetHCLKFreq+0x50>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	490f      	ldr	r1, [pc, #60]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003094:	5ccb      	ldrb	r3, [r1, r3]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_GetHCLKFreq+0x50>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80030b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ba:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	58024400 	.word	0x58024400
 80030d0:	080077cc 	.word	0x080077cc
 80030d4:	24000004 	.word	0x24000004
 80030d8:	24000000 	.word	0x24000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80030e0:	f7ff ffcc 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	58024400 	.word	0x58024400
 8003104:	080077cc 	.word	0x080077cc

08003108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800310c:	f7ff ffb6 	bl	800307c <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	58024400 	.word	0x58024400
 8003130:	080077cc 	.word	0x080077cc

08003134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b0c8      	sub	sp, #288	; 0x120
 800313a:	af00      	add	r7, sp, #0
 800313c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003140:	2300      	movs	r3, #0
 8003142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003146:	2300      	movs	r3, #0
 8003148:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800314c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003158:	2500      	movs	r5, #0
 800315a:	ea54 0305 	orrs.w	r3, r4, r5
 800315e:	d049      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800316a:	d02f      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800316c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003170:	d828      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003176:	d01a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317c:	d822      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003186:	d007      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003188:	e01c      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318a:	4ba7      	ldr	r3, [pc, #668]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	4aa6      	ldr	r2, [pc, #664]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003196:	e01a      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319c:	3308      	adds	r3, #8
 800319e:	2102      	movs	r1, #2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fc43 	bl	8004a2c <RCCEx_PLL2_Config>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031ac:	e00f      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b2:	3328      	adds	r3, #40	; 0x28
 80031b4:	2102      	movs	r1, #2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fcea 	bl	8004b90 <RCCEx_PLL3_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80031c2:	e004      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031ca:	e000      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80031cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031d6:	4b94      	ldr	r3, [pc, #592]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80031de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e4:	4a90      	ldr	r2, [pc, #576]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031e6:	430b      	orrs	r3, r1
 80031e8:	6513      	str	r3, [r2, #80]	; 0x50
 80031ea:	e003      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003200:	f04f 0900 	mov.w	r9, #0
 8003204:	ea58 0309 	orrs.w	r3, r8, r9
 8003208:	d047      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	2b04      	cmp	r3, #4
 8003212:	d82a      	bhi.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003231 	.word	0x08003231
 8003220:	0800323f 	.word	0x0800323f
 8003224:	08003255 	.word	0x08003255
 8003228:	08003273 	.word	0x08003273
 800322c:	08003273 	.word	0x08003273
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003230:	4b7d      	ldr	r3, [pc, #500]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a7c      	ldr	r2, [pc, #496]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800323c:	e01a      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800323e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003242:	3308      	adds	r3, #8
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f001 fbf0 	bl	8004a2c <RCCEx_PLL2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003252:	e00f      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003258:	3328      	adds	r3, #40	; 0x28
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fc97 	bl	8004b90 <RCCEx_PLL3_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003268:	e004      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003270:	e000      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003274:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800327c:	4b6a      	ldr	r3, [pc, #424]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003280:	f023 0107 	bic.w	r1, r3, #7
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	4a67      	ldr	r2, [pc, #412]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800328c:	430b      	orrs	r3, r1
 800328e:	6513      	str	r3, [r2, #80]	; 0x50
 8003290:	e003      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003292:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003296:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800329a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80032a6:	f04f 0b00 	mov.w	fp, #0
 80032aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80032ae:	d054      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80032b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032ba:	d036      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80032bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032c0:	d82f      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c6:	d032      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80032c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032cc:	d829      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032ce:	2bc0      	cmp	r3, #192	; 0xc0
 80032d0:	d02f      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80032d2:	2bc0      	cmp	r3, #192	; 0xc0
 80032d4:	d825      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032d6:	2b80      	cmp	r3, #128	; 0x80
 80032d8:	d018      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80032da:	2b80      	cmp	r3, #128	; 0x80
 80032dc:	d821      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d007      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80032e6:	e01c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e8:	4b4f      	ldr	r3, [pc, #316]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4a4e      	ldr	r2, [pc, #312]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80032f4:	e01e      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032fa:	3308      	adds	r3, #8
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fb94 	bl	8004a2c <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800330a:	e013      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800330c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003310:	3328      	adds	r3, #40	; 0x28
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fc3b 	bl	8004b90 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003320:	e008      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003328:	e004      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800332a:	bf00      	nop
 800332c:	e002      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800332e:	bf00      	nop
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003334:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10a      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800333c:	4b3a      	ldr	r3, [pc, #232]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	4a37      	ldr	r2, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800334c:	430b      	orrs	r3, r1
 800334e:	6513      	str	r3, [r2, #80]	; 0x50
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003352:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003356:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800335a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003362:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003366:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003370:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003374:	460b      	mov	r3, r1
 8003376:	4313      	orrs	r3, r2
 8003378:	d05c      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003384:	d03b      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003386:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800338a:	d834      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800338c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003390:	d037      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003396:	d82e      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003398:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800339c:	d033      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800339e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033a2:	d828      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d01a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80033aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ae:	d822      	bhi.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b8:	d007      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x296>
 80033ba:	e01c      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033bc:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033c8:	e01e      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033ce:	3308      	adds	r3, #8
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 fb2a 	bl	8004a2c <RCCEx_PLL2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033de:	e013      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e4:	3328      	adds	r3, #40	; 0x28
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fbd1 	bl	8004b90 <RCCEx_PLL3_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80033f4:	e008      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003414:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800341e:	4a02      	ldr	r2, [pc, #8]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003420:	430b      	orrs	r3, r1
 8003422:	6513      	str	r3, [r2, #80]	; 0x50
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003426:	bf00      	nop
 8003428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003430:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800344a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800344e:	460b      	mov	r3, r1
 8003450:	4313      	orrs	r3, r2
 8003452:	d03a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	2b30      	cmp	r3, #48	; 0x30
 800345c:	d01f      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800345e:	2b30      	cmp	r3, #48	; 0x30
 8003460:	d819      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003462:	2b20      	cmp	r3, #32
 8003464:	d00c      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003466:	2b20      	cmp	r3, #32
 8003468:	d815      	bhi.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d019      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800346e:	2b10      	cmp	r3, #16
 8003470:	d111      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003472:	4bae      	ldr	r3, [pc, #696]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	4aad      	ldr	r2, [pc, #692]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800347e:	e011      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003484:	3308      	adds	r3, #8
 8003486:	2102      	movs	r1, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f001 facf 	bl	8004a2c <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80034a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034ac:	4b9f      	ldr	r3, [pc, #636]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ba:	4a9c      	ldr	r2, [pc, #624]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80034d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d051      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f4:	d035      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80034f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034fa:	d82e      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x426>
 80034fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003500:	d031      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003506:	d828      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350c:	d01a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800350e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003512:	d822      	bhi.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d007      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800351e:	e01c      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003520:	4b82      	ldr	r3, [pc, #520]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a81      	ldr	r2, [pc, #516]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800352c:	e01c      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800352e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003532:	3308      	adds	r3, #8
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f001 fa78 	bl	8004a2c <RCCEx_PLL2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003548:	3328      	adds	r3, #40	; 0x28
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fb1f 	bl	8004b90 <RCCEx_PLL3_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003558:	e006      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003560:	e002      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003568:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003570:	4b6e      	ldr	r3, [pc, #440]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800357c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357e:	4a6b      	ldr	r2, [pc, #428]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6513      	str	r3, [r2, #80]	; 0x50
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800358a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800358e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800359a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035a8:	460b      	mov	r3, r1
 80035aa:	4313      	orrs	r3, r2
 80035ac:	d053      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d033      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80035ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035be:	d82c      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035c4:	d02f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80035c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035ca:	d826      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035d0:	d02b      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80035d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035d6:	d820      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035dc:	d012      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80035de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e2:	d81a      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d115      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f2:	3308      	adds	r3, #8
 80035f4:	2101      	movs	r1, #1
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fa18 	bl	8004a2c <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003602:	e015      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003608:	3328      	adds	r3, #40	; 0x28
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fabf 	bl	8004b90 <RCCEx_PLL3_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003618:	e00a      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003622:	bf00      	nop
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003638:	4b3c      	ldr	r3, [pc, #240]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800363a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003646:	4a39      	ldr	r2, [pc, #228]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003648:	430b      	orrs	r3, r1
 800364a:	6513      	str	r3, [r2, #80]	; 0x50
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003652:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800366c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003670:	460b      	mov	r3, r1
 8003672:	4313      	orrs	r3, r2
 8003674:	d060      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800367e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003682:	d039      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003684:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003688:	d832      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800368a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368e:	d035      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003694:	d82c      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369a:	d031      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800369c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a0:	d826      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036a6:	d02d      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80036a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036ac:	d820      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d012      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80036b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b8:	d81a      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d024      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c2:	d115      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036c8:	3308      	adds	r3, #8
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 f9ad 	bl	8004a2c <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036d8:	e017      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036de:	3328      	adds	r3, #40	; 0x28
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fa54 	bl	8004b90 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036f6:	e008      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036f8:	bf00      	nop
 80036fa:	e006      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80036fc:	bf00      	nop
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003700:	bf00      	nop
 8003702:	e002      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003722:	4a02      	ldr	r2, [pc, #8]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003724:	430b      	orrs	r3, r1
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800372a:	bf00      	nop
 800372c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003734:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800374e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d037      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003762:	d00e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003768:	d816      	bhi.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d018      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800376e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003772:	d111      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4bc4      	ldr	r3, [pc, #784]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4ac3      	ldr	r2, [pc, #780]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003780:	e00f      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003786:	3308      	adds	r3, #8
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f001 f94e 	bl	8004a2c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003796:	e004      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80037a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037aa:	4bb7      	ldr	r3, [pc, #732]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b8:	4ab3      	ldr	r2, [pc, #716]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ba:	430b      	orrs	r3, r1
 80037bc:	6513      	str	r3, [r2, #80]	; 0x50
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d039      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d81c      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003809 	.word	0x08003809
 8003800:	08003817 	.word	0x08003817
 8003804:	08003835 	.word	0x08003835
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4b9f      	ldr	r3, [pc, #636]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4a9e      	ldr	r2, [pc, #632]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003814:	e00f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381a:	3308      	adds	r3, #8
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 f904 	bl	8004a2c <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800382a:	e004      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003832:	e000      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003836:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800383e:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	f023 0103 	bic.w	r1, r3, #3
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	4a8e      	ldr	r2, [pc, #568]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800384e:	430b      	orrs	r3, r1
 8003850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003852:	e003      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003858:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386c:	2300      	movs	r3, #0
 800386e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003872:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003876:	460b      	mov	r3, r1
 8003878:	4313      	orrs	r3, r2
 800387a:	f000 8099 	beq.w	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387e:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a82      	ldr	r2, [pc, #520]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800388a:	f7fd fbb3 	bl	8000ff4 <HAL_GetTick>
 800388e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003892:	e00b      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003894:	f7fd fbae 	bl	8000ff4 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b64      	cmp	r3, #100	; 0x64
 80038a2:	d903      	bls.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038aa:	e005      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ac:	4b77      	ldr	r3, [pc, #476]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ed      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80038b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d173      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038c0:	4b71      	ldr	r3, [pc, #452]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038cc:	4053      	eors	r3, r2
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038d6:	4b6c      	ldr	r3, [pc, #432]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e6:	4a68      	ldr	r2, [pc, #416]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ee:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038fa:	4a63      	ldr	r2, [pc, #396]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800390a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800390e:	d118      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fd fb70 	bl	8000ff4 <HAL_GetTick>
 8003914:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003918:	e00d      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fd fb6b 	bl	8000ff4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	f241 3388 	movw	r3, #5000	; 0x1388
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003934:	e005      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003936:	4b54      	ldr	r3, [pc, #336]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0eb      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003942:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003946:	2b00      	cmp	r3, #0
 8003948:	d129      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395a:	d10e      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800395c:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003968:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800396c:	091a      	lsrs	r2, r3, #4
 800396e:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003970:	4013      	ands	r3, r2
 8003972:	4a45      	ldr	r2, [pc, #276]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6113      	str	r3, [r2, #16]
 8003978:	e005      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003984:	6113      	str	r3, [r2, #16]
 8003986:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003988:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800398a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800398e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003996:	4a3c      	ldr	r2, [pc, #240]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	e008      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800399e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80039a6:	e003      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f002 0301 	and.w	r3, r2, #1
 80039bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f000 8090 	beq.w	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	2b28      	cmp	r3, #40	; 0x28
 80039dc:	d870      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80039de:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80039e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e4:	08003ac9 	.word	0x08003ac9
 80039e8:	08003ac1 	.word	0x08003ac1
 80039ec:	08003ac1 	.word	0x08003ac1
 80039f0:	08003ac1 	.word	0x08003ac1
 80039f4:	08003ac1 	.word	0x08003ac1
 80039f8:	08003ac1 	.word	0x08003ac1
 80039fc:	08003ac1 	.word	0x08003ac1
 8003a00:	08003ac1 	.word	0x08003ac1
 8003a04:	08003a95 	.word	0x08003a95
 8003a08:	08003ac1 	.word	0x08003ac1
 8003a0c:	08003ac1 	.word	0x08003ac1
 8003a10:	08003ac1 	.word	0x08003ac1
 8003a14:	08003ac1 	.word	0x08003ac1
 8003a18:	08003ac1 	.word	0x08003ac1
 8003a1c:	08003ac1 	.word	0x08003ac1
 8003a20:	08003ac1 	.word	0x08003ac1
 8003a24:	08003aab 	.word	0x08003aab
 8003a28:	08003ac1 	.word	0x08003ac1
 8003a2c:	08003ac1 	.word	0x08003ac1
 8003a30:	08003ac1 	.word	0x08003ac1
 8003a34:	08003ac1 	.word	0x08003ac1
 8003a38:	08003ac1 	.word	0x08003ac1
 8003a3c:	08003ac1 	.word	0x08003ac1
 8003a40:	08003ac1 	.word	0x08003ac1
 8003a44:	08003ac9 	.word	0x08003ac9
 8003a48:	08003ac1 	.word	0x08003ac1
 8003a4c:	08003ac1 	.word	0x08003ac1
 8003a50:	08003ac1 	.word	0x08003ac1
 8003a54:	08003ac1 	.word	0x08003ac1
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003ac1 	.word	0x08003ac1
 8003a64:	08003ac9 	.word	0x08003ac9
 8003a68:	08003ac1 	.word	0x08003ac1
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003ac1 	.word	0x08003ac1
 8003a74:	08003ac1 	.word	0x08003ac1
 8003a78:	08003ac1 	.word	0x08003ac1
 8003a7c:	08003ac1 	.word	0x08003ac1
 8003a80:	08003ac1 	.word	0x08003ac1
 8003a84:	08003ac9 	.word	0x08003ac9
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	58024800 	.word	0x58024800
 8003a90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a98:	3308      	adds	r3, #8
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 ffc5 	bl	8004a2c <RCCEx_PLL2_Config>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aa8:	e00f      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aae:	3328      	adds	r3, #40	; 0x28
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f001 f86c 	bl	8004b90 <RCCEx_PLL3_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ad2:	4bc0      	ldr	r3, [pc, #768]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	4abc      	ldr	r2, [pc, #752]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6553      	str	r3, [r2, #84]	; 0x54
 8003ae8:	e003      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afa:	f002 0302 	and.w	r3, r2, #2
 8003afe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b02:	2300      	movs	r3, #0
 8003b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b08:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d043      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d824      	bhi.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b71 	.word	0x08003b71
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b53 	.word	0x08003b53
 8003b30:	08003b71 	.word	0x08003b71
 8003b34:	08003b71 	.word	0x08003b71
 8003b38:	08003b71 	.word	0x08003b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b40:	3308      	adds	r3, #8
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 ff71 	bl	8004a2c <RCCEx_PLL2_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b50:	e00f      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b56:	3328      	adds	r3, #40	; 0x28
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 f818 	bl	8004b90 <RCCEx_PLL3_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b66:	e004      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b7a:	4b96      	ldr	r3, [pc, #600]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7e:	f023 0107 	bic.w	r1, r3, #7
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b8a:	4a92      	ldr	r2, [pc, #584]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b96:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f002 0304 	and.w	r3, r2, #4
 8003ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d043      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc2:	2b05      	cmp	r3, #5
 8003bc4:	d824      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003be5 	.word	0x08003be5
 8003bd4:	08003bfb 	.word	0x08003bfb
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c19 	.word	0x08003c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be8:	3308      	adds	r3, #8
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ff1d 	bl	8004a2c <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bf8:	e00f      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfe:	3328      	adds	r3, #40	; 0x28
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 ffc4 	bl	8004b90 <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c22:	4b6c      	ldr	r3, [pc, #432]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	f023 0107 	bic.w	r1, r3, #7
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c32:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6593      	str	r3, [r2, #88]	; 0x58
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f002 0320 	and.w	r3, r2, #32
 8003c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d055      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c6e:	d033      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c74:	d82c      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d02f      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d826      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c86:	d02b      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c8c:	d820      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c92:	d012      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c98:	d81a      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d022      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca2:	d115      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 febd 	bl	8004a2c <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e015      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbe:	3328      	adds	r3, #40	; 0x28
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff64 	bl	8004b90 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cd6:	e006      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cd8:	bf00      	nop
 8003cda:	e004      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cee:	4b39      	ldr	r3, [pc, #228]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cfe:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6553      	str	r3, [r2, #84]	; 0x54
 8003d04:	e003      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	d058      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d3a:	d033      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003d3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d40:	d82c      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d46:	d02f      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4c:	d826      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d52:	d02b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003d54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d58:	d820      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d012      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d64:	d81a      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d022      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	3308      	adds	r3, #8
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fe57 	bl	8004a2c <RCCEx_PLL2_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d84:	e015      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d8a:	3328      	adds	r3, #40	; 0x28
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fefe 	bl	8004b90 <RCCEx_PLL3_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003da2:	e006      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003da4:	bf00      	nop
 8003da6:	e004      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003da8:	bf00      	nop
 8003daa:	e002      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10e      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dca:	4a02      	ldr	r2, [pc, #8]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd0:	e006      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ddc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003df6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	d055      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e0c:	d033      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e0e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e12:	d82c      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	d02f      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	d826      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e24:	d02b      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e26:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e2a:	d820      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e30:	d012      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e36:	d81a      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d022      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e40:	d115      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	3308      	adds	r3, #8
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fdee 	bl	8004a2c <RCCEx_PLL2_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e56:	e015      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5c:	3328      	adds	r3, #40	; 0x28
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe95 	bl	8004b90 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e74:	e006      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e76:	bf00      	nop
 8003e78:	e004      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e8c:	4ba1      	ldr	r3, [pc, #644]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e9c:	4a9d      	ldr	r2, [pc, #628]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea2:	e003      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f002 0308 	and.w	r3, r2, #8
 8003eb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	d01e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ede:	3328      	adds	r3, #40	; 0x28
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fe54 	bl	8004b90 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ef4:	4b87      	ldr	r3, [pc, #540]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	4a83      	ldr	r2, [pc, #524]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f002 0310 	and.w	r3, r2, #16
 8003f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f24:	460b      	mov	r3, r1
 8003f26:	4313      	orrs	r3, r2
 8003f28:	d01e      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3c:	3328      	adds	r3, #40	; 0x28
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fe25 	bl	8004b90 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f52:	4b70      	ldr	r3, [pc, #448]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f62:	4a6c      	ldr	r2, [pc, #432]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d03e      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f94:	d022      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9a:	d81b      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa4:	d00b      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003fa6:	e015      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	3308      	adds	r3, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fd3b 	bl	8004a2c <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fbc:	e00f      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fde2 	bl	8004b90 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10b      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fe6:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ff6:	4a47      	ldr	r2, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004002:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004012:	67bb      	str	r3, [r7, #120]	; 0x78
 8004014:	2300      	movs	r3, #0
 8004016:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004018:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800402e:	d01f      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004034:	d818      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403a:	d003      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800403c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004040:	d007      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004042:	e011      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004044:	4b33      	ldr	r3, [pc, #204]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	4a32      	ldr	r2, [pc, #200]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800404a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004050:	e00f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fd98 	bl	8004b90 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407a:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	4a22      	ldr	r2, [pc, #136]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6553      	str	r3, [r2, #84]	; 0x54
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004096:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040a6:	673b      	str	r3, [r7, #112]	; 0x70
 80040a8:	2300      	movs	r3, #0
 80040aa:	677b      	str	r3, [r7, #116]	; 0x74
 80040ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040b0:	460b      	mov	r3, r1
 80040b2:	4313      	orrs	r3, r2
 80040b4:	d034      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d007      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80040c6:	e011      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	4a11      	ldr	r2, [pc, #68]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040d4:	e00e      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	3308      	adds	r3, #8
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fca4 	bl	8004a2c <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410a:	4a02      	ldr	r2, [pc, #8]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800410c:	430b      	orrs	r3, r1
 800410e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800411c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800412c:	66bb      	str	r3, [r7, #104]	; 0x68
 800412e:	2300      	movs	r3, #0
 8004130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004132:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d00c      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800413c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004140:	3328      	adds	r3, #40	; 0x28
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fd23 	bl	8004b90 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
 8004164:	2300      	movs	r3, #0
 8004166:	667b      	str	r3, [r7, #100]	; 0x64
 8004168:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d038      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417e:	d018      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004184:	d811      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418a:	d014      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d80b      	bhi.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d011      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419c:	4bc3      	ldr	r3, [pc, #780]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4ac2      	ldr	r2, [pc, #776]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041a8:	e008      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041b0:	e004      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041b2:	bf00      	nop
 80041b4:	e002      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041b6:	bf00      	nop
 80041b8:	e000      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80041ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c4:	4bb9      	ldr	r3, [pc, #740]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	4ab5      	ldr	r2, [pc, #724]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6553      	str	r3, [r2, #84]	; 0x54
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f2:	2300      	movs	r3, #0
 80041f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d009      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004200:	4baa      	ldr	r3, [pc, #680]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004204:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800420e:	4aa7      	ldr	r2, [pc, #668]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004220:	653b      	str	r3, [r7, #80]	; 0x50
 8004222:	2300      	movs	r3, #0
 8004224:	657b      	str	r3, [r7, #84]	; 0x54
 8004226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004230:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a9b      	ldr	r2, [pc, #620]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004250:	64bb      	str	r3, [r7, #72]	; 0x48
 8004252:	2300      	movs	r3, #0
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004256:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800425a:	460b      	mov	r3, r1
 800425c:	4313      	orrs	r3, r2
 800425e:	d009      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004260:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	4a8f      	ldr	r2, [pc, #572]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004270:	430b      	orrs	r3, r1
 8004272:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
 8004282:	2300      	movs	r3, #0
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
 8004286:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800428a:	460b      	mov	r3, r1
 800428c:	4313      	orrs	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	4a85      	ldr	r2, [pc, #532]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800429a:	6113      	str	r3, [r2, #16]
 800429c:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800429e:	6919      	ldr	r1, [r3, #16]
 80042a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042a8:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80042bc:	2300      	movs	r3, #0
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042ca:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80042d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	4a74      	ldr	r2, [pc, #464]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042ea:	633b      	str	r3, [r7, #48]	; 0x30
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
 80042f0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042fa:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430a:	4a68      	ldr	r2, [pc, #416]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800430c:	430b      	orrs	r3, r1
 800430e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	2100      	movs	r1, #0
 800431a:	62b9      	str	r1, [r7, #40]	; 0x28
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004322:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d011      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800432c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004330:	3308      	adds	r3, #8
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb79 	bl	8004a2c <RCCEx_PLL2_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004340:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800434c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004358:	2100      	movs	r1, #0
 800435a:	6239      	str	r1, [r7, #32]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004366:	460b      	mov	r3, r1
 8004368:	4313      	orrs	r3, r2
 800436a:	d011      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	3308      	adds	r3, #8
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fb59 	bl	8004a2c <RCCEx_PLL2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004398:	2100      	movs	r1, #0
 800439a:	61b9      	str	r1, [r7, #24]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d011      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b0:	3308      	adds	r3, #8
 80043b2:	2102      	movs	r1, #2
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fb39 	bl	8004a2c <RCCEx_PLL2_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80043c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	2100      	movs	r1, #0
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043e6:	460b      	mov	r3, r1
 80043e8:	4313      	orrs	r3, r2
 80043ea:	d011      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f0:	3328      	adds	r3, #40	; 0x28
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fbcb 	bl	8004b90 <RCCEx_PLL3_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800440c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	2100      	movs	r1, #0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d011      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004430:	3328      	adds	r3, #40	; 0x28
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fbab 	bl	8004b90 <RCCEx_PLL3_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800444c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	2100      	movs	r1, #0
 800445a:	6039      	str	r1, [r7, #0]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d011      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800446c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004470:	3328      	adds	r3, #40	; 0x28
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fb8b 	bl	8004b90 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800448c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004490:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
}
 800449e:	4618      	mov	r0, r3
 80044a0:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044aa:	bf00      	nop
 80044ac:	58024400 	.word	0x58024400

080044b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80044b4:	f7fe fde2 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80044b8:	4602      	mov	r2, r0
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	4904      	ldr	r1, [pc, #16]	; (80044d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044c6:	5ccb      	ldrb	r3, [r1, r3]
 80044c8:	f003 031f 	and.w	r3, r3, #31
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	58024400 	.word	0x58024400
 80044d8:	080077cc 	.word	0x080077cc

080044dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044e4:	4ba1      	ldr	r3, [pc, #644]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044ee:	4b9f      	ldr	r3, [pc, #636]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	0b1b      	lsrs	r3, r3, #12
 80044f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044fa:	4b9c      	ldr	r3, [pc, #624]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004506:	4b99      	ldr	r3, [pc, #612]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8111 	beq.w	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b02      	cmp	r3, #2
 800452e:	f000 8083 	beq.w	8004638 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b02      	cmp	r3, #2
 8004536:	f200 80a1 	bhi.w	800467c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d056      	beq.n	80045f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004546:	e099      	b.n	800467c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004548:	4b88      	ldr	r3, [pc, #544]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d02d      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004554:	4b85      	ldr	r3, [pc, #532]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	08db      	lsrs	r3, r3, #3
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	4a84      	ldr	r2, [pc, #528]	; (8004770 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004592:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045ae:	e087      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045f2:	e065      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a03 	vldr	s12, [r7, #12]
 800461a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004636:	e043      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b48      	ldr	r3, [pc, #288]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a03 	vldr	s12, [r7, #12]
 800465e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800467a:	e021      	b.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800477c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469e:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004774 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046c0:	4b2a      	ldr	r3, [pc, #168]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046ee:	4b1f      	ldr	r3, [pc, #124]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004704:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004708:	edd7 6a07 	vldr	s13, [r7, #28]
 800470c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004714:	ee17 2a90 	vmov	r2, s15
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800471c:	4b13      	ldr	r3, [pc, #76]	; (800476c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	0e1b      	lsrs	r3, r3, #24
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004736:	edd7 6a07 	vldr	s13, [r7, #28]
 800473a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004742:	ee17 2a90 	vmov	r2, s15
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800474a:	e008      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
}
 800475e:	bf00      	nop
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
 8004770:	03d09000 	.word	0x03d09000
 8004774:	46000000 	.word	0x46000000
 8004778:	4c742400 	.word	0x4c742400
 800477c:	4a742400 	.word	0x4a742400
 8004780:	4af42400 	.word	0x4af42400

08004784 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800478c:	4ba1      	ldr	r3, [pc, #644]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004790:	f003 0303 	and.w	r3, r3, #3
 8004794:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004796:	4b9f      	ldr	r3, [pc, #636]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	0d1b      	lsrs	r3, r3, #20
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047a2:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047ae:	4b99      	ldr	r3, [pc, #612]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8111 	beq.w	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	f000 8083 	beq.w	80048e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f200 80a1 	bhi.w	8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d056      	beq.n	800489c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047ee:	e099      	b.n	8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02d      	beq.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047fc:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	08db      	lsrs	r3, r3, #3
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	4a84      	ldr	r2, [pc, #528]	; (8004a18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004826:	4b7b      	ldr	r3, [pc, #492]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	ed97 6a03 	vldr	s12, [r7, #12]
 800483a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004856:	e087      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487a:	ed97 6a03 	vldr	s12, [r7, #12]
 800487e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800488e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489a:	e065      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048de:	e043      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b48      	ldr	r3, [pc, #288]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e021      	b.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004968:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	0a5b      	lsrs	r3, r3, #9
 800496e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800497e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004982:	edd7 6a07 	vldr	s13, [r7, #28]
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498e:	ee17 2a90 	vmov	r2, s15
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	ee07 3a90 	vmov	s15, r3
 80049a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049bc:	ee17 2a90 	vmov	r2, s15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	0e1b      	lsrs	r3, r3, #24
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049de:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 2a90 	vmov	r2, s15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049f2:	e008      	b.n	8004a06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	3724      	adds	r7, #36	; 0x24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	03d09000 	.word	0x03d09000
 8004a1c:	46000000 	.word	0x46000000
 8004a20:	4c742400 	.word	0x4c742400
 8004a24:	4a742400 	.word	0x4a742400
 8004a28:	4af42400 	.word	0x4af42400

08004a2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a3a:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d101      	bne.n	8004a4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e099      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a4a:	4b4f      	ldr	r3, [pc, #316]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4e      	ldr	r2, [pc, #312]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a56:	f7fc facd 	bl	8000ff4 <HAL_GetTick>
 8004a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a5c:	e008      	b.n	8004a70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a5e:	f7fc fac9 	bl	8000ff4 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e086      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a70:	4b45      	ldr	r3, [pc, #276]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	493f      	ldr	r1, [pc, #252]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	025b      	lsls	r3, r3, #9
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	041b      	lsls	r3, r3, #16
 8004aae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	061b      	lsls	r3, r3, #24
 8004abc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ac0:	4931      	ldr	r1, [pc, #196]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ac6:	4b30      	ldr	r3, [pc, #192]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	492d      	ldr	r1, [pc, #180]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f023 0220 	bic.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	4928      	ldr	r1, [pc, #160]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aea:	4b27      	ldr	r3, [pc, #156]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	4a26      	ldr	r2, [pc, #152]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <RCCEx_PLL2_Config+0x160>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	69d2      	ldr	r2, [r2, #28]
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4920      	ldr	r1, [pc, #128]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b10:	f043 0310 	orr.w	r3, r3, #16
 8004b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b28:	e00f      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b3c:	e005      	b.n	8004b4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a11      	ldr	r2, [pc, #68]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc fa4d 	bl	8000ff4 <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5e:	f7fc fa49 	bl	8000ff4 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	ffff0007 	.word	0xffff0007

08004b90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b9e:	4b53      	ldr	r3, [pc, #332]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d101      	bne.n	8004bae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e099      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bae:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4e      	ldr	r2, [pc, #312]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bba:	f7fc fa1b 	bl	8000ff4 <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bc0:	e008      	b.n	8004bd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bc2:	f7fc fa17 	bl	8000ff4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e086      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bd4:	4b45      	ldr	r3, [pc, #276]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f0      	bne.n	8004bc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004be0:	4b42      	ldr	r3, [pc, #264]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	493f      	ldr	r1, [pc, #252]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	025b      	lsls	r3, r3, #9
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	041b      	lsls	r3, r3, #16
 8004c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c24:	4931      	ldr	r1, [pc, #196]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c2a:	4b30      	ldr	r3, [pc, #192]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	492d      	ldr	r1, [pc, #180]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c3c:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4928      	ldr	r1, [pc, #160]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	4a26      	ldr	r2, [pc, #152]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5e:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCCEx_PLL3_Config+0x160>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	69d2      	ldr	r2, [r2, #28]
 8004c66:	00d2      	lsls	r2, r2, #3
 8004c68:	4920      	ldr	r1, [pc, #128]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c6e:	4b1f      	ldr	r3, [pc, #124]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	4a1e      	ldr	r2, [pc, #120]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c8c:	e00f      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c94:	4b15      	ldr	r3, [pc, #84]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a14      	ldr	r2, [pc, #80]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ca0:	e005      	b.n	8004cae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a11      	ldr	r2, [pc, #68]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cba:	f7fc f99b 	bl	8000ff4 <HAL_GetTick>
 8004cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cc0:	e008      	b.n	8004cd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cc2:	f7fc f997 	bl	8000ff4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	ffff0007 	.word	0xffff0007

08004cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e042      	b.n	8004d8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fb ffe9 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2224      	movs	r2, #36	; 0x24
 8004d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fce0 	bl	80056fc <UART_SetConfig>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e022      	b.n	8004d8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 fb40 	bl	80063d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f001 fbc7 	bl	8006518 <UART_CheckIdleState>
 8004d8a:	4603      	mov	r3, r0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d17b      	bne.n	8004ea6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_UART_Transmit+0x26>
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e074      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	; 0x21
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dce:	f7fc f911 	bl	8000ff4 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d108      	bne.n	8004e00 <HAL_UART_Transmit+0x6c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	e003      	b.n	8004e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e08:	e030      	b.n	8004e6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f001 fc29 	bl	800666c <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e03d      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10b      	bne.n	8004e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	3302      	adds	r3, #2
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	e007      	b.n	8004e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	781a      	ldrb	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1c8      	bne.n	8004e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f001 fbf2 	bl	800666c <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d005      	beq.n	8004e9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08a      	sub	sp, #40	; 0x28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d137      	bne.n	8004f38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_UART_Receive_IT+0x24>
 8004ece:	88fb      	ldrh	r3, [r7, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e030      	b.n	8004f3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <HAL_UART_Receive_IT+0x94>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d01f      	beq.n	8004f28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	e853 3f00 	ldrex	r3, [r3]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	6a3a      	ldr	r2, [r7, #32]
 8004f1c:	e841 2300 	strex	r3, r2, [r1]
 8004f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1e6      	bne.n	8004ef6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f001 fc04 	bl	800673c <UART_Start_Receive_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	e000      	b.n	8004f3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	58000c00 	.word	0x58000c00

08004f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b0ba      	sub	sp, #232	; 0xe8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f76:	4013      	ands	r3, r2
 8004f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11b      	bne.n	8004fbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8377 	beq.w	80056a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	4798      	blx	r3
      }
      return;
 8004fba:	e371      	b.n	80056a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8123 	beq.w	800520c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004fc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004fca:	4b8d      	ldr	r3, [pc, #564]	; (8005200 <HAL_UART_IRQHandler+0x2b8>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004fd6:	4b8b      	ldr	r3, [pc, #556]	; (8005204 <HAL_UART_IRQHandler+0x2bc>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 8116 	beq.w	800520c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <HAL_UART_IRQHandler+0xc8>
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f043 0201 	orr.w	r2, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d011      	beq.n	8005040 <HAL_UART_IRQHandler+0xf8>
 800501c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00b      	beq.n	8005040 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2202      	movs	r2, #2
 800502e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f043 0204 	orr.w	r2, r3, #4
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d011      	beq.n	8005070 <HAL_UART_IRQHandler+0x128>
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2204      	movs	r2, #4
 800505e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d017      	beq.n	80050ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 0320 	and.w	r3, r3, #32
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005088:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800508c:	4b5c      	ldr	r3, [pc, #368]	; (8005200 <HAL_UART_IRQHandler+0x2b8>)
 800508e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00b      	beq.n	80050ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2208      	movs	r2, #8
 800509a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f043 0208 	orr.w	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d012      	beq.n	80050de <HAL_UART_IRQHandler+0x196>
 80050b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 82dd 	beq.w	80056a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d007      	beq.n	800511e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d005      	beq.n	8005142 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d054      	beq.n	80051ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fc1c 	bl	8006980 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d146      	bne.n	80051e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800516c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800518e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1d9      	bne.n	8005156 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d017      	beq.n	80051dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_UART_IRQHandler+0x2c0>)
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fc fb77 	bl	80018b0 <HAL_DMA_Abort_IT>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d019      	beq.n	80051fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80051d6:	4610      	mov	r0, r2
 80051d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	e00f      	b.n	80051fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fa77 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e2:	e00b      	b.n	80051fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa73 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ea:	e007      	b.n	80051fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fa6f 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80051fa:	e253      	b.n	80056a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fc:	bf00      	nop
    return;
 80051fe:	e251      	b.n	80056a4 <HAL_UART_IRQHandler+0x75c>
 8005200:	10000001 	.word	0x10000001
 8005204:	04000120 	.word	0x04000120
 8005208:	08006a4d 	.word	0x08006a4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	2b01      	cmp	r3, #1
 8005212:	f040 81e7 	bne.w	80055e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 81e0 	beq.w	80055e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 81d9 	beq.w	80055e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2210      	movs	r2, #16
 8005238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	f040 8151 	bne.w	80054ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a96      	ldr	r2, [pc, #600]	; (80054ac <HAL_UART_IRQHandler+0x564>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d068      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a93      	ldr	r2, [pc, #588]	; (80054b0 <HAL_UART_IRQHandler+0x568>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d061      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a91      	ldr	r2, [pc, #580]	; (80054b4 <HAL_UART_IRQHandler+0x56c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d05a      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a8e      	ldr	r2, [pc, #568]	; (80054b8 <HAL_UART_IRQHandler+0x570>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d053      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a8c      	ldr	r2, [pc, #560]	; (80054bc <HAL_UART_IRQHandler+0x574>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d04c      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a89      	ldr	r2, [pc, #548]	; (80054c0 <HAL_UART_IRQHandler+0x578>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d045      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a87      	ldr	r2, [pc, #540]	; (80054c4 <HAL_UART_IRQHandler+0x57c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d03e      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a84      	ldr	r2, [pc, #528]	; (80054c8 <HAL_UART_IRQHandler+0x580>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d037      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a82      	ldr	r2, [pc, #520]	; (80054cc <HAL_UART_IRQHandler+0x584>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d030      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7f      	ldr	r2, [pc, #508]	; (80054d0 <HAL_UART_IRQHandler+0x588>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d029      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7d      	ldr	r2, [pc, #500]	; (80054d4 <HAL_UART_IRQHandler+0x58c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a7a      	ldr	r2, [pc, #488]	; (80054d8 <HAL_UART_IRQHandler+0x590>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01b      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a78      	ldr	r2, [pc, #480]	; (80054dc <HAL_UART_IRQHandler+0x594>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d014      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a75      	ldr	r2, [pc, #468]	; (80054e0 <HAL_UART_IRQHandler+0x598>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00d      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a73      	ldr	r2, [pc, #460]	; (80054e4 <HAL_UART_IRQHandler+0x59c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d006      	beq.n	800532a <HAL_UART_IRQHandler+0x3e2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a70      	ldr	r2, [pc, #448]	; (80054e8 <HAL_UART_IRQHandler+0x5a0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d106      	bne.n	8005338 <HAL_UART_IRQHandler+0x3f0>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b29b      	uxth	r3, r3
 8005336:	e005      	b.n	8005344 <HAL_UART_IRQHandler+0x3fc>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 81ab 	beq.w	80056a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800535c:	429a      	cmp	r2, r3
 800535e:	f080 81a3 	bcs.w	80056a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005368:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	f000 8087 	beq.w	800548a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1da      	bne.n	800537c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e1      	bne.n	80053c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3308      	adds	r3, #8
 8005422:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005426:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800542c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e3      	bne.n	8005402 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800546a:	65bb      	str	r3, [r7, #88]	; 0x58
 800546c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005472:	e841 2300 	strex	r3, r2, [r1]
 8005476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1e4      	bne.n	8005448 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005484:	4618      	mov	r0, r3
 8005486:	f7fb fef5 	bl	8001274 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800549c:	b29b      	uxth	r3, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f91d 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054aa:	e0fd      	b.n	80056a8 <HAL_UART_IRQHandler+0x760>
 80054ac:	40020010 	.word	0x40020010
 80054b0:	40020028 	.word	0x40020028
 80054b4:	40020040 	.word	0x40020040
 80054b8:	40020058 	.word	0x40020058
 80054bc:	40020070 	.word	0x40020070
 80054c0:	40020088 	.word	0x40020088
 80054c4:	400200a0 	.word	0x400200a0
 80054c8:	400200b8 	.word	0x400200b8
 80054cc:	40020410 	.word	0x40020410
 80054d0:	40020428 	.word	0x40020428
 80054d4:	40020440 	.word	0x40020440
 80054d8:	40020458 	.word	0x40020458
 80054dc:	40020470 	.word	0x40020470
 80054e0:	40020488 	.word	0x40020488
 80054e4:	400204a0 	.word	0x400204a0
 80054e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80cf 	beq.w	80056ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800550e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80ca 	beq.w	80056ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	e853 3f00 	ldrex	r3, [r3]
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800552c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e4      	bne.n	8005518 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3308      	adds	r3, #8
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	623b      	str	r3, [r7, #32]
   return(result);
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	4b55      	ldr	r3, [pc, #340]	; (80056b8 <HAL_UART_IRQHandler+0x770>)
 8005562:	4013      	ands	r3, r2
 8005564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005572:	633a      	str	r2, [r7, #48]	; 0x30
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e3      	bne.n	800554e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2220      	movs	r2, #32
 800558a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0310 	bic.w	r3, r3, #16
 80055ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e4      	bne.n	800559a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f881 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055e2:	e063      	b.n	80056ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00e      	beq.n	800560e <HAL_UART_IRQHandler+0x6c6>
 80055f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005604:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 ff7e 	bl	8007508 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800560c:	e051      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d014      	beq.n	8005644 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800561a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800562a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005636:	2b00      	cmp	r3, #0
 8005638:	d03a      	beq.n	80056b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	4798      	blx	r3
    }
    return;
 8005642:	e035      	b.n	80056b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_UART_IRQHandler+0x71c>
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 fa0b 	bl	8006a78 <UART_EndTransmit_IT>
    return;
 8005662:	e026      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_UART_IRQHandler+0x73c>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 ff57 	bl	8007530 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005682:	e016      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d010      	beq.n	80056b2 <HAL_UART_IRQHandler+0x76a>
 8005690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005694:	2b00      	cmp	r3, #0
 8005696:	da0c      	bge.n	80056b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f001 ff3f 	bl	800751c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800569e:	e008      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056a0:	bf00      	nop
 80056a2:	e006      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80056a4:	bf00      	nop
 80056a6:	e004      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056a8:	bf00      	nop
 80056aa:	e002      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80056b0:	bf00      	nop
  }
}
 80056b2:	37e8      	adds	r7, #232	; 0xe8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	effffffe 	.word	0xeffffffe

080056bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005700:	b092      	sub	sp, #72	; 0x48
 8005702:	af00      	add	r7, sp, #0
 8005704:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	431a      	orrs	r2, r3
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4bbe      	ldr	r3, [pc, #760]	; (8005a24 <UART_SetConfig+0x328>)
 800572c:	4013      	ands	r3, r2
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	6812      	ldr	r2, [r2, #0]
 8005732:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005734:	430b      	orrs	r3, r1
 8005736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4ab3      	ldr	r2, [pc, #716]	; (8005a28 <UART_SetConfig+0x32c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005764:	4313      	orrs	r3, r2
 8005766:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	4baf      	ldr	r3, [pc, #700]	; (8005a2c <UART_SetConfig+0x330>)
 8005770:	4013      	ands	r3, r2
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005778:	430b      	orrs	r3, r1
 800577a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	f023 010f 	bic.w	r1, r3, #15
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4aa6      	ldr	r2, [pc, #664]	; (8005a30 <UART_SetConfig+0x334>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d177      	bne.n	800588c <UART_SetConfig+0x190>
 800579c:	4ba5      	ldr	r3, [pc, #660]	; (8005a34 <UART_SetConfig+0x338>)
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057a4:	2b28      	cmp	r3, #40	; 0x28
 80057a6:	d86d      	bhi.n	8005884 <UART_SetConfig+0x188>
 80057a8:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <UART_SetConfig+0xb4>)
 80057aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ae:	bf00      	nop
 80057b0:	08005855 	.word	0x08005855
 80057b4:	08005885 	.word	0x08005885
 80057b8:	08005885 	.word	0x08005885
 80057bc:	08005885 	.word	0x08005885
 80057c0:	08005885 	.word	0x08005885
 80057c4:	08005885 	.word	0x08005885
 80057c8:	08005885 	.word	0x08005885
 80057cc:	08005885 	.word	0x08005885
 80057d0:	0800585d 	.word	0x0800585d
 80057d4:	08005885 	.word	0x08005885
 80057d8:	08005885 	.word	0x08005885
 80057dc:	08005885 	.word	0x08005885
 80057e0:	08005885 	.word	0x08005885
 80057e4:	08005885 	.word	0x08005885
 80057e8:	08005885 	.word	0x08005885
 80057ec:	08005885 	.word	0x08005885
 80057f0:	08005865 	.word	0x08005865
 80057f4:	08005885 	.word	0x08005885
 80057f8:	08005885 	.word	0x08005885
 80057fc:	08005885 	.word	0x08005885
 8005800:	08005885 	.word	0x08005885
 8005804:	08005885 	.word	0x08005885
 8005808:	08005885 	.word	0x08005885
 800580c:	08005885 	.word	0x08005885
 8005810:	0800586d 	.word	0x0800586d
 8005814:	08005885 	.word	0x08005885
 8005818:	08005885 	.word	0x08005885
 800581c:	08005885 	.word	0x08005885
 8005820:	08005885 	.word	0x08005885
 8005824:	08005885 	.word	0x08005885
 8005828:	08005885 	.word	0x08005885
 800582c:	08005885 	.word	0x08005885
 8005830:	08005875 	.word	0x08005875
 8005834:	08005885 	.word	0x08005885
 8005838:	08005885 	.word	0x08005885
 800583c:	08005885 	.word	0x08005885
 8005840:	08005885 	.word	0x08005885
 8005844:	08005885 	.word	0x08005885
 8005848:	08005885 	.word	0x08005885
 800584c:	08005885 	.word	0x08005885
 8005850:	0800587d 	.word	0x0800587d
 8005854:	2301      	movs	r3, #1
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585a:	e326      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005862:	e322      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e31e      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e31a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005874:	2320      	movs	r3, #32
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e316      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e312      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e30e      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a69      	ldr	r2, [pc, #420]	; (8005a38 <UART_SetConfig+0x33c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d130      	bne.n	80058f8 <UART_SetConfig+0x1fc>
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <UART_SetConfig+0x338>)
 8005898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	2b05      	cmp	r3, #5
 80058a0:	d826      	bhi.n	80058f0 <UART_SetConfig+0x1f4>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <UART_SetConfig+0x1ac>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058c1 	.word	0x080058c1
 80058ac:	080058c9 	.word	0x080058c9
 80058b0:	080058d1 	.word	0x080058d1
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058e1 	.word	0x080058e1
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	2300      	movs	r3, #0
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c6:	e2f0      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ce:	e2ec      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e2e8      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e2e4      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058e0:	2320      	movs	r3, #32
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e2e0      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e2dc      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058f0:	2380      	movs	r3, #128	; 0x80
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e2d8      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a4f      	ldr	r2, [pc, #316]	; (8005a3c <UART_SetConfig+0x340>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d130      	bne.n	8005964 <UART_SetConfig+0x268>
 8005902:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <UART_SetConfig+0x338>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	2b05      	cmp	r3, #5
 800590c:	d826      	bhi.n	800595c <UART_SetConfig+0x260>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x218>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	0800592d 	.word	0x0800592d
 8005918:	08005935 	.word	0x08005935
 800591c:	0800593d 	.word	0x0800593d
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	2300      	movs	r3, #0
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005932:	e2ba      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800593a:	e2b6      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e2b2      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e2ae      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800594c:	2320      	movs	r3, #32
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e2aa      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e2a6      	b.n	8005eaa <UART_SetConfig+0x7ae>
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e2a2      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <UART_SetConfig+0x344>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d130      	bne.n	80059d0 <UART_SetConfig+0x2d4>
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <UART_SetConfig+0x338>)
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	2b05      	cmp	r3, #5
 8005978:	d826      	bhi.n	80059c8 <UART_SetConfig+0x2cc>
 800597a:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x284>)
 800597c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005980:	08005999 	.word	0x08005999
 8005984:	080059a1 	.word	0x080059a1
 8005988:	080059a9 	.word	0x080059a9
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	2300      	movs	r3, #0
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599e:	e284      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a6:	e280      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ae:	e27c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059b6:	e278      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059b8:	2320      	movs	r3, #32
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059be:	e274      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e270      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e26c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <UART_SetConfig+0x348>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d142      	bne.n	8005a60 <UART_SetConfig+0x364>
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <UART_SetConfig+0x338>)
 80059dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d838      	bhi.n	8005a58 <UART_SetConfig+0x35c>
 80059e6:	a201      	add	r2, pc, #4	; (adr r2, 80059ec <UART_SetConfig+0x2f0>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a05 	.word	0x08005a05
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a15 	.word	0x08005a15
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a49 	.word	0x08005a49
 8005a00:	08005a51 	.word	0x08005a51
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a0a:	e24e      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a12:	e24a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a1a:	e246      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e242      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a24:	cfff69f3 	.word	0xcfff69f3
 8005a28:	58000c00 	.word	0x58000c00
 8005a2c:	11fff4ff 	.word	0x11fff4ff
 8005a30:	40011000 	.word	0x40011000
 8005a34:	58024400 	.word	0x58024400
 8005a38:	40004400 	.word	0x40004400
 8005a3c:	40004800 	.word	0x40004800
 8005a40:	40004c00 	.word	0x40004c00
 8005a44:	40005000 	.word	0x40005000
 8005a48:	2320      	movs	r3, #32
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e22c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a50:	2340      	movs	r3, #64	; 0x40
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e228      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5e:	e224      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4ab1      	ldr	r2, [pc, #708]	; (8005d2c <UART_SetConfig+0x630>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d176      	bne.n	8005b58 <UART_SetConfig+0x45c>
 8005a6a:	4bb1      	ldr	r3, [pc, #708]	; (8005d30 <UART_SetConfig+0x634>)
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a72:	2b28      	cmp	r3, #40	; 0x28
 8005a74:	d86c      	bhi.n	8005b50 <UART_SetConfig+0x454>
 8005a76:	a201      	add	r2, pc, #4	; (adr r2, 8005a7c <UART_SetConfig+0x380>)
 8005a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7c:	08005b21 	.word	0x08005b21
 8005a80:	08005b51 	.word	0x08005b51
 8005a84:	08005b51 	.word	0x08005b51
 8005a88:	08005b51 	.word	0x08005b51
 8005a8c:	08005b51 	.word	0x08005b51
 8005a90:	08005b51 	.word	0x08005b51
 8005a94:	08005b51 	.word	0x08005b51
 8005a98:	08005b51 	.word	0x08005b51
 8005a9c:	08005b29 	.word	0x08005b29
 8005aa0:	08005b51 	.word	0x08005b51
 8005aa4:	08005b51 	.word	0x08005b51
 8005aa8:	08005b51 	.word	0x08005b51
 8005aac:	08005b51 	.word	0x08005b51
 8005ab0:	08005b51 	.word	0x08005b51
 8005ab4:	08005b51 	.word	0x08005b51
 8005ab8:	08005b51 	.word	0x08005b51
 8005abc:	08005b31 	.word	0x08005b31
 8005ac0:	08005b51 	.word	0x08005b51
 8005ac4:	08005b51 	.word	0x08005b51
 8005ac8:	08005b51 	.word	0x08005b51
 8005acc:	08005b51 	.word	0x08005b51
 8005ad0:	08005b51 	.word	0x08005b51
 8005ad4:	08005b51 	.word	0x08005b51
 8005ad8:	08005b51 	.word	0x08005b51
 8005adc:	08005b39 	.word	0x08005b39
 8005ae0:	08005b51 	.word	0x08005b51
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b51 	.word	0x08005b51
 8005af0:	08005b51 	.word	0x08005b51
 8005af4:	08005b51 	.word	0x08005b51
 8005af8:	08005b51 	.word	0x08005b51
 8005afc:	08005b41 	.word	0x08005b41
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	08005b51 	.word	0x08005b51
 8005b08:	08005b51 	.word	0x08005b51
 8005b0c:	08005b51 	.word	0x08005b51
 8005b10:	08005b51 	.word	0x08005b51
 8005b14:	08005b51 	.word	0x08005b51
 8005b18:	08005b51 	.word	0x08005b51
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b26:	e1c0      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2e:	e1bc      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b36:	e1b8      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e1b4      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b40:	2320      	movs	r3, #32
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e1b0      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b48:	2340      	movs	r3, #64	; 0x40
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e1ac      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b50:	2380      	movs	r3, #128	; 0x80
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e1a8      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a75      	ldr	r2, [pc, #468]	; (8005d34 <UART_SetConfig+0x638>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d130      	bne.n	8005bc4 <UART_SetConfig+0x4c8>
 8005b62:	4b73      	ldr	r3, [pc, #460]	; (8005d30 <UART_SetConfig+0x634>)
 8005b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d826      	bhi.n	8005bbc <UART_SetConfig+0x4c0>
 8005b6e:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <UART_SetConfig+0x478>)
 8005b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b74:	08005b8d 	.word	0x08005b8d
 8005b78:	08005b95 	.word	0x08005b95
 8005b7c:	08005b9d 	.word	0x08005b9d
 8005b80:	08005ba5 	.word	0x08005ba5
 8005b84:	08005bad 	.word	0x08005bad
 8005b88:	08005bb5 	.word	0x08005bb5
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e18a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b94:	2304      	movs	r3, #4
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e186      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e182      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005ba4:	2310      	movs	r3, #16
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e17e      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005bac:	2320      	movs	r3, #32
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e17a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e176      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e172      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5b      	ldr	r2, [pc, #364]	; (8005d38 <UART_SetConfig+0x63c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d130      	bne.n	8005c30 <UART_SetConfig+0x534>
 8005bce:	4b58      	ldr	r3, [pc, #352]	; (8005d30 <UART_SetConfig+0x634>)
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d826      	bhi.n	8005c28 <UART_SetConfig+0x52c>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x4e4>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005bf9 	.word	0x08005bf9
 8005be4:	08005c01 	.word	0x08005c01
 8005be8:	08005c09 	.word	0x08005c09
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c19 	.word	0x08005c19
 8005bf4:	08005c21 	.word	0x08005c21
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e154      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c00:	2304      	movs	r3, #4
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e150      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c08:	2308      	movs	r3, #8
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e14c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c10:	2310      	movs	r3, #16
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e148      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c18:	2320      	movs	r3, #32
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e144      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c20:	2340      	movs	r3, #64	; 0x40
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e140      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c28:	2380      	movs	r3, #128	; 0x80
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2e:	e13c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a41      	ldr	r2, [pc, #260]	; (8005d3c <UART_SetConfig+0x640>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f040 8082 	bne.w	8005d40 <UART_SetConfig+0x644>
 8005c3c:	4b3c      	ldr	r3, [pc, #240]	; (8005d30 <UART_SetConfig+0x634>)
 8005c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c44:	2b28      	cmp	r3, #40	; 0x28
 8005c46:	d86d      	bhi.n	8005d24 <UART_SetConfig+0x628>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <UART_SetConfig+0x554>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005cf5 	.word	0x08005cf5
 8005c54:	08005d25 	.word	0x08005d25
 8005c58:	08005d25 	.word	0x08005d25
 8005c5c:	08005d25 	.word	0x08005d25
 8005c60:	08005d25 	.word	0x08005d25
 8005c64:	08005d25 	.word	0x08005d25
 8005c68:	08005d25 	.word	0x08005d25
 8005c6c:	08005d25 	.word	0x08005d25
 8005c70:	08005cfd 	.word	0x08005cfd
 8005c74:	08005d25 	.word	0x08005d25
 8005c78:	08005d25 	.word	0x08005d25
 8005c7c:	08005d25 	.word	0x08005d25
 8005c80:	08005d25 	.word	0x08005d25
 8005c84:	08005d25 	.word	0x08005d25
 8005c88:	08005d25 	.word	0x08005d25
 8005c8c:	08005d25 	.word	0x08005d25
 8005c90:	08005d05 	.word	0x08005d05
 8005c94:	08005d25 	.word	0x08005d25
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	08005d25 	.word	0x08005d25
 8005ca0:	08005d25 	.word	0x08005d25
 8005ca4:	08005d25 	.word	0x08005d25
 8005ca8:	08005d25 	.word	0x08005d25
 8005cac:	08005d25 	.word	0x08005d25
 8005cb0:	08005d0d 	.word	0x08005d0d
 8005cb4:	08005d25 	.word	0x08005d25
 8005cb8:	08005d25 	.word	0x08005d25
 8005cbc:	08005d25 	.word	0x08005d25
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005d25 	.word	0x08005d25
 8005cc8:	08005d25 	.word	0x08005d25
 8005ccc:	08005d25 	.word	0x08005d25
 8005cd0:	08005d15 	.word	0x08005d15
 8005cd4:	08005d25 	.word	0x08005d25
 8005cd8:	08005d25 	.word	0x08005d25
 8005cdc:	08005d25 	.word	0x08005d25
 8005ce0:	08005d25 	.word	0x08005d25
 8005ce4:	08005d25 	.word	0x08005d25
 8005ce8:	08005d25 	.word	0x08005d25
 8005cec:	08005d25 	.word	0x08005d25
 8005cf0:	08005d1d 	.word	0x08005d1d
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e0d6      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e0d2      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e0ce      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e0ca      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d14:	2320      	movs	r3, #32
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e0c6      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d1c:	2340      	movs	r3, #64	; 0x40
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e0c2      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2a:	e0be      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005d2c:	40011400 	.word	0x40011400
 8005d30:	58024400 	.word	0x58024400
 8005d34:	40007800 	.word	0x40007800
 8005d38:	40007c00 	.word	0x40007c00
 8005d3c:	40011800 	.word	0x40011800
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4aad      	ldr	r2, [pc, #692]	; (8005ffc <UART_SetConfig+0x900>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d176      	bne.n	8005e38 <UART_SetConfig+0x73c>
 8005d4a:	4bad      	ldr	r3, [pc, #692]	; (8006000 <UART_SetConfig+0x904>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d52:	2b28      	cmp	r3, #40	; 0x28
 8005d54:	d86c      	bhi.n	8005e30 <UART_SetConfig+0x734>
 8005d56:	a201      	add	r2, pc, #4	; (adr r2, 8005d5c <UART_SetConfig+0x660>)
 8005d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5c:	08005e01 	.word	0x08005e01
 8005d60:	08005e31 	.word	0x08005e31
 8005d64:	08005e31 	.word	0x08005e31
 8005d68:	08005e31 	.word	0x08005e31
 8005d6c:	08005e31 	.word	0x08005e31
 8005d70:	08005e31 	.word	0x08005e31
 8005d74:	08005e31 	.word	0x08005e31
 8005d78:	08005e31 	.word	0x08005e31
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e31 	.word	0x08005e31
 8005d84:	08005e31 	.word	0x08005e31
 8005d88:	08005e31 	.word	0x08005e31
 8005d8c:	08005e31 	.word	0x08005e31
 8005d90:	08005e31 	.word	0x08005e31
 8005d94:	08005e31 	.word	0x08005e31
 8005d98:	08005e31 	.word	0x08005e31
 8005d9c:	08005e11 	.word	0x08005e11
 8005da0:	08005e31 	.word	0x08005e31
 8005da4:	08005e31 	.word	0x08005e31
 8005da8:	08005e31 	.word	0x08005e31
 8005dac:	08005e31 	.word	0x08005e31
 8005db0:	08005e31 	.word	0x08005e31
 8005db4:	08005e31 	.word	0x08005e31
 8005db8:	08005e31 	.word	0x08005e31
 8005dbc:	08005e19 	.word	0x08005e19
 8005dc0:	08005e31 	.word	0x08005e31
 8005dc4:	08005e31 	.word	0x08005e31
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005e31 	.word	0x08005e31
 8005dd0:	08005e31 	.word	0x08005e31
 8005dd4:	08005e31 	.word	0x08005e31
 8005dd8:	08005e31 	.word	0x08005e31
 8005ddc:	08005e21 	.word	0x08005e21
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e31 	.word	0x08005e31
 8005de8:	08005e31 	.word	0x08005e31
 8005dec:	08005e31 	.word	0x08005e31
 8005df0:	08005e31 	.word	0x08005e31
 8005df4:	08005e31 	.word	0x08005e31
 8005df8:	08005e31 	.word	0x08005e31
 8005dfc:	08005e29 	.word	0x08005e29
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e050      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e04c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e048      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e044      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e20:	2320      	movs	r3, #32
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e26:	e040      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2e:	e03c      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e30:	2380      	movs	r3, #128	; 0x80
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e36:	e038      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a71      	ldr	r2, [pc, #452]	; (8006004 <UART_SetConfig+0x908>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d130      	bne.n	8005ea4 <UART_SetConfig+0x7a8>
 8005e42:	4b6f      	ldr	r3, [pc, #444]	; (8006000 <UART_SetConfig+0x904>)
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b05      	cmp	r3, #5
 8005e4c:	d826      	bhi.n	8005e9c <UART_SetConfig+0x7a0>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0x758>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e6d 	.word	0x08005e6d
 8005e58:	08005e75 	.word	0x08005e75
 8005e5c:	08005e7d 	.word	0x08005e7d
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e01a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e016      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e012      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e00e      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e00a      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e006      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e002      	b.n	8005eaa <UART_SetConfig+0x7ae>
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a55      	ldr	r2, [pc, #340]	; (8006004 <UART_SetConfig+0x908>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	f040 80f8 	bne.w	80060a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	dc46      	bgt.n	8005f4c <UART_SetConfig+0x850>
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	db75      	blt.n	8005fae <UART_SetConfig+0x8b2>
 8005ec2:	3b02      	subs	r3, #2
 8005ec4:	2b1e      	cmp	r3, #30
 8005ec6:	d872      	bhi.n	8005fae <UART_SetConfig+0x8b2>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0x7d4>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005f53 	.word	0x08005f53
 8005ed4:	08005faf 	.word	0x08005faf
 8005ed8:	08005f5b 	.word	0x08005f5b
 8005edc:	08005faf 	.word	0x08005faf
 8005ee0:	08005faf 	.word	0x08005faf
 8005ee4:	08005faf 	.word	0x08005faf
 8005ee8:	08005f6b 	.word	0x08005f6b
 8005eec:	08005faf 	.word	0x08005faf
 8005ef0:	08005faf 	.word	0x08005faf
 8005ef4:	08005faf 	.word	0x08005faf
 8005ef8:	08005faf 	.word	0x08005faf
 8005efc:	08005faf 	.word	0x08005faf
 8005f00:	08005faf 	.word	0x08005faf
 8005f04:	08005faf 	.word	0x08005faf
 8005f08:	08005f7b 	.word	0x08005f7b
 8005f0c:	08005faf 	.word	0x08005faf
 8005f10:	08005faf 	.word	0x08005faf
 8005f14:	08005faf 	.word	0x08005faf
 8005f18:	08005faf 	.word	0x08005faf
 8005f1c:	08005faf 	.word	0x08005faf
 8005f20:	08005faf 	.word	0x08005faf
 8005f24:	08005faf 	.word	0x08005faf
 8005f28:	08005faf 	.word	0x08005faf
 8005f2c:	08005faf 	.word	0x08005faf
 8005f30:	08005faf 	.word	0x08005faf
 8005f34:	08005faf 	.word	0x08005faf
 8005f38:	08005faf 	.word	0x08005faf
 8005f3c:	08005faf 	.word	0x08005faf
 8005f40:	08005faf 	.word	0x08005faf
 8005f44:	08005faf 	.word	0x08005faf
 8005f48:	08005fa1 	.word	0x08005fa1
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d02a      	beq.n	8005fa6 <UART_SetConfig+0x8aa>
 8005f50:	e02d      	b.n	8005fae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f52:	f7fe faad 	bl	80044b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f58:	e02f      	b.n	8005fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fabc 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f68:	e027      	b.n	8005fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f6a:	f107 0318 	add.w	r3, r7, #24
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fc08 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f78:	e01f      	b.n	8005fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f7a:	4b21      	ldr	r3, [pc, #132]	; (8006000 <UART_SetConfig+0x904>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d009      	beq.n	8005f9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f86:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <UART_SetConfig+0x904>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <UART_SetConfig+0x90c>)
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f98:	e00f      	b.n	8005fba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f9a:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <UART_SetConfig+0x90c>)
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f9e:	e00c      	b.n	8005fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <UART_SetConfig+0x910>)
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fa4:	e009      	b.n	8005fba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fac:	e005      	b.n	8005fba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005fb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 81ee 	beq.w	800639e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <UART_SetConfig+0x914>)
 8005fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fd4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d305      	bcc.n	8005ff2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d910      	bls.n	8006014 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ff8:	e1d1      	b.n	800639e <UART_SetConfig+0xca2>
 8005ffa:	bf00      	nop
 8005ffc:	40011c00 	.word	0x40011c00
 8006000:	58024400 	.word	0x58024400
 8006004:	58000c00 	.word	0x58000c00
 8006008:	03d09000 	.word	0x03d09000
 800600c:	003d0900 	.word	0x003d0900
 8006010:	080077dc 	.word	0x080077dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	2200      	movs	r2, #0
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	60fa      	str	r2, [r7, #12]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	4ac0      	ldr	r2, [pc, #768]	; (8006324 <UART_SetConfig+0xc28>)
 8006022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006026:	b29b      	uxth	r3, r3
 8006028:	2200      	movs	r2, #0
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006036:	f7fa f959 	bl	80002ec <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4610      	mov	r0, r2
 8006040:	4619      	mov	r1, r3
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	020b      	lsls	r3, r1, #8
 800604c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006050:	0202      	lsls	r2, r0, #8
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	6849      	ldr	r1, [r1, #4]
 8006056:	0849      	lsrs	r1, r1, #1
 8006058:	2000      	movs	r0, #0
 800605a:	460c      	mov	r4, r1
 800605c:	4605      	mov	r5, r0
 800605e:	eb12 0804 	adds.w	r8, r2, r4
 8006062:	eb43 0905 	adc.w	r9, r3, r5
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	469a      	mov	sl, r3
 800606e:	4693      	mov	fp, r2
 8006070:	4652      	mov	r2, sl
 8006072:	465b      	mov	r3, fp
 8006074:	4640      	mov	r0, r8
 8006076:	4649      	mov	r1, r9
 8006078:	f7fa f938 	bl	80002ec <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608a:	d308      	bcc.n	800609e <UART_SetConfig+0x9a2>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006092:	d204      	bcs.n	800609e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e17f      	b.n	800639e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060a4:	e17b      	b.n	800639e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ae:	f040 80bd 	bne.w	800622c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80060b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060b6:	2b20      	cmp	r3, #32
 80060b8:	dc48      	bgt.n	800614c <UART_SetConfig+0xa50>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db7b      	blt.n	80061b6 <UART_SetConfig+0xaba>
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d879      	bhi.n	80061b6 <UART_SetConfig+0xaba>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x9cc>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	08006153 	.word	0x08006153
 80060cc:	0800615b 	.word	0x0800615b
 80060d0:	080061b7 	.word	0x080061b7
 80060d4:	080061b7 	.word	0x080061b7
 80060d8:	08006163 	.word	0x08006163
 80060dc:	080061b7 	.word	0x080061b7
 80060e0:	080061b7 	.word	0x080061b7
 80060e4:	080061b7 	.word	0x080061b7
 80060e8:	08006173 	.word	0x08006173
 80060ec:	080061b7 	.word	0x080061b7
 80060f0:	080061b7 	.word	0x080061b7
 80060f4:	080061b7 	.word	0x080061b7
 80060f8:	080061b7 	.word	0x080061b7
 80060fc:	080061b7 	.word	0x080061b7
 8006100:	080061b7 	.word	0x080061b7
 8006104:	080061b7 	.word	0x080061b7
 8006108:	08006183 	.word	0x08006183
 800610c:	080061b7 	.word	0x080061b7
 8006110:	080061b7 	.word	0x080061b7
 8006114:	080061b7 	.word	0x080061b7
 8006118:	080061b7 	.word	0x080061b7
 800611c:	080061b7 	.word	0x080061b7
 8006120:	080061b7 	.word	0x080061b7
 8006124:	080061b7 	.word	0x080061b7
 8006128:	080061b7 	.word	0x080061b7
 800612c:	080061b7 	.word	0x080061b7
 8006130:	080061b7 	.word	0x080061b7
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061b7 	.word	0x080061b7
 800613c:	080061b7 	.word	0x080061b7
 8006140:	080061b7 	.word	0x080061b7
 8006144:	080061b7 	.word	0x080061b7
 8006148:	080061a9 	.word	0x080061a9
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d02e      	beq.n	80061ae <UART_SetConfig+0xab2>
 8006150:	e031      	b.n	80061b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006152:	f7fc ffc3 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8006156:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006158:	e033      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800615a:	f7fc ffd5 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 800615e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006160:	e02f      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe f9b8 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006170:	e027      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006172:	f107 0318 	add.w	r3, r7, #24
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fb04 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006180:	e01f      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006182:	4b69      	ldr	r3, [pc, #420]	; (8006328 <UART_SetConfig+0xc2c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800618e:	4b66      	ldr	r3, [pc, #408]	; (8006328 <UART_SetConfig+0xc2c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	4a64      	ldr	r2, [pc, #400]	; (800632c <UART_SetConfig+0xc30>)
 800619a:	fa22 f303 	lsr.w	r3, r2, r3
 800619e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061a0:	e00f      	b.n	80061c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80061a2:	4b62      	ldr	r3, [pc, #392]	; (800632c <UART_SetConfig+0xc30>)
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061a6:	e00c      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061a8:	4b61      	ldr	r3, [pc, #388]	; (8006330 <UART_SetConfig+0xc34>)
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061ac:	e009      	b.n	80061c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b4:	e005      	b.n	80061c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80ea 	beq.w	800639e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	4a55      	ldr	r2, [pc, #340]	; (8006324 <UART_SetConfig+0xc28>)
 80061d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061dc:	005a      	lsls	r2, r3, #1
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	441a      	add	r2, r3
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	2b0f      	cmp	r3, #15
 80061f4:	d916      	bls.n	8006224 <UART_SetConfig+0xb28>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fc:	d212      	bcs.n	8006224 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	b29b      	uxth	r3, r3
 8006202:	f023 030f 	bic.w	r3, r3, #15
 8006206:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	b29a      	uxth	r2, r3
 8006214:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006216:	4313      	orrs	r3, r2
 8006218:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	e0bc      	b.n	800639e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800622a:	e0b8      	b.n	800639e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800622c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006230:	2b20      	cmp	r3, #32
 8006232:	dc4b      	bgt.n	80062cc <UART_SetConfig+0xbd0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	f2c0 8087 	blt.w	8006348 <UART_SetConfig+0xc4c>
 800623a:	2b20      	cmp	r3, #32
 800623c:	f200 8084 	bhi.w	8006348 <UART_SetConfig+0xc4c>
 8006240:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0xb4c>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	080062d3 	.word	0x080062d3
 800624c:	080062db 	.word	0x080062db
 8006250:	08006349 	.word	0x08006349
 8006254:	08006349 	.word	0x08006349
 8006258:	080062e3 	.word	0x080062e3
 800625c:	08006349 	.word	0x08006349
 8006260:	08006349 	.word	0x08006349
 8006264:	08006349 	.word	0x08006349
 8006268:	080062f3 	.word	0x080062f3
 800626c:	08006349 	.word	0x08006349
 8006270:	08006349 	.word	0x08006349
 8006274:	08006349 	.word	0x08006349
 8006278:	08006349 	.word	0x08006349
 800627c:	08006349 	.word	0x08006349
 8006280:	08006349 	.word	0x08006349
 8006284:	08006349 	.word	0x08006349
 8006288:	08006303 	.word	0x08006303
 800628c:	08006349 	.word	0x08006349
 8006290:	08006349 	.word	0x08006349
 8006294:	08006349 	.word	0x08006349
 8006298:	08006349 	.word	0x08006349
 800629c:	08006349 	.word	0x08006349
 80062a0:	08006349 	.word	0x08006349
 80062a4:	08006349 	.word	0x08006349
 80062a8:	08006349 	.word	0x08006349
 80062ac:	08006349 	.word	0x08006349
 80062b0:	08006349 	.word	0x08006349
 80062b4:	08006349 	.word	0x08006349
 80062b8:	08006349 	.word	0x08006349
 80062bc:	08006349 	.word	0x08006349
 80062c0:	08006349 	.word	0x08006349
 80062c4:	08006349 	.word	0x08006349
 80062c8:	0800633b 	.word	0x0800633b
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d037      	beq.n	8006340 <UART_SetConfig+0xc44>
 80062d0:	e03a      	b.n	8006348 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d2:	f7fc ff03 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80062d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062d8:	e03c      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062da:	f7fc ff15 	bl	8003108 <HAL_RCC_GetPCLK2Freq>
 80062de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062e0:	e038      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f8f8 	bl	80044dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062f0:	e030      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f2:	f107 0318 	add.w	r3, r7, #24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fa44 	bl	8004784 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006300:	e028      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006302:	4b09      	ldr	r3, [pc, #36]	; (8006328 <UART_SetConfig+0xc2c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800630e:	4b06      	ldr	r3, [pc, #24]	; (8006328 <UART_SetConfig+0xc2c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	08db      	lsrs	r3, r3, #3
 8006314:	f003 0303 	and.w	r3, r3, #3
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <UART_SetConfig+0xc30>)
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006320:	e018      	b.n	8006354 <UART_SetConfig+0xc58>
 8006322:	bf00      	nop
 8006324:	080077dc 	.word	0x080077dc
 8006328:	58024400 	.word	0x58024400
 800632c:	03d09000 	.word	0x03d09000
 8006330:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006334:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <UART_SetConfig+0xccc>)
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006338:	e00c      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800633a:	4b24      	ldr	r3, [pc, #144]	; (80063cc <UART_SetConfig+0xcd0>)
 800633c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800633e:	e009      	b.n	8006354 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006346:	e005      	b.n	8006354 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006352:	bf00      	nop
    }

    if (pclk != 0U)
 8006354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d021      	beq.n	800639e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <UART_SetConfig+0xcd4>)
 8006360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006364:	461a      	mov	r2, r3
 8006366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006368:	fbb3 f2f2 	udiv	r2, r3, r2
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	441a      	add	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	fbb2 f3f3 	udiv	r3, r2, r3
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	2b0f      	cmp	r3, #15
 8006382:	d909      	bls.n	8006398 <UART_SetConfig+0xc9c>
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638a:	d205      	bcs.n	8006398 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	b29a      	uxth	r2, r3
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e002      	b.n	800639e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2200      	movs	r2, #0
 80063b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80063ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3748      	adds	r7, #72	; 0x48
 80063c2:	46bd      	mov	sp, r7
 80063c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c8:	03d09000 	.word	0x03d09000
 80063cc:	003d0900 	.word	0x003d0900
 80063d0:	080077dc 	.word	0x080077dc

080063d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	f003 0310 	and.w	r3, r3, #16
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01a      	beq.n	80064ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064d2:	d10a      	bne.n	80064ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	605a      	str	r2, [r3, #4]
  }
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b098      	sub	sp, #96	; 0x60
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006528:	f7fa fd64 	bl	8000ff4 <HAL_GetTick>
 800652c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0308 	and.w	r3, r3, #8
 8006538:	2b08      	cmp	r3, #8
 800653a:	d12f      	bne.n	800659c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800653c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006544:	2200      	movs	r2, #0
 8006546:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f88e 	bl	800666c <UART_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d022      	beq.n	800659c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006574:	647b      	str	r3, [r7, #68]	; 0x44
 8006576:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800657a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e6      	bne.n	8006556 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e063      	b.n	8006664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0304 	and.w	r3, r3, #4
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	d149      	bne.n	800663e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b2:	2200      	movs	r2, #0
 80065b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f857 	bl	800666c <UART_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d03c      	beq.n	800663e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	623b      	str	r3, [r7, #32]
   return(result);
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
 80065e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e6      	bne.n	80065c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	60fb      	str	r3, [r7, #12]
   return(result);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3308      	adds	r3, #8
 8006614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006616:	61fa      	str	r2, [r7, #28]
 8006618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	69b9      	ldr	r1, [r7, #24]
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	617b      	str	r3, [r7, #20]
   return(result);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e012      	b.n	8006664 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3758      	adds	r7, #88	; 0x58
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4613      	mov	r3, r2
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667c:	e049      	b.n	8006712 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006684:	d045      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006686:	f7fa fcb5 	bl	8000ff4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	429a      	cmp	r2, r3
 8006694:	d302      	bcc.n	800669c <UART_WaitOnFlagUntilTimeout+0x30>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e048      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d031      	beq.n	8006712 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d110      	bne.n	80066de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2208      	movs	r2, #8
 80066c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f95b 	bl	8006980 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2208      	movs	r2, #8
 80066ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e029      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ec:	d111      	bne.n	8006712 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f941 	bl	8006980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e00f      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4013      	ands	r3, r2
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	bf0c      	ite	eq
 8006722:	2301      	moveq	r3, #1
 8006724:	2300      	movne	r3, #0
 8006726:	b2db      	uxtb	r3, r3
 8006728:	461a      	mov	r2, r3
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	429a      	cmp	r2, r3
 800672e:	d0a6      	beq.n	800667e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800673c:	b480      	push	{r7}
 800673e:	b0a3      	sub	sp, #140	; 0x8c
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	88fa      	ldrh	r2, [r7, #6]
 8006754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676e:	d10e      	bne.n	800678e <UART_Start_Receive_IT+0x52>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d105      	bne.n	8006784 <UART_Start_Receive_IT+0x48>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800677e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006782:	e02d      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800678c:	e028      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10d      	bne.n	80067b2 <UART_Start_Receive_IT+0x76>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <UART_Start_Receive_IT+0x6c>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067a6:	e01b      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	227f      	movs	r2, #127	; 0x7f
 80067ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067b0:	e016      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ba:	d10d      	bne.n	80067d8 <UART_Start_Receive_IT+0x9c>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d104      	bne.n	80067ce <UART_Start_Receive_IT+0x92>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	227f      	movs	r2, #127	; 0x7f
 80067c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067cc:	e008      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	223f      	movs	r2, #63	; 0x3f
 80067d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067d6:	e003      	b.n	80067e0 <UART_Start_Receive_IT+0xa4>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2222      	movs	r2, #34	; 0x22
 80067ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3308      	adds	r3, #8
 80067f6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006814:	673a      	str	r2, [r7, #112]	; 0x70
 8006816:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800681a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e3      	bne.n	80067f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006830:	d14f      	bne.n	80068d2 <UART_Start_Receive_IT+0x196>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	429a      	cmp	r2, r3
 800683c:	d349      	bcc.n	80068d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d107      	bne.n	8006858 <UART_Start_Receive_IT+0x11c>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4a47      	ldr	r2, [pc, #284]	; (8006970 <UART_Start_Receive_IT+0x234>)
 8006854:	675a      	str	r2, [r3, #116]	; 0x74
 8006856:	e002      	b.n	800685e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4a46      	ldr	r2, [pc, #280]	; (8006974 <UART_Start_Receive_IT+0x238>)
 800685c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01a      	beq.n	800689c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800688a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800688e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e4      	bne.n	8006866 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80068bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_Start_Receive_IT+0x160>
 80068d0:	e046      	b.n	8006960 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068da:	d107      	bne.n	80068ec <UART_Start_Receive_IT+0x1b0>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a24      	ldr	r2, [pc, #144]	; (8006978 <UART_Start_Receive_IT+0x23c>)
 80068e8:	675a      	str	r2, [r3, #116]	; 0x74
 80068ea:	e002      	b.n	80068f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a23      	ldr	r2, [pc, #140]	; (800697c <UART_Start_Receive_IT+0x240>)
 80068f0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d019      	beq.n	800692e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800690e:	677b      	str	r3, [r7, #116]	; 0x74
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e6      	bne.n	80068fa <UART_Start_Receive_IT+0x1be>
 800692c:	e018      	b.n	8006960 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	613b      	str	r3, [r7, #16]
   return(result);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f043 0320 	orr.w	r3, r3, #32
 8006942:	67bb      	str	r3, [r7, #120]	; 0x78
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	69f9      	ldr	r1, [r7, #28]
 8006952:	6a3a      	ldr	r2, [r7, #32]
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	61bb      	str	r3, [r7, #24]
   return(result);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e6      	bne.n	800692e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	378c      	adds	r7, #140	; 0x8c
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	080071a1 	.word	0x080071a1
 8006974:	08006e41 	.word	0x08006e41
 8006978:	08006c89 	.word	0x08006c89
 800697c:	08006ad1 	.word	0x08006ad1

08006980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006980:	b480      	push	{r7}
 8006982:	b095      	sub	sp, #84	; 0x54
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800699c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	643b      	str	r3, [r7, #64]	; 0x40
 80069a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <UART_EndRxTransfer+0xc8>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d118      	bne.n	8006a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0310 	bic.w	r3, r3, #16
 8006a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	613b      	str	r3, [r7, #16]
   return(result);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a3c:	bf00      	nop
 8006a3e:	3754      	adds	r7, #84	; 0x54
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	effffffe 	.word	0xeffffffe

08006a4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f7fe fe30 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a70:	bf00      	nop
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a94:	61fb      	str	r3, [r7, #28]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6979      	ldr	r1, [r7, #20]
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e6      	bne.n	8006a80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7fe fdfb 	bl	80056bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ac6:	bf00      	nop
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b09c      	sub	sp, #112	; 0x70
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ade:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae8:	2b22      	cmp	r3, #34	; 0x22
 8006aea:	f040 80be 	bne.w	8006c6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006af8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006afc:	b2d9      	uxtb	r1, r3
 8006afe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	400a      	ands	r2, r1
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 80a1 	bne.w	8006c7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	e853 3f00 	ldrex	r3, [r3]
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	667b      	str	r3, [r7, #100]	; 0x64
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8006b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b92:	e841 2300 	strex	r3, r2, [r1]
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1e5      	bne.n	8006b6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a33      	ldr	r2, [pc, #204]	; (8006c84 <UART_RxISR_8BIT+0x1b4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d01f      	beq.n	8006bfc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d018      	beq.n	8006bfc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bde:	663b      	str	r3, [r7, #96]	; 0x60
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	461a      	mov	r2, r3
 8006be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf0:	e841 2300 	strex	r3, r2, [r1]
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1e6      	bne.n	8006bca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d12e      	bne.n	8006c62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	69b9      	ldr	r1, [r7, #24]
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	617b      	str	r3, [r7, #20]
   return(result);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d103      	bne.n	8006c52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fe fd42 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c60:	e00b      	b.n	8006c7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7f9 fe84 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 8006c68:	e007      	b.n	8006c7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0208 	orr.w	r2, r2, #8
 8006c78:	619a      	str	r2, [r3, #24]
}
 8006c7a:	bf00      	nop
 8006c7c:	3770      	adds	r7, #112	; 0x70
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	58000c00 	.word	0x58000c00

08006c88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b09c      	sub	sp, #112	; 0x70
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca0:	2b22      	cmp	r3, #34	; 0x22
 8006ca2:	f040 80be 	bne.w	8006e22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006cb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006cba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	1c9a      	adds	r2, r3, #2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 80a1 	bne.w	8006e32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d04:	667b      	str	r3, [r7, #100]	; 0x64
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006d10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e6      	bne.n	8006cf0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d42:	643a      	str	r2, [r7, #64]	; 0x40
 8006d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <UART_RxISR_16BIT+0x1b4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d01f      	beq.n	8006db4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d018      	beq.n	8006db4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e6      	bne.n	8006d82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d12e      	bne.n	8006e1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f023 0310 	bic.w	r3, r3, #16
 8006dd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6979      	ldr	r1, [r7, #20]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	613b      	str	r3, [r7, #16]
   return(result);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e6      	bne.n	8006dc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b10      	cmp	r3, #16
 8006e00:	d103      	bne.n	8006e0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2210      	movs	r2, #16
 8006e08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fe fc66 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e18:	e00b      	b.n	8006e32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7f9 fda8 	bl	8000970 <HAL_UART_RxCpltCallback>
}
 8006e20:	e007      	b.n	8006e32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	699a      	ldr	r2, [r3, #24]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0208 	orr.w	r2, r2, #8
 8006e30:	619a      	str	r2, [r3, #24]
}
 8006e32:	bf00      	nop
 8006e34:	3770      	adds	r7, #112	; 0x70
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	58000c00 	.word	0x58000c00

08006e40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b0ac      	sub	sp, #176	; 0xb0
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e76:	2b22      	cmp	r3, #34	; 0x22
 8006e78:	f040 8180 	bne.w	800717c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e86:	e123      	b.n	80070d0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006e96:	b2d9      	uxtb	r1, r3
 8006e98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d053      	beq.n	8006f82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f00:	f043 0201 	orr.w	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d011      	beq.n	8006f3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2202      	movs	r2, #2
 8006f28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f30:	f043 0204 	orr.w	r2, r3, #4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d011      	beq.n	8006f6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2204      	movs	r2, #4
 8006f58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f60:	f043 0202 	orr.w	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d006      	beq.n	8006f82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fe fbab 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 80a0 	bne.w	80070d0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fb4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006fb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e4      	bne.n	8006f90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fd0:	e853 3f00 	ldrex	r3, [r3]
 8006fd4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd8:	4b6e      	ldr	r3, [pc, #440]	; (8007194 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fea:	66ba      	str	r2, [r7, #104]	; 0x68
 8006fec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006ff0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e3      	bne.n	8006fc6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a60      	ldr	r2, [pc, #384]	; (8007198 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d021      	beq.n	8007060 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01a      	beq.n	8007060 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800703e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800704c:	657b      	str	r3, [r7, #84]	; 0x54
 800704e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007052:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800705a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e4      	bne.n	800702a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d130      	bne.n	80070ca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
 8007092:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007096:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e4      	bne.n	800706e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f003 0310 	and.w	r3, r3, #16
 80070ae:	2b10      	cmp	r3, #16
 80070b0:	d103      	bne.n	80070ba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2210      	movs	r2, #16
 80070b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fe fb0e 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
 80070c8:	e002      	b.n	80070d0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7f9 fc50 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d006      	beq.n	80070e6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80070d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f47f aed1 	bne.w	8006e88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d049      	beq.n	800718c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007102:	429a      	cmp	r2, r3
 8007104:	d242      	bcs.n	800718c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	61fb      	str	r3, [r7, #28]
   return(result);
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800712a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800712c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e3      	bne.n	8007106 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a16      	ldr	r2, [pc, #88]	; (800719c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007142:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	60bb      	str	r3, [r7, #8]
   return(result);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	f043 0320 	orr.w	r3, r3, #32
 8007158:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007166:	61bb      	str	r3, [r7, #24]
 8007168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6979      	ldr	r1, [r7, #20]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	613b      	str	r3, [r7, #16]
   return(result);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e4      	bne.n	8007144 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800717a:	e007      	b.n	800718c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0208 	orr.w	r2, r2, #8
 800718a:	619a      	str	r2, [r3, #24]
}
 800718c:	bf00      	nop
 800718e:	37b0      	adds	r7, #176	; 0xb0
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	effffffe 	.word	0xeffffffe
 8007198:	58000c00 	.word	0x58000c00
 800719c:	08006ad1 	.word	0x08006ad1

080071a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0ae      	sub	sp, #184	; 0xb8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d6:	2b22      	cmp	r3, #34	; 0x22
 80071d8:	f040 8184 	bne.w	80074e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071e6:	e127      	b.n	8007438 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80071fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80071fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007202:	4013      	ands	r3, r2
 8007204:	b29a      	uxth	r2, r3
 8007206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800720a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b01      	subs	r3, #1
 8007220:	b29a      	uxth	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b00      	cmp	r3, #0
 800723c:	d053      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800723e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	d011      	beq.n	800726e <UART_RxISR_16BIT_FIFOEN+0xce>
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2201      	movs	r2, #1
 800725c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007264:	f043 0201 	orr.w	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800726e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d011      	beq.n	800729e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800727a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2202      	movs	r2, #2
 800728c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f043 0204 	orr.w	r2, r3, #4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800729e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80072aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2204      	movs	r2, #4
 80072bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c4:	f043 0202 	orr.w	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d006      	beq.n	80072e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fe f9f9 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f040 80a2 	bne.w	8007438 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800731a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800731e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e2      	bne.n	80072f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800733e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007340:	4b6e      	ldr	r3, [pc, #440]	; (80074fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007342:	4013      	ands	r3, r2
 8007344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007352:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007354:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007358:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e3      	bne.n	800732e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2220      	movs	r2, #32
 800736a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a60      	ldr	r2, [pc, #384]	; (8007500 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d021      	beq.n	80073c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d01a      	beq.n	80073c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	461a      	mov	r2, r3
 80073b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80073b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e4      	bne.n	8007392 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d130      	bne.n	8007432 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	f023 0310 	bic.w	r3, r3, #16
 80073ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
 80073fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e4      	bne.n	80073d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f003 0310 	and.w	r3, r3, #16
 8007416:	2b10      	cmp	r3, #16
 8007418:	d103      	bne.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2210      	movs	r2, #16
 8007420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7fe f95a 	bl	80056e4 <HAL_UARTEx_RxEventCallback>
 8007430:	e002      	b.n	8007438 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 fa9c 	bl	8000970 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007438:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800743c:	2b00      	cmp	r3, #0
 800743e:	d006      	beq.n	800744e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007440:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	f47f aecd 	bne.w	80071e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007454:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007458:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800745c:	2b00      	cmp	r3, #0
 800745e:	d049      	beq.n	80074f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007466:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800746a:	429a      	cmp	r2, r3
 800746c:	d242      	bcs.n	80074f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	623b      	str	r3, [r7, #32]
   return(result);
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3308      	adds	r3, #8
 800748e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007492:	633a      	str	r2, [r7, #48]	; 0x30
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e3      	bne.n	800746e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a16      	ldr	r2, [pc, #88]	; (8007504 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80074aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f043 0320 	orr.w	r3, r3, #32
 80074c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	69b9      	ldr	r1, [r7, #24]
 80074d4:	69fa      	ldr	r2, [r7, #28]
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	617b      	str	r3, [r7, #20]
   return(result);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e4      	bne.n	80074ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e2:	e007      	b.n	80074f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0208 	orr.w	r2, r2, #8
 80074f2:	619a      	str	r2, [r3, #24]
}
 80074f4:	bf00      	nop
 80074f6:	37b8      	adds	r7, #184	; 0xb8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	effffffe 	.word	0xeffffffe
 8007500:	58000c00 	.word	0x58000c00
 8007504:	08006c89 	.word	0x08006c89

08007508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_UARTEx_DisableFifoMode+0x16>
 8007556:	2302      	movs	r3, #2
 8007558:	e027      	b.n	80075aa <HAL_UARTEx_DisableFifoMode+0x66>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	; 0x24
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f022 0201 	bic.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007588:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2220      	movs	r2, #32
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e02d      	b.n	800762a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2224      	movs	r2, #36	; 0x24
 80075da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0201 	bic.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f850 	bl	80076b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007646:	2302      	movs	r3, #2
 8007648:	e02d      	b.n	80076a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2224      	movs	r2, #36	; 0x24
 8007656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0201 	bic.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f812 	bl	80076b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2220      	movs	r2, #32
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d108      	bne.n	80076d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076d0:	e031      	b.n	8007736 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076d2:	2310      	movs	r3, #16
 80076d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076d6:	2310      	movs	r3, #16
 80076d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	0e5b      	lsrs	r3, r3, #25
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	0f5b      	lsrs	r3, r3, #29
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	7b3a      	ldrb	r2, [r7, #12]
 80076fe:	4911      	ldr	r1, [pc, #68]	; (8007744 <UARTEx_SetNbDataToProcess+0x94>)
 8007700:	5c8a      	ldrb	r2, [r1, r2]
 8007702:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007706:	7b3a      	ldrb	r2, [r7, #12]
 8007708:	490f      	ldr	r1, [pc, #60]	; (8007748 <UARTEx_SetNbDataToProcess+0x98>)
 800770a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800770c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	7b7a      	ldrb	r2, [r7, #13]
 800771c:	4909      	ldr	r1, [pc, #36]	; (8007744 <UARTEx_SetNbDataToProcess+0x94>)
 800771e:	5c8a      	ldrb	r2, [r1, r2]
 8007720:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007724:	7b7a      	ldrb	r2, [r7, #13]
 8007726:	4908      	ldr	r1, [pc, #32]	; (8007748 <UARTEx_SetNbDataToProcess+0x98>)
 8007728:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800772a:	fb93 f3f2 	sdiv	r3, r3, r2
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
 8007742:	bf00      	nop
 8007744:	080077f4 	.word	0x080077f4
 8007748:	080077fc 	.word	0x080077fc

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <__libc_init_array>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	4d0d      	ldr	r5, [pc, #52]	; (8007794 <__libc_init_array+0x38>)
 8007760:	4c0d      	ldr	r4, [pc, #52]	; (8007798 <__libc_init_array+0x3c>)
 8007762:	1b64      	subs	r4, r4, r5
 8007764:	10a4      	asrs	r4, r4, #2
 8007766:	2600      	movs	r6, #0
 8007768:	42a6      	cmp	r6, r4
 800776a:	d109      	bne.n	8007780 <__libc_init_array+0x24>
 800776c:	4d0b      	ldr	r5, [pc, #44]	; (800779c <__libc_init_array+0x40>)
 800776e:	4c0c      	ldr	r4, [pc, #48]	; (80077a0 <__libc_init_array+0x44>)
 8007770:	f000 f818 	bl	80077a4 <_init>
 8007774:	1b64      	subs	r4, r4, r5
 8007776:	10a4      	asrs	r4, r4, #2
 8007778:	2600      	movs	r6, #0
 800777a:	42a6      	cmp	r6, r4
 800777c:	d105      	bne.n	800778a <__libc_init_array+0x2e>
 800777e:	bd70      	pop	{r4, r5, r6, pc}
 8007780:	f855 3b04 	ldr.w	r3, [r5], #4
 8007784:	4798      	blx	r3
 8007786:	3601      	adds	r6, #1
 8007788:	e7ee      	b.n	8007768 <__libc_init_array+0xc>
 800778a:	f855 3b04 	ldr.w	r3, [r5], #4
 800778e:	4798      	blx	r3
 8007790:	3601      	adds	r6, #1
 8007792:	e7f2      	b.n	800777a <__libc_init_array+0x1e>
 8007794:	0800780c 	.word	0x0800780c
 8007798:	0800780c 	.word	0x0800780c
 800779c:	0800780c 	.word	0x0800780c
 80077a0:	08007810 	.word	0x08007810

080077a4 <_init>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr

080077b0 <_fini>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr
